
obj/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_start>:
   0:	e10f0000 	mrs	r0, CPSR
   4:	e3c0001f 	bic	r0, r0, #31
   8:	e3800013 	orr	r0, r0, #19
   c:	e38000c0 	orr	r0, r0, #192	; 0xc0
  10:	e129f000 	msr	CPSR_fc, r0
  14:	ee110f50 	mrc	15, 0, r0, cr1, cr0, {2}
  18:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
  1c:	ee010f50 	mcr	15, 0, r0, cr1, cr0, {2}
  20:	f57ff06f 	isb	sy
  24:	e3a00101 	mov	r0, #1073741824	; 0x40000000
  28:	eee80a10 	vmsr	fpexc, r0
  2c:	e59fd034 	ldr	sp, [pc, #52]	; 68 <GET8+0x8>
  30:	eb000093 	bl	284 <_main>

00000034 <.loop>:
  34:	eafffffe 	b	34 <.loop>

00000038 <PUT32>:
  38:	e5801000 	str	r1, [r0]
  3c:	e12fff1e 	bx	lr

00000040 <GET32>:
  40:	e5900000 	ldr	r0, [r0]
  44:	e12fff1e 	bx	lr

00000048 <PUT16>:
  48:	e1c010b0 	strh	r1, [r0]
  4c:	e12fff1e 	bx	lr

00000050 <GET16>:
  50:	e1d000b0 	ldrh	r0, [r0]
  54:	e12fff1e 	bx	lr

00000058 <PUT8>:
  58:	e5c01000 	strb	r1, [r0]
  5c:	e12fff1e 	bx	lr

00000060 <GET8>:
  60:	e5d00000 	ldrb	r0, [r0]
  64:	e12fff1e 	bx	lr
  68:	4030cdfc 	ldrshtmi	ip, [r0], -ip

0000006c <CM_SetClk>:
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
  6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  70:	e28db000 	add	fp, sp, #0
  74:	e24dd014 	sub	sp, sp, #20
  78:	e50b0008 	str	r0, [fp, #-8]
  7c:	e50b100c 	str	r1, [fp, #-12]
  80:	e50b2010 	str	r2, [fp, #-16]

	PUT32(module+reg, value);
  84:	e51b2008 	ldr	r2, [fp, #-8]
  88:	e51b300c 	ldr	r3, [fp, #-12]
  8c:	e0823003 	add	r3, r2, r3
  90:	e51b2010 	ldr	r2, [fp, #-16]
  94:	e5832000 	str	r2, [r3]
}
  98:	e28bd000 	add	sp, fp, #0
  9c:	e8bd0800 	ldmfd	sp!, {fp}
  a0:	e12fff1e 	bx	lr

000000a4 <CM_GetClk>:

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
  a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  a8:	e28db000 	add	fp, sp, #0
  ac:	e24dd00c 	sub	sp, sp, #12
  b0:	e50b0008 	str	r0, [fp, #-8]
  b4:	e50b100c 	str	r1, [fp, #-12]
	return GET32(module+reg);
  b8:	e51b2008 	ldr	r2, [fp, #-8]
  bc:	e51b300c 	ldr	r3, [fp, #-12]
  c0:	e0823003 	add	r3, r2, r3
  c4:	e5933000 	ldr	r3, [r3]
}
  c8:	e1a00003 	mov	r0, r3
  cc:	e28bd000 	add	sp, fp, #0
  d0:	e8bd0800 	ldmfd	sp!, {fp}
  d4:	e12fff1e 	bx	lr

000000d8 <Init_UART0_Clk>:

void Init_UART0_Clk()
{
  d8:	e92d4800 	push	{fp, lr}
  dc:	e28db004 	add	fp, sp, #4
  e0:	e24dd008 	sub	sp, sp, #8

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
  e4:	e3a00b01 	mov	r0, #1024	; 0x400
  e8:	e34404e0 	movt	r0, #17632	; 0x44e0
  ec:	e3a01000 	mov	r1, #0
  f0:	ebffffeb 	bl	a4 <CM_GetClk>
  f4:	e50b0008 	str	r0, [fp, #-8]
	temp &= ~(0x3);
  f8:	e51b3008 	ldr	r3, [fp, #-8]
  fc:	e3c33003 	bic	r3, r3, #3
 100:	e50b3008 	str	r3, [fp, #-8]
	temp |= (0x2);
 104:	e51b3008 	ldr	r3, [fp, #-8]
 108:	e3833002 	orr	r3, r3, #2
 10c:	e50b3008 	str	r3, [fp, #-8]
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
 110:	e3a00b01 	mov	r0, #1024	; 0x400
 114:	e34404e0 	movt	r0, #17632	; 0x44e0
 118:	e3a01000 	mov	r1, #0
 11c:	e51b2008 	ldr	r2, [fp, #-8]
 120:	ebffffd1 	bl	6c <CM_SetClk>

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 124:	e3a00000 	mov	r0, #0
 128:	e34404e0 	movt	r0, #17632	; 0x44e0
 12c:	e3a01f47 	mov	r1, #284	; 0x11c
 130:	ebffffdb 	bl	a4 <CM_GetClk>
 134:	e50b0008 	str	r0, [fp, #-8]
	temp &= ~(0x3);
 138:	e51b3008 	ldr	r3, [fp, #-8]
 13c:	e3c33003 	bic	r3, r3, #3
 140:	e50b3008 	str	r3, [fp, #-8]
	temp |= (0x2);
 144:	e51b3008 	ldr	r3, [fp, #-8]
 148:	e3833002 	orr	r3, r3, #2
 14c:	e50b3008 	str	r3, [fp, #-8]
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
 150:	e3a00000 	mov	r0, #0
 154:	e34404e0 	movt	r0, #17632	; 0x44e0
 158:	e3a01f47 	mov	r1, #284	; 0x11c
 15c:	e51b2008 	ldr	r2, [fp, #-8]
 160:	ebffffc1 	bl	6c <CM_SetClk>

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 164:	e3a00b01 	mov	r0, #1024	; 0x400
 168:	e34404e0 	movt	r0, #17632	; 0x44e0
 16c:	e3a010b4 	mov	r1, #180	; 0xb4
 170:	ebffffcb 	bl	a4 <CM_GetClk>
 174:	e50b0008 	str	r0, [fp, #-8]
	temp &= ~(0x3);
 178:	e51b3008 	ldr	r3, [fp, #-8]
 17c:	e3c33003 	bic	r3, r3, #3
 180:	e50b3008 	str	r3, [fp, #-8]
	temp |= (0x2);
 184:	e51b3008 	ldr	r3, [fp, #-8]
 188:	e3833002 	orr	r3, r3, #2
 18c:	e50b3008 	str	r3, [fp, #-8]
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
 190:	e3a00b01 	mov	r0, #1024	; 0x400
 194:	e34404e0 	movt	r0, #17632	; 0x44e0
 198:	e3a010b4 	mov	r1, #180	; 0xb4
 19c:	e51b2008 	ldr	r2, [fp, #-8]
 1a0:	ebffffb1 	bl	6c <CM_SetClk>
*/
	

   

}
 1a4:	e24bd004 	sub	sp, fp, #4
 1a8:	e8bd8800 	pop	{fp, pc}

000001ac <CM_setCtrlModule>:
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
 1ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1b0:	e28db000 	add	fp, sp, #0
 1b4:	e24dd00c 	sub	sp, sp, #12
 1b8:	e50b0008 	str	r0, [fp, #-8]
 1bc:	e50b100c 	str	r1, [fp, #-12]

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
 1c0:	e51b3008 	ldr	r3, [fp, #-8]
 1c4:	e2833311 	add	r3, r3, #1140850688	; 0x44000000
 1c8:	e28338e1 	add	r3, r3, #14745600	; 0xe10000
 1cc:	e51b200c 	ldr	r2, [fp, #-12]
 1d0:	e5832000 	str	r2, [r3]
}
 1d4:	e28bd000 	add	sp, fp, #0
 1d8:	e8bd0800 	ldmfd	sp!, {fp}
 1dc:	e12fff1e 	bx	lr

000001e0 <CM_getCtrlModule>:

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
 1e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 1e4:	e28db000 	add	fp, sp, #0
 1e8:	e24dd00c 	sub	sp, sp, #12
 1ec:	e50b0008 	str	r0, [fp, #-8]
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
 1f0:	e51b3008 	ldr	r3, [fp, #-8]
 1f4:	e2833311 	add	r3, r3, #1140850688	; 0x44000000
 1f8:	e28338e1 	add	r3, r3, #14745600	; 0xe10000
 1fc:	e5933000 	ldr	r3, [r3]
}
 200:	e1a00003 	mov	r0, r3
 204:	e28bd000 	add	sp, fp, #0
 208:	e8bd0800 	ldmfd	sp!, {fp}
 20c:	e12fff1e 	bx	lr

00000210 <PAD_setMode>:

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
 210:	e92d4800 	push	{fp, lr}
 214:	e28db004 	add	fp, sp, #4
 218:	e24dd010 	sub	sp, sp, #16
 21c:	e50b0010 	str	r0, [fp, #-16]
 220:	e50b1014 	str	r1, [fp, #-20]
	unsigned int temp = CM_getCtrlModule(0);
 224:	e3a00000 	mov	r0, #0
 228:	ebffffec 	bl	1e0 <CM_getCtrlModule>
 22c:	e50b0008 	str	r0, [fp, #-8]
	temp &= ~(0b111);    // turn down MUXMODE
 230:	e51b3008 	ldr	r3, [fp, #-8]
 234:	e3c33007 	bic	r3, r3, #7
 238:	e50b3008 	str	r3, [fp, #-8]
	temp |= mode;        // set new MUXMODE
 23c:	e51b2008 	ldr	r2, [fp, #-8]
 240:	e51b3014 	ldr	r3, [fp, #-20]
 244:	e1823003 	orr	r3, r2, r3
 248:	e50b3008 	str	r3, [fp, #-8]
	CM_setCtrlModule(module, temp);
 24c:	e51b0010 	ldr	r0, [fp, #-16]
 250:	e51b1008 	ldr	r1, [fp, #-8]
 254:	ebffffd4 	bl	1ac <CM_setCtrlModule>


}
 258:	e24bd004 	sub	sp, fp, #4
 25c:	e8bd8800 	pop	{fp, pc}

00000260 <Uart0_Mux>:




void Uart0_Mux()
{
 260:	e92d4800 	push	{fp, lr}
 264:	e28db004 	add	fp, sp, #4

	CM_setCtrlModule(CM_conf_uart0_rxd, (1 << 4) | (1 << 5));		//Rx muxing
 268:	e3a00e97 	mov	r0, #2416	; 0x970
 26c:	e3a01030 	mov	r1, #48	; 0x30
 270:	ebffffcd 	bl	1ac <CM_setCtrlModule>
	CM_setCtrlModule(CM_conf_uart0_txd,0);					//tx muxing
 274:	e3000974 	movw	r0, #2420	; 0x974
 278:	e3a01000 	mov	r1, #0
 27c:	ebffffca 	bl	1ac <CM_setCtrlModule>
/*
	PAD_setMode(CM_conf_uart0_txd, 0);
	PAD_setMode(CM_conf_uart0_rxd, 0);
*/
}
 280:	e8bd8800 	pop	{fp, pc}

00000284 <_main>:
#define CM_PER_BASE 		 0x44e00000
#define CM_PER_GPIO1		 0xac


void _main(void)
{
 284:	e92d4800 	push	{fp, lr}
 288:	e28db004 	add	fp, sp, #4
 28c:	e24dd008 	sub	sp, sp, #8


	volatile unsigned int ra;
	char a = 'a';
 290:	e3a03061 	mov	r3, #97	; 0x61
 294:	e54b3009 	strb	r3, [fp, #-9]

	PUT32(CM_PER_BASE+CM_PER_GPIO1, 1<<18 | 2);
 298:	e3a030ac 	mov	r3, #172	; 0xac
 29c:	e34434e0 	movt	r3, #17632	; 0x44e0
 2a0:	e3a02002 	mov	r2, #2
 2a4:	e3402004 	movt	r2, #4
 2a8:	e5832000 	str	r2, [r3]
	ra = GET32(GPIO1_BASE+GPIO_OE);
 2ac:	e30c3134 	movw	r3, #49460	; 0xc134
 2b0:	e3443804 	movt	r3, #18436	; 0x4804
 2b4:	e5933000 	ldr	r3, [r3]
 2b8:	e50b3008 	str	r3, [fp, #-8]
	ra &= ~(1<<21);
 2bc:	e51b3008 	ldr	r3, [fp, #-8]
 2c0:	e3c33602 	bic	r3, r3, #2097152	; 0x200000
 2c4:	e50b3008 	str	r3, [fp, #-8]
	PUT32(GPIO1_BASE+GPIO_OE, ra);
 2c8:	e30c3134 	movw	r3, #49460	; 0xc134
 2cc:	e3443804 	movt	r3, #18436	; 0x4804
 2d0:	e51b2008 	ldr	r2, [fp, #-8]
 2d4:	e5832000 	str	r2, [r3]

	PUT32(GPIO1_BASE+GPIO_SETDATAOUT, 1<<21);
 2d8:	e30c3194 	movw	r3, #49556	; 0xc194
 2dc:	e3443804 	movt	r3, #18436	; 0x4804
 2e0:	e3a02602 	mov	r2, #2097152	; 0x200000
 2e4:	e5832000 	str	r2, [r3]

	UART_init(115200,STOP1,PARITY_NONE,FLOW_OFF);
 2e8:	e3a00cc2 	mov	r0, #49664	; 0xc200
 2ec:	e3400001 	movt	r0, #1
 2f0:	e3a01000 	mov	r1, #0
 2f4:	e3a02000 	mov	r2, #0
 2f8:	e3a03000 	mov	r3, #0
 2fc:	eb00008f 	bl	540 <UART_init>

	UART_putString("UART0 Initialized...\n",21);
 300:	e30006e8 	movw	r0, #1768	; 0x6e8
 304:	e3400000 	movt	r0, #0
 308:	e3a01015 	mov	r1, #21
 30c:	eb0000c2 	bl	61c <UART_putString>

}
 310:	e24bd004 	sub	sp, fp, #4
 314:	e8bd8800 	pop	{fp, pc}

00000318 <GPIO_init>:
#include "uart_console_header.h"
#include "clock.h"
#include "control_module.h"

void GPIO_init()
{
 318:	e92d4800 	push	{fp, lr}
 31c:	e28db004 	add	fp, sp, #4
 320:	e24dd008 	sub	sp, sp, #8
	unsigned int setting = (1<<18) | (0x2<<0);
 324:	e3a03002 	mov	r3, #2
 328:	e3403004 	movt	r3, #4
 32c:	e50b3008 	str	r3, [fp, #-8]
	CM_SetClk(CM_PER, CM_PER_GPIO1_CLKCTRL, setting);
 330:	e3a00000 	mov	r0, #0
 334:	e34404e0 	movt	r0, #17632	; 0x44e0
 338:	e3a010ac 	mov	r1, #172	; 0xac
 33c:	e51b2008 	ldr	r2, [fp, #-8]
 340:	ebffff49 	bl	6c <CM_SetClk>
	while((CM_GetClk(CM_PER, CM_PER_GPIO1_CLKCTRL) & (0x3<<16)) != 0);
 344:	e1a00000 	nop			; (mov r0, r0)
 348:	e3a00000 	mov	r0, #0
 34c:	e34404e0 	movt	r0, #17632	; 0x44e0
 350:	e3a010ac 	mov	r1, #172	; 0xac
 354:	ebffff52 	bl	a4 <CM_GetClk>
 358:	e1a03000 	mov	r3, r0
 35c:	e2033803 	and	r3, r3, #196608	; 0x30000
 360:	e3530000 	cmp	r3, #0
 364:	1afffff7 	bne	348 <GPIO_init+0x30>

}
 368:	e24bd004 	sub	sp, fp, #4
 36c:	e8bd8800 	pop	{fp, pc}

00000370 <Uart0_Reset>:


void Uart0_Reset(unsigned int baudrate) 
{
 370:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 374:	e28db000 	add	fp, sp, #0
 378:	e24dd01c 	sub	sp, sp, #28
 37c:	e50b0018 	str	r0, [fp, #-24]
	unsigned int temp = GET32(UART0+SYSC);
 380:	e3093054 	movw	r3, #36948	; 0x9054
 384:	e34434e0 	movt	r3, #17632	; 0x44e0
 388:	e5933000 	ldr	r3, [r3]
 38c:	e50b3010 	str	r3, [fp, #-16]
	temp |= 0x2;
 390:	e51b3010 	ldr	r3, [fp, #-16]
 394:	e3833002 	orr	r3, r3, #2
 398:	e50b3010 	str	r3, [fp, #-16]
	PUT32(UART0+SYSC, temp);				//Uart soft reset
 39c:	e3093054 	movw	r3, #36948	; 0x9054
 3a0:	e34434e0 	movt	r3, #17632	; 0x44e0
 3a4:	e51b2010 	ldr	r2, [fp, #-16]
 3a8:	e5832000 	str	r2, [r3]
	while(((GET32(UART0+SYSS)) & 0x1) == 0);		//Wait till reset is complete
 3ac:	e1a00000 	nop			; (mov r0, r0)
 3b0:	e3093058 	movw	r3, #36952	; 0x9058
 3b4:	e34434e0 	movt	r3, #17632	; 0x44e0
 3b8:	e5933000 	ldr	r3, [r3]
 3bc:	e2033001 	and	r3, r3, #1
 3c0:	e3530000 	cmp	r3, #0
 3c4:	0afffff9 	beq	3b0 <Uart0_Reset+0x40>

	temp = GET8(UART0+SYSC);
 3c8:	e3093054 	movw	r3, #36948	; 0x9054
 3cc:	e34434e0 	movt	r3, #17632	; 0x44e0
 3d0:	e5d33000 	ldrb	r3, [r3]
 3d4:	e6ef3073 	uxtb	r3, r3
 3d8:	e50b3010 	str	r3, [fp, #-16]
	temp |= (0x1 << 0x3);
 3dc:	e51b3010 	ldr	r3, [fp, #-16]
 3e0:	e3833008 	orr	r3, r3, #8
 3e4:	e50b3010 	str	r3, [fp, #-16]
	PUT8(UART0+SYSC, temp);				//No idle
 3e8:	e3093054 	movw	r3, #36948	; 0x9054
 3ec:	e34434e0 	movt	r3, #17632	; 0x44e0
 3f0:	e51b2010 	ldr	r2, [fp, #-16]
 3f4:	e6ef2072 	uxtb	r2, r2
 3f8:	e5c32000 	strb	r2, [r3]

	while(((GET32(UART0+LSR) & 0x40) !=0x40));    		// wait for txfifo to be empty
 3fc:	e1a00000 	nop			; (mov r0, r0)
 400:	e3093014 	movw	r3, #36884	; 0x9014
 404:	e34434e0 	movt	r3, #17632	; 0x44e0
 408:	e5933000 	ldr	r3, [r3]
 40c:	e2033040 	and	r3, r3, #64	; 0x40
 410:	e3530000 	cmp	r3, #0
 414:	0afffff9 	beq	400 <Uart0_Reset+0x90>
	float div = 48000000.0/(16.0*(float)baudrate);
 418:	ed5b7a06 	vldr	s15, [fp, #-24]	; 0xffffffe8
 41c:	eef87a67 	vcvt.f32.u32	s15, s15
 420:	eef71ae7 	vcvt.f64.f32	d17, s15
 424:	eef30b00 	vmov.f64	d16, #48	; 0x30
 428:	ee610ba0 	vmul.f64	d16, d17, d16
 42c:	eddf1b41 	vldr	d17, [pc, #260]	; 538 <Uart0_Reset+0x1c8>
 430:	eec10ba0 	vdiv.f64	d16, d17, d16
 434:	eef77be0 	vcvt.f32.f64	s15, d16
 438:	ed4b7a03 	vstr	s15, [fp, #-12]
	unsigned int intdiv = (unsigned int) div; 
 43c:	ed5b7a03 	vldr	s15, [fp, #-12]
 440:	eefc7ae7 	vcvt.u32.f32	s15, s15
 444:	ed4b7a02 	vstr	s15, [fp, #-8]
	/* UART Interrupt Enable Register */
	PUT8(UART0+IER, 0);					//Disable uart interrupts
 448:	e3093004 	movw	r3, #36868	; 0x9004
 44c:	e34434e0 	movt	r3, #17632	; 0x44e0
 450:	e3a02000 	mov	r2, #0
 454:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+MDR1,0x7);        // Disable modeselect (default) TRM table 19-50
 458:	e3093020 	movw	r3, #36896	; 0x9020
 45c:	e34434e0 	movt	r3, #17632	; 0x44e0
 460:	e3a02007 	mov	r2, #7
 464:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
 468:	e309300c 	movw	r3, #36876	; 0x900c
 46c:	e34434e0 	movt	r3, #17632	; 0x44e0
 470:	e3e0207c 	mvn	r2, #124	; 0x7c
 474:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+RHR,0);          // DLL = 0
 478:	e3a03a09 	mov	r3, #36864	; 0x9000
 47c:	e34434e0 	movt	r3, #17632	; 0x44e0
 480:	e3a02000 	mov	r2, #0
 484:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+IER,0);          // DHL = 0
 488:	e3093004 	movw	r3, #36868	; 0x9004
 48c:	e34434e0 	movt	r3, #17632	; 0x44e0
 490:	e3a02000 	mov	r2, #0
 494:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+LCR,0x3);        // set uart as 8bit
 498:	e309300c 	movw	r3, #36876	; 0x900c
 49c:	e34434e0 	movt	r3, #17632	; 0x44e0
 4a0:	e3a02003 	mov	r2, #3
 4a4:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+MCR,0x3);        // force /rts & /drt to active (low) (?!)
 4a8:	e3093010 	movw	r3, #36880	; 0x9010
 4ac:	e34434e0 	movt	r3, #17632	; 0x44e0
 4b0:	e3a02003 	mov	r2, #3
 4b4:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+FCR,0x7);        // clear rx&tx FIFOs, and enables them (each 64 bytes deep)
 4b8:	e3093008 	movw	r3, #36872	; 0x9008
 4bc:	e34434e0 	movt	r3, #17632	; 0x44e0
 4c0:	e3a02007 	mov	r2, #7
 4c4:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
 4c8:	e309300c 	movw	r3, #36876	; 0x900c
 4cc:	e34434e0 	movt	r3, #17632	; 0x44e0
 4d0:	e3e0207c 	mvn	r2, #124	; 0x7c
 4d4:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+RHR,intdiv&0xFF);          // DLL = 0
 4d8:	e3a03a09 	mov	r3, #36864	; 0x9000
 4dc:	e34434e0 	movt	r3, #17632	; 0x44e0
 4e0:	e51b2008 	ldr	r2, [fp, #-8]
 4e4:	e6ef2072 	uxtb	r2, r2
 4e8:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+IER,(intdiv>>8)&0x3F);          // DHL = 0
 4ec:	e3093004 	movw	r3, #36868	; 0x9004
 4f0:	e34434e0 	movt	r3, #17632	; 0x44e0
 4f4:	e51b2008 	ldr	r2, [fp, #-8]
 4f8:	e1a02422 	lsr	r2, r2, #8
 4fc:	e6ef2072 	uxtb	r2, r2
 500:	e202203f 	and	r2, r2, #63	; 0x3f
 504:	e6ef2072 	uxtb	r2, r2
 508:	e5c32000 	strb	r2, [r3]


	PUT8(UART0+LCR,0x3);        // set uart as 8 bit
 50c:	e309300c 	movw	r3, #36876	; 0x900c
 510:	e34434e0 	movt	r3, #17632	; 0x44e0
 514:	e3a02003 	mov	r2, #3
 518:	e5c32000 	strb	r2, [r3]
	PUT8(UART0+MDR1,0);          // uart 16x oversampling
 51c:	e3093020 	movw	r3, #36896	; 0x9020
 520:	e34434e0 	movt	r3, #17632	; 0x44e0
 524:	e3a02000 	mov	r2, #0
 528:	e5c32000 	strb	r2, [r3]

}
 52c:	e28bd000 	add	sp, fp, #0
 530:	e8bd0800 	ldmfd	sp!, {fp}
 534:	e12fff1e 	bx	lr
 538:	00000000 	andeq	r0, r0, r0
 53c:	4186e360 	orrmi	lr, r6, r0, ror #6

00000540 <UART_init>:

void UART_init(unsigned int baudrate, STOP_BIT_t stopBit, PARITY_BIT_t parity, FLOW_t flowControl) 
{
 540:	e92d4800 	push	{fp, lr}
 544:	e28db004 	add	fp, sp, #4
 548:	e24dd010 	sub	sp, sp, #16
 54c:	e50b0008 	str	r0, [fp, #-8]
 550:	e50b100c 	str	r1, [fp, #-12]
 554:	e50b2010 	str	r2, [fp, #-16]
 558:	e50b3014 	str	r3, [fp, #-20]

	//	GPIO_init();

	//UART mux config
	Uart0_Mux();
 55c:	ebffff3f 	bl	260 <Uart0_Mux>

	//Init clock and muxing of pins
	Init_UART0_Clk();
 560:	ebfffedc 	bl	d8 <Init_UART0_Clk>

	//Uart soft reset
	Uart0_Reset(baudrate);
 564:	e51b0008 	ldr	r0, [fp, #-8]
 568:	ebffff80 	bl	370 <Uart0_Reset>
}
 56c:	e24bd004 	sub	sp, fp, #4
 570:	e8bd8800 	pop	{fp, pc}

00000574 <UART_putC>:

void UART_putC( char c)
{
 574:	e92d4800 	push	{fp, lr}
 578:	e28db004 	add	fp, sp, #4
 57c:	e24dd008 	sub	sp, sp, #8
 580:	e1a03000 	mov	r3, r0
 584:	e54b3005 	strb	r3, [fp, #-5]

	if (c == '\n')
 588:	e55b3005 	ldrb	r3, [fp, #-5]
 58c:	e353000a 	cmp	r3, #10
 590:	1a000001 	bne	59c <UART_putC+0x28>
		UART_putC('\r');
 594:	e3a0000d 	mov	r0, #13
 598:	ebfffff5 	bl	574 <UART_putC>

	while((GET8(UART0+0x14)&0x20)!=0x20)	//wait until txfifo is empty
 59c:	e1a00000 	nop			; (mov r0, r0)
 5a0:	e3093014 	movw	r3, #36884	; 0x9014
 5a4:	e34434e0 	movt	r3, #17632	; 0x44e0
 5a8:	e5d33000 	ldrb	r3, [r3]
 5ac:	e6ef3073 	uxtb	r3, r3
 5b0:	e2033020 	and	r3, r3, #32
 5b4:	e3530000 	cmp	r3, #0
 5b8:	0afffff8 	beq	5a0 <UART_putC+0x2c>
		;


	PUT8(UART0 +0,c);
 5bc:	e3a03a09 	mov	r3, #36864	; 0x9000
 5c0:	e34434e0 	movt	r3, #17632	; 0x44e0
 5c4:	e55b2005 	ldrb	r2, [fp, #-5]
 5c8:	e5c32000 	strb	r2, [r3]
}
 5cc:	e24bd004 	sub	sp, fp, #4
 5d0:	e8bd8800 	pop	{fp, pc}

000005d4 <UART_getC>:
char UART_getC()
{
 5d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 5d8:	e28db000 	add	fp, sp, #0
	while((GET8(UART0+0x14)&0x1)==0);     //wait for a character to be in the rx fifo
 5dc:	e1a00000 	nop			; (mov r0, r0)
 5e0:	e3093014 	movw	r3, #36884	; 0x9014
 5e4:	e34434e0 	movt	r3, #17632	; 0x44e0
 5e8:	e5d33000 	ldrb	r3, [r3]
 5ec:	e6ef3073 	uxtb	r3, r3
 5f0:	e2033001 	and	r3, r3, #1
 5f4:	e3530000 	cmp	r3, #0
 5f8:	0afffff8 	beq	5e0 <UART_getC+0xc>
	return GET8(UART0+0x0);
 5fc:	e3a03a09 	mov	r3, #36864	; 0x9000
 600:	e34434e0 	movt	r3, #17632	; 0x44e0
 604:	e5d33000 	ldrb	r3, [r3]
 608:	e6ef3073 	uxtb	r3, r3
}
 60c:	e1a00003 	mov	r0, r3
 610:	e28bd000 	add	sp, fp, #0
 614:	e8bd0800 	ldmfd	sp!, {fp}
 618:	e12fff1e 	bx	lr

0000061c <UART_putString>:

int UART_putString(char *str, unsigned int length)
{ 
 61c:	e92d4800 	push	{fp, lr}
 620:	e28db004 	add	fp, sp, #4
 624:	e24dd010 	sub	sp, sp, #16
 628:	e50b0010 	str	r0, [fp, #-16]
 62c:	e50b1014 	str	r1, [fp, #-20]
	int i = 0;
 630:	e3a03000 	mov	r3, #0
 634:	e50b3008 	str	r3, [fp, #-8]
	while( i < length)
 638:	ea000008 	b	660 <UART_putString+0x44>
	{   
		UART_putC(str[i]);
 63c:	e51b3008 	ldr	r3, [fp, #-8]
 640:	e51b2010 	ldr	r2, [fp, #-16]
 644:	e0823003 	add	r3, r2, r3
 648:	e5d33000 	ldrb	r3, [r3]
 64c:	e1a00003 	mov	r0, r3
 650:	ebffffc7 	bl	574 <UART_putC>
		i++;
 654:	e51b3008 	ldr	r3, [fp, #-8]
 658:	e2833001 	add	r3, r3, #1
 65c:	e50b3008 	str	r3, [fp, #-8]
}

int UART_putString(char *str, unsigned int length)
{ 
	int i = 0;
	while( i < length)
 660:	e51b2008 	ldr	r2, [fp, #-8]
 664:	e51b3014 	ldr	r3, [fp, #-20]
 668:	e1520003 	cmp	r2, r3
 66c:	3afffff2 	bcc	63c <UART_putString+0x20>
	{   
		UART_putC(str[i]);
		i++;
	}   
	return length;
 670:	e51b3014 	ldr	r3, [fp, #-20]
}
 674:	e1a00003 	mov	r0, r3
 678:	e24bd004 	sub	sp, fp, #4
 67c:	e8bd8800 	pop	{fp, pc}

00000680 <UART_getString>:

int UART_getString(char *buf, unsigned int length)
{
 680:	e92d4810 	push	{r4, fp, lr}
 684:	e28db008 	add	fp, sp, #8
 688:	e24dd014 	sub	sp, sp, #20
 68c:	e50b0018 	str	r0, [fp, #-24]
 690:	e50b101c 	str	r1, [fp, #-28]
	for(int i = 0; i < length; i ++)
 694:	e3a03000 	mov	r3, #0
 698:	e50b3010 	str	r3, [fp, #-16]
 69c:	ea000008 	b	6c4 <UART_getString+0x44>
	{
		buf[i] = UART_getC();
 6a0:	e51b3010 	ldr	r3, [fp, #-16]
 6a4:	e51b2018 	ldr	r2, [fp, #-24]
 6a8:	e0824003 	add	r4, r2, r3
 6ac:	ebffffc8 	bl	5d4 <UART_getC>
 6b0:	e1a03000 	mov	r3, r0
 6b4:	e5c43000 	strb	r3, [r4]
	return length;
}

int UART_getString(char *buf, unsigned int length)
{
	for(int i = 0; i < length; i ++)
 6b8:	e51b3010 	ldr	r3, [fp, #-16]
 6bc:	e2833001 	add	r3, r3, #1
 6c0:	e50b3010 	str	r3, [fp, #-16]
 6c4:	e51b2010 	ldr	r2, [fp, #-16]
 6c8:	e51b301c 	ldr	r3, [fp, #-28]
 6cc:	e1520003 	cmp	r2, r3
 6d0:	3afffff2 	bcc	6a0 <UART_getString+0x20>
	{
		buf[i] = UART_getC();
	}
	return length;
 6d4:	e51b301c 	ldr	r3, [fp, #-28]
}
 6d8:	e1a00003 	mov	r0, r3
 6dc:	e24bd008 	sub	sp, fp, #8
 6e0:	e8bd8810 	pop	{r4, fp, pc}
 6e4:	e320f000 	nop	{0}

Disassembly of section .rodata:

000006e8 <.LC0>:
 6e8:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
 6ec:	6e492030 	mcrvs	0, 2, r2, cr9, cr0, {1}
 6f0:	61697469 	cmnvs	r9, r9, ror #8
 6f4:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
 6f8:	2e2e2e64 	cdpcs	14, 2, cr2, cr14, cr4, {3}
 6fc:	0000000a 	andeq	r0, r0, sl

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003a41 	andeq	r3, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000030 	andeq	r0, r0, r0, lsr r0
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	06003841 	streq	r3, [r0], -r1, asr #16
  1c:	0841070a 	stmdaeq	r1, {r1, r3, r8, r9, sl}^
  20:	0a020901 	beq	8242c <.LC0+0x81d44>
  24:	12010c03 	andne	r0, r1, #768	; 0x300
  28:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  30:	1b021a01 	blne	8683c <.LC0+0x86154>
  34:	22011c03 	andcs	r1, r1, #768	; 0x300
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <.LC0+0x10d063c>
   4:	62552820 	subsvs	r2, r5, #32, 16	; 0x200000
   8:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
   c:	6e694c2f 	cdpvs	12, 6, cr4, cr9, cr15, {1}
  10:	206f7261 	rsbcs	r7, pc, r1, ror #4
  14:	2e372e34 	mrccs	14, 1, r2, cr7, cr4, {1}
  18:	32312d33 	eorscc	r2, r1, #3264	; 0xcc0
  1c:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  20:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  24:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000047a 	andeq	r0, r0, sl, ror r4
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000663 	andeq	r0, r0, r3, ror #12
      10:	00092201 	andeq	r2, r9, r1, lsl #4
      14:	00030600 	andeq	r0, r3, r0, lsl #12
      18:	00006c00 	andeq	r6, r0, r0, lsl #24
      1c:	0001ac00 	andeq	sl, r1, r0, lsl #24
      20:	00000000 	andeq	r0, r0, r0
      24:	062f0200 	strteq	r0, [pc], -r0, lsl #4
      28:	04020000 	streq	r0, [r2], #-0
      2c:	00000030 	andeq	r0, r0, r0, lsr r0
      30:	b4070403 	strlt	r0, [r7], #-1027	; 0x403
      34:	03000006 	movweq	r0, #6
      38:	06ae0702 	strteq	r0, [lr], r2, lsl #14
      3c:	01030000 	mrseq	r0, (UNDEF: 3)
      40:	0005c508 	andeq	ip, r5, r8, lsl #10
      44:	05040400 	streq	r0, [r4, #-1024]	; 0x400
      48:	00746e69 	rsbseq	r6, r4, r9, ror #28
      4c:	15050203 	strne	r0, [r5, #-515]	; 0x203
      50:	03000001 	movweq	r0, #1
      54:	05ce0801 	strbeq	r0, [lr, #2049]	; 0x801
      58:	04050000 	streq	r0, [r5], #-0
      5c:	00b30b03 	adcseq	r0, r3, r3, lsl #22
      60:	8f060000 	svchi	0x00060000
      64:	80000005 	andhi	r0, r0, r5
      68:	04a78080 	strteq	r8, [r7], #128	; 0x80
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
      6c:	00061306 	andeq	r1, r6, r6, lsl #6
      70:	80888000 	addhi	r8, r8, r0
      74:	110604a7 	smlatbne	r6, r7, r4, r0
      78:	80000007 	andhi	r0, r0, r7
      7c:	04a7808a 	strteq	r8, [r7], #138	; 0x8a
      80:	00082306 	andeq	r2, r8, r6, lsl #6

	PUT32(module+reg, value);
      84:	808c8000 	addhi	r8, ip, r0
      88:	190604a7 	stmdbne	r6, {r0, r1, r2, r5, r7, sl}
      8c:	80000008 	andhi	r0, r0, r8
      90:	04a7808e 	strteq	r8, [r7], #142	; 0x8e
      94:	0001e706 	andeq	lr, r1, r6, lsl #14
}
      98:	80908000 	addshi	r8, r0, r0
      9c:	870604a7 	strhi	r0, [r6, -r7, lsr #9]
      a0:	80000008 	andhi	r0, r0, r8

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
      a4:	04a78092 	strteq	r8, [r7], #146	; 0x92
      a8:	0005eb06 	andeq	lr, r5, r6, lsl #22
      ac:	80948000 	addshi	r8, r4, r0
      b0:	020004a7 	andeq	r0, r0, #-1493172224	; 0xa7000000
      b4:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
	return GET32(module+reg);
      b8:	005a1403 	subseq	r1, sl, r3, lsl #8
      bc:	04050000 	streq	r0, [r5], #-0
      c0:	03ce1c03 	biceq	r1, lr, #768	; 0x300
      c4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
}
      c8:	00000007 	andeq	r0, r0, r7
      cc:	00053506 	andeq	r3, r5, r6, lsl #10
      d0:	94060400 	strls	r0, [r6], #-1024	; 0x400
      d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>

void Init_UART0_Clk()
{
      d8:	00000006 	andeq	r0, r0, r6
      dc:	48060c00 	stmdami	r6, {sl, fp}
      e0:	14000004 	strne	r0, [r0], #-4

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
      e4:	0007dd06 	andeq	sp, r7, r6, lsl #26
      e8:	b1061800 	tstlt	r6, r0, lsl #16
      ec:	1c000005 	stcne	0, cr0, [r0], {5}
      f0:	00007f06 	andeq	r7, r0, r6, lsl #30
      f4:	d6062400 	strle	r2, [r6], -r0, lsl #8
	temp &= ~(0x3);
      f8:	28000006 	stmdacs	r0, {r1, r2}
      fc:	0007c606 	andeq	ip, r7, r6, lsl #12
     100:	66062c00 	strvs	r2, [r6], -r0, lsl #24
	temp |= (0x2);
     104:	30000009 	andcc	r0, r0, r9
     108:	00001406 	andeq	r1, r0, r6, lsl #8
     10c:	df063400 	svcle	0x00063400
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
     110:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     114:	0001ee06 	andeq	lr, r1, r6, lsl #28
     118:	ea063c00 	b	18f120 <.LC0+0x18ea38>
     11c:	c0000006 	andgt	r0, r0, r6
     120:	029b0600 	addseq	r0, fp, #0, 12

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
     124:	00c40000 	sbceq	r0, r4, r0
     128:	00021606 	andeq	r1, r2, r6, lsl #12
     12c:	0600c800 	streq	ip, [r0], -r0, lsl #16
     130:	0000002a 	andeq	r0, r0, sl, lsr #32
     134:	ca0600cc 	bgt	18046c <.LC0+0x17fd84>
	temp &= ~(0x3);
     138:	d0000003 	andle	r0, r0, r3
     13c:	05210600 	streq	r0, [r1, #-1536]!	; 0x600
     140:	00e00000 	rsceq	r0, r0, r0
	temp |= (0x2);
     144:	0001d306 	andeq	sp, r1, r6, lsl #6
     148:	0600e400 	streq	lr, [r0], -r0, lsl #8
     14c:	00000069 	andeq	r0, r0, r9, rrx
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
     150:	db0600e8 	blle	1804f8 <.LC0+0x17fe10>
     154:	ec000009 	stc	0, cr0, [r0], {9}
     158:	0a840600 	beq	fe101960 <.LC0+0xfe101278>
     15c:	00f00000 	rscseq	r0, r0, r0
     160:	0002af06 	andeq	sl, r2, r6, lsl #30

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
     164:	0600f400 	streq	pc, [r0], -r0, lsl #8
     168:	00000054 	andeq	r0, r0, r4, asr r0
     16c:	7b0600f8 	blvc	180554 <.LC0+0x17fe6c>
     170:	fc000004 	stc2	0, cr0, [r0], {4}
     174:	02560600 	subseq	r0, r6, #0, 12
	temp &= ~(0x3);
     178:	01800000 	orreq	r0, r0, r0
     17c:	0002c406 	andeq	ip, r2, r6, lsl #8
     180:	06018400 	streq	r8, [r1], -r0, lsl #8
	temp |= (0x2);
     184:	00000371 	andeq	r0, r0, r1, ror r3
     188:	83060188 	movwhi	r0, #24968	; 0x6188
     18c:	ac000006 	stcge	0, cr0, [r0], {6}
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
     190:	06c10601 	strbeq	r0, [r1], r1, lsl #12
     194:	01b00000 	movseq	r0, r0
     198:	00071906 	andeq	r1, r7, r6, lsl #18
     19c:	0601b400 	streq	fp, [r1], -r0, lsl #8
     1a0:	000008a7 	andeq	r0, r0, r7, lsr #17
*/
	

   

}
     1a4:	be0601bc 	mcrlt	1, 0, r0, cr6, cr12, {5}
     1a8:	c0000001 	andgt	r0, r0, r1
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
     1ac:	03f00601 	mvnseq	r0, #1048576	; 0x100000
     1b0:	01c40000 	biceq	r0, r4, r0
     1b4:	000a5506 	andeq	r5, sl, r6, lsl #10
     1b8:	0601cc00 	streq	ip, [r1], -r0, lsl #24
     1bc:	000008f8 	strdeq	r0, [r0], -r8

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
     1c0:	050601d0 	streq	r0, [r6, #-464]	; 0x1d0
     1c4:	d4000004 	strle	r0, [r0], #-4
     1c8:	04de0601 	ldrbeq	r0, [lr], #1537	; 0x601
     1cc:	01d80000 	bicseq	r0, r8, r0
     1d0:	000a6c06 	andeq	r6, sl, r6, lsl #24
}
     1d4:	0601dc00 	streq	sp, [r1], -r0, lsl #24
     1d8:	000003de 	ldrdeq	r0, [r0], -lr
     1dc:	3e0601e0 	adfccdz	f0, f6, f0

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
     1e0:	e4000002 	str	r0, [r0], #-2
     1e4:	064b0601 	strbeq	r0, [fp], -r1, lsl #12
     1e8:	01e80000 	mvneq	r0, r0
     1ec:	0003b406 	andeq	fp, r3, r6, lsl #8
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
     1f0:	0601ec00 	streq	lr, [r1], -r0, lsl #24
     1f4:	0000041c 	andeq	r0, r0, ip, lsl r4
     1f8:	6c0601f0 	stfvss	f0, [r6], {240}	; 0xf0
     1fc:	f4000002 	vst4.8	{d0-d3}, [r0], r2
}
     200:	02da0601 	sbcseq	r0, sl, #1048576	; 0x100000
     204:	01f80000 	mvnseq	r0, r0
     208:	00074406 	andeq	r4, r7, r6, lsl #8
     20c:	0601fc00 	streq	pc, [r1], -r0, lsl #24

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
     210:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
     214:	ee060280 	cdp	2, 0, cr0, cr6, cr0, {4}
     218:	8c000002 	stchi	0, cr0, [r0], {2}
     21c:	05d30602 	ldrbeq	r0, [r3, #1538]	; 0x602
     220:	02900000 	addseq	r0, r0, #0
	unsigned int temp = CM_getCtrlModule(0);
     224:	00003e06 	andeq	r3, r0, r6, lsl #28
     228:	06029c00 	streq	r9, [r2], -r0, lsl #24
     22c:	000008cf 	andeq	r0, r0, pc, asr #17
	temp &= ~(0b111);    // turn down MUXMODE
     230:	7a0602a0 	bvc	180cb8 <.LC0+0x1805d0>
     234:	ac000009 	stcge	0, cr0, [r0], {9}
     238:	04ac0602 	strteq	r0, [ip], #1538	; 0x602
	temp |= mode;        // set new MUXMODE
     23c:	02b00000 	adcseq	r0, r0, #0
     240:	0009c106 	andeq	ip, r9, r6, lsl #2
     244:	0602c000 	streq	ip, [r2], -r0
     248:	0000082a 	andeq	r0, r0, sl, lsr #16
	CM_setCtrlModule(module, temp);
     24c:	ab0602c4 	blge	180d64 <.LC0+0x18067c>
     250:	c8000009 	stmdagt	r0, {r0, r3}
     254:	017c0602 	cmneq	ip, r2, lsl #12


}
     258:	02cc0000 	sbceq	r0, ip, #0
     25c:	00059606 	andeq	r9, r5, r6, lsl #12




void Uart0_Mux()
{
     260:	0602d000 	streq	sp, [r2], -r0
     264:	0000092a 	andeq	r0, r0, sl, lsr #18

	CM_setCtrlModule(CM_conf_uart0_rxd, (1 << 4) | (1 << 5));		//Rx muxing
     268:	03870600 	orreq	r0, r7, #0, 12
     26c:	06040000 	streq	r0, [r4], -r0
     270:	00000432 	andeq	r0, r0, r2, lsr r4
	CM_setCtrlModule(CM_conf_uart0_txd,0);					//tx muxing
     274:	0a990608 	beq	fe641a9c <.LC0+0xfe6413b4>
     278:	060c0000 	streq	r0, [ip], -r0
     27c:	0000094f 	andeq	r0, r0, pc, asr #18
/*
	PAD_setMode(CM_conf_uart0_txd, 0);
	PAD_setMode(CM_conf_uart0_rxd, 0);
*/
}
     280:	085b0610 	ldmdaeq	fp, {r4, r9, sl}^
#define CM_PER_BASE 		 0x44e00000
#define CM_PER_GPIO1		 0xac


void _main(void)
{
     284:	06140000 	ldreq	r0, [r4], -r0
     288:	0000076e 	andeq	r0, r0, lr, ror #14
     28c:	08e30618 	stmiaeq	r3!, {r3, r4, r9, sl}^


	volatile unsigned int ra;
	char a = 'a';
     290:	061c0000 	ldreq	r0, [ip], -r0
     294:	000007f1 	strdeq	r0, [r0], -r1

	PUT32(CM_PER_BASE+CM_PER_GPIO1, 1<<18 | 2);
     298:	04910620 	ldreq	r0, [r1], #1568	; 0x620
     29c:	06240000 	strteq	r0, [r4], -r0
     2a0:	00000280 	andeq	r0, r0, r0, lsl #5
     2a4:	090f0628 	stmdbeq	pc, {r3, r5, r9, sl}	; <UNPREDICTABLE>
     2a8:	062c0000 	strteq	r0, [ip], -r0
	ra = GET32(GPIO1_BASE+GPIO_OE);
     2ac:	00000759 	andeq	r0, r0, r9, asr r7
     2b0:	011f0630 	tsteq	pc, r0, lsr r6	; <UNPREDICTABLE>
     2b4:	06340000 	ldrteq	r0, [r4], -r0
     2b8:	00000840 	andeq	r0, r0, r0, asr #16
	ra &= ~(1<<21);
     2bc:	00aa0638 	adceq	r0, sl, r8, lsr r6
     2c0:	063c0000 	ldrteq	r0, [ip], -r0
     2c4:	00000782 	andeq	r0, r0, r2, lsl #15
	PUT32(GPIO1_BASE+GPIO_OE, ra);
     2c8:	f00600c0 			; <UNDEFINED> instruction: 0xf00600c0
     2cc:	c4000009 	strgt	r0, [r0], #-9
     2d0:	08730600 	ldmdaeq	r3!, {r9, sl}^
     2d4:	00c80000 	sbceq	r0, r8, r0

	PUT32(GPIO1_BASE+GPIO_SETDATAOUT, 1<<21);
     2d8:	0000f406 	andeq	pc, r0, r6, lsl #8
     2dc:	0600cc00 	streq	ip, [r0], -r0, lsl #24
     2e0:	00000a39 	andeq	r0, r0, r9, lsr sl
     2e4:	7b0600d0 	blvc	18062c <.LC0+0x17ff44>

	UART_init(115200,STOP1,PARITY_NONE,FLOW_OFF);
     2e8:	d4000005 	strle	r0, [r0], #-5
     2ec:	01950600 	orrseq	r0, r5, r0, lsl #12
     2f0:	00d80000 	sbcseq	r0, r8, r0
     2f4:	00061b06 	andeq	r1, r6, r6, lsl #22
     2f8:	0600dc00 	streq	sp, [r0], -r0, lsl #24
     2fc:	0000045f 	andeq	r0, r0, pc, asr r4

	UART_putString("UART0 Initialized...\n",21);
     300:	950600e0 	strls	r0, [r6, #-224]	; 0xe0
     304:	e4000007 	str	r0, [r0], #-7
     308:	02020600 	andeq	r0, r2, #0, 12
     30c:	00e80000 	rsceq	r0, r8, r0

}
     310:	00013206 	andeq	r3, r1, r6, lsl #4
     314:	0600ec00 	streq	lr, [r0], -r0, lsl #24
#include "uart_console_header.h"
#include "clock.h"
#include "control_module.h"

void GPIO_init()
{
     318:	00000638 	andeq	r0, r0, r8, lsr r6
     31c:	5b0600f0 	blpl	1806e4 <.LC0+0x17fffc>
     320:	f4000001 	vst4.8	{d0-d3}, [r0], r1
	unsigned int setting = (1<<18) | (0x2<<0);
     324:	0a060600 	beq	181b2c <.LC0+0x181444>
     328:	00f80000 	rscseq	r0, r8, r0
     32c:	00069806 	andeq	r9, r6, r6, lsl #16
	CM_SetClk(CM_PER, CM_PER_GPIO1_CLKCTRL, setting);
     330:	0600fc00 	streq	pc, [r0], -r0, lsl #24
     334:	0000022a 	andeq	r0, r0, sl, lsr #4
     338:	47060180 	strmi	r0, [r6, -r0, lsl #3]
     33c:	84000001 	strhi	r0, [r0], #-1
     340:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
	while((CM_GetClk(CM_PER, CM_PER_GPIO1_CLKCTRL) & (0x3<<16)) != 0);
     344:	01880000 	orreq	r0, r8, r0
     348:	00066f06 	andeq	r6, r6, r6, lsl #30
     34c:	06018c00 	streq	r8, [r1], -r0, lsl #24
     350:	00000352 	andeq	r0, r0, r2, asr r3
     354:	4a060190 	bmi	18099c <.LC0+0x1802b4>
     358:	94000005 	strls	r0, [r0], #-5
     35c:	08040601 	stmdaeq	r4, {r0, r9, sl}
     360:	01980000 	orrseq	r0, r8, r0
     364:	00050b06 	andeq	r0, r5, r6, lsl #22

}
     368:	06019c00 	streq	r9, [r1], -r0, lsl #24
     36c:	00000ad2 	ldrdeq	r0, [r0], -r2


void Uart0_Reset(unsigned int baudrate) 
{
     370:	bb0601a0 	bllt	1809f8 <.LC0+0x180310>
     374:	a4000008 	strge	r0, [r0], #-8
     378:	01ab0601 			; <UNDEFINED> instruction: 0x01ab0601
     37c:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
	unsigned int temp = GET32(UART0+SYSC);
     380:	00093c06 	andeq	r3, r9, r6, lsl #24
     384:	0601ac00 	streq	sl, [r1], -r0, lsl #24
     388:	0000033a 	andeq	r0, r0, sl, lsr r3
     38c:	f50601b0 			; <UNDEFINED> instruction: 0xf50601b0
	temp |= 0x2;
     390:	b4000004 	strlt	r0, [r0], #-4
     394:	0abd0601 	beq	fef41ba0 <.LC0+0xfef414b8>
     398:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
	PUT32(UART0+SYSC, temp);				//Uart soft reset
     39c:	000a2106 	andeq	r2, sl, r6, lsl #2
     3a0:	0601bc00 	streq	fp, [r1], -r0, lsl #24
     3a4:	000004c1 	andeq	r0, r0, r1, asr #9
     3a8:	940601c0 	strls	r0, [r6], #-448	; 0x1c0
	while(((GET32(UART0+SYSS)) & 0x1) == 0);		//Wait till reset is complete
     3ac:	c4000009 	strgt	r0, [r0], #-9
     3b0:	055e0601 	ldrbeq	r0, [lr, #-1537]	; 0x601
     3b4:	01c80000 	biceq	r0, r8, r0
     3b8:	00088e06 	andeq	r8, r8, r6, lsl #28
     3bc:	0601cc00 	streq	ip, [r1], -r0, lsl #24
     3c0:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
     3c4:	ff0601d4 			; <UNDEFINED> instruction: 0xff0601d4

	temp = GET8(UART0+SYSC);
     3c8:	d8000005 	stmdale	r0, {r0, r2}
     3cc:	c5020001 	strgt	r0, [r2, #-1]
     3d0:	03000000 	movweq	r0, #0
     3d4:	0000be93 	muleq	r0, r3, lr
     3d8:	67010700 	strvs	r0, [r1, -r0, lsl #14]
	temp |= (0x1 << 0x3);
     3dc:	01000003 	tsteq	r0, r3
     3e0:	006c0103 	rsbeq	r0, ip, r3, lsl #2
     3e4:	00a40000 	adceq	r0, r4, r0
	PUT8(UART0+SYSC, temp);				//No idle
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     3f0:	08000004 	stmdaeq	r0, {r2}
     3f4:	00001760 	andeq	r1, r0, r0, ror #14
     3f8:	00b30301 	adcseq	r0, r3, r1, lsl #6

	while(((GET32(UART0+LSR) & 0x40) !=0x40));    		// wait for txfifo to be empty
     3fc:	91020000 	mrsls	r0, (UNDEF: 2)
     400:	65720974 	ldrbvs	r0, [r2, #-2420]!	; 0x974
     404:	03010067 	movweq	r0, #4199	; 0x1067
     408:	000003ce 	andeq	r0, r0, lr, asr #7
     40c:	08709102 	ldmdaeq	r0!, {r1, r8, ip, pc}^
     410:	00000176 	andeq	r0, r0, r6, ror r1
     414:	00300301 	eorseq	r0, r0, r1, lsl #6
	float div = 48000000.0/(16.0*(float)baudrate);
     418:	91020000 	mrsls	r0, (UNDEF: 2)
     41c:	010a006c 	tsteq	sl, ip, rrx
     420:	000005f5 	strdeq	r0, [r0], -r5
     424:	30010901 	andcc	r0, r1, r1, lsl #18
     428:	a4000000 	strge	r0, [r0], #-0
     42c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     430:	2c000000 	stccs	0, cr0, [r0], {-0}
     434:	01000000 	mrseq	r0, (UNDEF: 0)
     438:	00000459 	andeq	r0, r0, r9, asr r4
	unsigned int intdiv = (unsigned int) div; 
     43c:	00176008 	andseq	r6, r7, r8
     440:	b3090100 	movwlt	r0, #37120	; 0x9100
     444:	02000000 	andeq	r0, r0, #0
	/* UART Interrupt Enable Register */
	PUT8(UART0+IER, 0);					//Disable uart interrupts
     448:	72097491 	andvc	r7, r9, #-1862270976	; 0x91000000
     44c:	01006765 	tsteq	r0, r5, ror #14
     450:	0003ce09 	andeq	ip, r3, r9, lsl #28
     454:	70910200 	addsvc	r0, r1, r0, lsl #4
	PUT8(UART0+MDR1,0x7);        // Disable modeselect (default) TRM table 19-50
     458:	d0010b00 	andle	r0, r1, r0, lsl #22
     45c:	01000000 	mrseq	r0, (UNDEF: 0)
     460:	0000d80e 	andeq	sp, r0, lr, lsl #16
     464:	0001ac00 	andeq	sl, r1, r0, lsl #24
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
     468:	00005800 	andeq	r5, r0, r0, lsl #16
     46c:	100c0100 	andne	r0, ip, r0, lsl #2
     470:	01000001 	tsteq	r0, r1
     474:	00003011 	andeq	r3, r0, r1, lsl r0
	PUT8(UART0+RHR,0);          // DLL = 0
     478:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     47c:	07150000 	ldreq	r0, [r5, -r0]
     480:	00020000 	andeq	r0, r2, r0
     484:	000000c6 	andeq	r0, r0, r6, asr #1
	PUT8(UART0+IER,0);          // DHL = 0
     488:	06630104 	strbteq	r0, [r3], -r4, lsl #2
     48c:	85010000 	strhi	r0, [r1, #-0]
     490:	0600000b 	streq	r0, [r0], -fp
     494:	ac000003 	stcge	0, cr0, [r0], {3}
	PUT8(UART0+LCR,0x3);        // set uart as 8bit
     498:	84000001 	strhi	r0, [r0], #-1
     49c:	60000002 	andvs	r0, r0, r2
     4a0:	02000000 	andeq	r0, r0, #0
     4a4:	0000062f 	andeq	r0, r0, pc, lsr #12
	PUT8(UART0+MCR,0x3);        // force /rts & /drt to active (low) (?!)
     4a8:	00300402 	eorseq	r0, r0, r2, lsl #8
     4ac:	04030000 	streq	r0, [r3], #-0
     4b0:	0006b407 	andeq	fp, r6, r7, lsl #8
     4b4:	07020300 	streq	r0, [r2, -r0, lsl #6]
	PUT8(UART0+FCR,0x7);        // clear rx&tx FIFOs, and enables them (each 64 bytes deep)
     4b8:	000006ae 	andeq	r0, r0, lr, lsr #13
     4bc:	c5080103 	strgt	r0, [r8, #-259]	; 0x103
     4c0:	04000005 	streq	r0, [r0], #-5
     4c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
     4c8:	02030074 	andeq	r0, r3, #116	; 0x74
     4cc:	00011505 	andeq	r1, r1, r5, lsl #10
     4d0:	08010300 	stmdaeq	r1, {r8, r9}
     4d4:	000005ce 	andeq	r0, r0, lr, asr #11
	PUT8(UART0+RHR,intdiv&0xFF);          // DLL = 0
     4d8:	09030405 	stmdbeq	r3, {r0, r2, sl}
     4dc:	0000064f 	andeq	r0, r0, pc, asr #12
     4e0:	00175506 	andseq	r5, r7, r6, lsl #10
     4e4:	2c060000 	stccs	0, cr0, [r6], {-0}
     4e8:	04000013 	streq	r0, [r0], #-19
	PUT8(UART0+IER,(intdiv>>8)&0x3F);          // DHL = 0
     4ec:	00189906 	andseq	r9, r8, r6, lsl #18
     4f0:	43061000 	movwmi	r1, #24576	; 0x6000
     4f4:	c000001a 	andgt	r0, r0, sl, lsl r0
     4f8:	1abe0600 	bne	fef81d00 <.LC0+0xfef81618>
     4fc:	02900000 	addseq	r0, r0, #0
     500:	00115506 	andseq	r5, r1, r6, lsl #10
     504:	06089c00 	streq	r9, [r8], -r0, lsl #24
     508:	00001a8b 	andeq	r1, r0, fp, lsl #21


	PUT8(UART0+LCR,0x3);        // set uart as 8 bit
     50c:	6e0608a8 	cdpvs	8, 0, cr0, cr6, cr8, {5}
     510:	ac00000f 	stcge	0, cr0, [r0], {15}
     514:	16f00608 	ldrbtne	r0, [r0], r8, lsl #12
     518:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
	PUT8(UART0+MDR1,0);          // uart 16x oversampling
     51c:	000d1e06 	andeq	r1, sp, r6, lsl #28
     520:	0608c800 	streq	ip, [r8], -r0, lsl #16
     524:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
     528:	a50608cc 	strge	r0, [r6, #-2252]	; 0x8cc

}
     52c:	d8000019 	stmdale	r0, {r0, r3, r4}
     530:	14f70608 	ldrbtne	r0, [r7], #1544	; 0x608
     534:	08e80000 	stmiaeq	r8!, {}^	; <UNPREDICTABLE>
     538:	00106806 	andseq	r6, r0, r6, lsl #16
     53c:	0608f000 	streq	pc, [r8], -r0

void UART_init(unsigned int baudrate, STOP_BIT_t stopBit, PARITY_BIT_t parity, FLOW_t flowControl) 
{
     540:	00000f25 	andeq	r0, r0, r5, lsr #30
     544:	6c060a8c 	stcvs	10, cr0, [r6], {140}	; 0x8c
     548:	80000017 	andhi	r0, r0, r7, lsl r0
     54c:	1746060c 	strbne	r0, [r6, -ip, lsl #12]
     550:	0c840000 	stceq	0, cr0, [r4], {0}
     554:	000f3b06 	andeq	r3, pc, r6, lsl #22
     558:	060c8800 	streq	r8, [ip], -r0, lsl #16

	//	GPIO_init();

	//UART mux config
	Uart0_Mux();
     55c:	00001779 	andeq	r1, r0, r9, ror r7

	//Init clock and muxing of pins
	Init_UART0_Clk();
     560:	61060c8c 	smlabbvs	r6, ip, ip, r0

	//Uart soft reset
	Uart0_Reset(baudrate);
     564:	90000019 	andls	r0, r0, r9, lsl r0
     568:	1216060c 	andsne	r0, r6, #12, 12	; 0xc00000
}
     56c:	0c940000 	ldceq	0, cr0, [r4], {0}
     570:	0018f206 	andseq	pc, r8, r6, lsl #4

void UART_putC( char c)
{
     574:	060ca000 	streq	sl, [ip], -r0
     578:	0000178c 	andeq	r1, r0, ip, lsl #15
     57c:	ff060ca4 			; <UNDEFINED> instruction: 0xff060ca4
     580:	a8000018 	stmdage	r0, {r3, r4}
     584:	1798060c 	ldrne	r0, [r8, ip, lsl #12]

	if (c == '\n')
     588:	0cac0000 	stceq	0, cr0, [ip]
     58c:	00130a06 	andseq	r0, r3, r6, lsl #20
     590:	060cb000 	streq	fp, [ip], -r0
		UART_putC('\r');
     594:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
     598:	aa060cb4 	bge	183870 <.LC0+0x183188>

	while((GET8(UART0+0x14)&0x20)!=0x20)	//wait until txfifo is empty
     59c:	b8000011 	stmdalt	r0, {r0, r4}
     5a0:	1249060c 	subne	r0, r9, #12, 12	; 0xc00000
     5a4:	0cbc0000 	ldceq	0, cr0, [ip]
     5a8:	0015f506 	andseq	pc, r5, r6, lsl #10
     5ac:	060cc400 	streq	ip, [ip], -r0, lsl #8
     5b0:	0000192c 	andeq	r1, r0, ip, lsr #18
     5b4:	cf060cc8 	svcgt	0x00060cc8
     5b8:	d0000016 	andle	r0, r0, r6, lsl r0
		;


	PUT8(UART0 +0,c);
     5bc:	0bc2060c 	bleq	ff081df4 <.LC0+0xff08170c>
     5c0:	0ce40000 	stcleq	0, cr0, [r4]
     5c4:	000d7a06 	andeq	r7, sp, r6, lsl #20
     5c8:	060cf000 	streq	pc, [ip], -r0
}
     5cc:	0000140f 	andeq	r1, r0, pc, lsl #8
     5d0:	14060cf4 	strne	r0, [r6], #-3316	; 0xcf4
char UART_getC()
{
     5d4:	90000010 	andls	r0, r0, r0, lsl r0
     5d8:	1029060d 	eorne	r0, r9, sp, lsl #12
	while((GET8(UART0+0x14)&0x1)==0);     //wait for a character to be in the rx fifo
     5dc:	0d940000 	ldceq	0, cr0, [r4]
     5e0:	00103e06 	andseq	r3, r0, r6, lsl #28
     5e4:	060d9800 	streq	r9, [sp], -r0, lsl #16
     5e8:	00001053 	andeq	r1, r0, r3, asr r0
     5ec:	af060d9c 	svcge	0x00060d9c
     5f0:	a000000e 	andge	r0, r0, lr
     5f4:	1295060d 	addsne	r0, r5, #13631488	; 0xd00000
     5f8:	0da40000 	stceq	0, cr0, [r4]
	return GET8(UART0+0x0);
     5fc:	0012f506 	andseq	pc, r2, r6, lsl #10
     600:	060da800 	streq	sl, [sp], -r0, lsl #16
     604:	0000116b 	andeq	r1, r0, fp, ror #2
     608:	6b060ef0 	blvs	1841d0 <.LC0+0x183ae8>
}
     60c:	f4000013 	vst4.8	{d0-d3}, [r0 :64], r3
     610:	17b7060e 	ldrne	r0, [r7, lr, lsl #12]!
     614:	0ef80000 	cdpeq	0, 15, cr0, cr8, cr0, {0}
     618:	00155106 	andseq	r5, r5, r6, lsl #2

int UART_putString(char *str, unsigned int length)
{ 
     61c:	060efc00 	streq	pc, [lr], -r0, lsl #24
     620:	000011cb 	andeq	r1, r0, fp, asr #3
     624:	e7060fb8 			; <UNDEFINED> instruction: 0xe7060fb8
     628:	bc000013 	stclt	0, cr0, [r0], {19}
     62c:	0dde060f 	ldcleq	6, cr0, [lr, #60]	; 0x3c
	int i = 0;
     630:	0fd00000 	svceq	0x00d00000
     634:	00190c06 	andseq	r0, r9, r6, lsl #24
	while( i < length)
     638:	060ff400 	streq	pc, [pc], -r0, lsl #8
	{   
		UART_putC(str[i]);
     63c:	00000be1 	andeq	r0, r0, r1, ror #23
     640:	37060ffc 			; <UNDEFINED> instruction: 0x37060ffc
     644:	8000000c 	andhi	r0, r0, ip
     648:	0c480610 	mcrreq	6, 1, r0, r8, cr0
     64c:	10840000 	addne	r0, r4, r0
     650:	000c5906 	andeq	r5, ip, r6, lsl #18
		i++;
     654:	06108800 	ldreq	r8, [r0], -r0, lsl #16
     658:	00000c6a 	andeq	r0, r0, sl, ror #24
     65c:	7b06108c 	blvc	184894 <.LC0+0x1841ac>
}

int UART_putString(char *str, unsigned int length)
{ 
	int i = 0;
	while( i < length)
     660:	9000000c 	andls	r0, r0, ip
     664:	0c8c0610 	stceq	6, cr0, [ip], {16}
     668:	10940000 	addsne	r0, r4, r0
     66c:	000c9d06 	andeq	r9, ip, r6, lsl #26
	{   
		UART_putC(str[i]);
		i++;
	}   
	return length;
     670:	06109800 	ldreq	r9, [r0], -r0, lsl #16
}
     674:	00000cae 	andeq	r0, r0, lr, lsr #25
     678:	bf06109c 	svclt	0x0006109c
     67c:	a000000c 	andge	r0, r0, ip

int UART_getString(char *buf, unsigned int length)
{
     680:	0cd00610 	ldcleq	6, cr0, [r0], {16}
     684:	10a40000 	adcne	r0, r4, r0
     688:	001a1f06 	andseq	r1, sl, r6, lsl #30
     68c:	0610a800 	ldreq	sl, [r0], -r0, lsl #16
     690:	00001a31 	andeq	r1, r0, r1, lsr sl
	for(int i = 0; i < length; i ++)
     694:	e20610ac 	and	r1, r6, #172	; 0xac
     698:	b0000019 	andlt	r0, r0, r9, lsl r0
     69c:	1a550610 	bne	1541ee4 <.LC0+0x15417fc>
	{
		buf[i] = UART_getC();
     6a0:	10b40000 	adcsne	r0, r4, r0
     6a4:	001a6706 	andseq	r6, sl, r6, lsl #14
     6a8:	0610b800 	ldreq	fp, [r0], -r0, lsl #16
     6ac:	00001a79 	andeq	r1, r0, r9, ror sl
     6b0:	e50610bc 	str	r1, [r6, #-188]	; 0xbc
     6b4:	c000000a 	andgt	r0, r0, sl
	return length;
}

int UART_getString(char *buf, unsigned int length)
{
	for(int i = 0; i < length; i ++)
     6b8:	0af50610 	beq	ffd41f00 <.LC0+0xffd41818>
     6bc:	10c40000 	sbcne	r0, r4, r0
     6c0:	000b0506 	andeq	r0, fp, r6, lsl #10
     6c4:	0610c800 	ldreq	ip, [r0], -r0, lsl #16
     6c8:	00000b15 	andeq	r0, r0, r5, lsl fp
     6cc:	250610cc 	strcs	r1, [r6, #-204]	; 0xcc
     6d0:	d000000b 	andle	r0, r0, fp
	{
		buf[i] = UART_getC();
	}
	return length;
     6d4:	0b350610 	bleq	d41f1c <.LC0+0xd41834>
}
     6d8:	10d40000 	sbcsne	r0, r4, r0
     6dc:	000b4506 	andeq	r4, fp, r6, lsl #10
     6e0:	0610d800 	ldreq	sp, [r0], -r0, lsl #16
     6e4:	00000b55 	andeq	r0, r0, r5, asr fp
     6e8:	650610dc 	strvs	r1, [r6, #-220]	; 0xdc
     6ec:	e000000b 	and	r0, r0, fp
     6f0:	0b750610 	bleq	1d41f38 <.LC0+0x1d41850>
     6f4:	10e40000 	rscne	r0, r4, r0
     6f8:	00112b06 	andseq	r2, r1, r6, lsl #22
     6fc:	0610e800 	ldreq	lr, [r0], -r0, lsl #16
     700:	00001540 	andeq	r1, r0, r0, asr #10
     704:	240610ec 	strcs	r1, [r6], #-236	; 0xec
     708:	f000000c 			; <UNDEFINED> instruction: 0xf000000c
     70c:	107a0610 	rsbsne	r0, sl, r0, lsl r6
     710:	10f40000 	rscsne	r0, r4, r0
     714:	00167706 	andseq	r7, r6, r6, lsl #14
     718:	0610f800 	ldreq	pc, [r0], -r0, lsl #16
     71c:	00001119 	andeq	r1, r0, r9, lsl r1
     720:	ee0610fc 	mcr	0, 0, r1, cr6, cr12, {7}
     724:	8000000b 	andhi	r0, r0, fp
     728:	0c000611 	stceq	6, cr0, [r0], {17}
     72c:	11840000 	orrne	r0, r4, r0
     730:	000c1206 	andeq	r1, ip, r6, lsl #4
     734:	06118800 	ldreq	r8, [r1], -r0, lsl #16
     738:	000015e4 	andeq	r1, r0, r4, ror #11
     73c:	fa06118c 	blx	184d74 <.LC0+0x18468c>
     740:	9000000e 	andls	r0, r0, lr
     744:	161a0611 			; <UNDEFINED> instruction: 0x161a0611
     748:	11940000 	orrsne	r0, r4, r0
     74c:	00110806 	andseq	r0, r1, r6, lsl #16
     750:	06119800 	ldreq	r9, [r1], -r0, lsl #16
     754:	000012bd 			; <UNDEFINED> instruction: 0x000012bd
     758:	1f06119c 	svcne	0x0006119c
     75c:	a000000e 	andge	r0, r0, lr
     760:	0e310611 	mrceq	6, 1, r0, cr1, cr1, {0}
     764:	11a40000 			; <UNDEFINED> instruction: 0x11a40000
     768:	000e4306 	andeq	r4, lr, r6, lsl #6
     76c:	0611a800 	ldreq	sl, [r1], -r0, lsl #16
     770:	00000e55 	andeq	r0, r0, r5, asr lr
     774:	670611ac 	strvs	r1, [r6, -ip, lsr #3]
     778:	b000000e 	andlt	r0, r0, lr
     77c:	0e790611 	mrceq	6, 3, r0, cr9, cr1, {0}
     780:	11b40000 			; <UNDEFINED> instruction: 0x11b40000
     784:	000e8b06 	andeq	r8, lr, r6, lsl #22
     788:	0611b800 	ldreq	fp, [r1], -r0, lsl #16
     78c:	00000e9d 	muleq	r0, sp, lr
     790:	ae0611bc 	mcrge	1, 0, r1, cr6, cr12, {5}
     794:	c0000018 	andgt	r0, r0, r8, lsl r0
     798:	0ebc0611 	mrceq	6, 5, r0, cr12, cr1, {0}
     79c:	11c40000 	bicne	r0, r4, r0
     7a0:	000d2e06 	andeq	r2, sp, r6, lsl #28
     7a4:	0611c800 	ldreq	ip, [r1], -r0, lsl #16
     7a8:	00000d41 	andeq	r0, r0, r1, asr #26
     7ac:	540611cc 	strpl	r1, [r6], #-460	; 0x1cc
     7b0:	d000000d 	andle	r0, r0, sp
     7b4:	0d670611 	stcleq	6, cr0, [r7, #-68]!	; 0xffffffbc
     7b8:	11d40000 	bicsne	r0, r4, r0
     7bc:	0017a406 	andseq	sl, r7, r6, lsl #8
     7c0:	0611d800 	ldreq	sp, [r1], -r0, lsl #16
     7c4:	00000d88 	andeq	r0, r0, r8, lsl #27
     7c8:	db0611dc 	blle	184f40 <.LC0+0x184858>
     7cc:	e000001a 	and	r0, r0, sl, lsl r0
     7d0:	14e50611 	strbtne	r0, [r5], #1553	; 0x611
     7d4:	11e40000 	mvnne	r0, r0
     7d8:	000fae06 	andeq	sl, pc, r6, lsl #28
     7dc:	0611e800 	ldreq	lr, [r1], -r0, lsl #16
     7e0:	0000133e 	andeq	r1, r0, lr, lsr r3
     7e4:	a20611ec 	andge	r1, r6, #236, 2	; 0x3b
     7e8:	f0000014 			; <UNDEFINED> instruction: 0xf0000014
     7ec:	14900611 	ldrne	r0, [r0], #1553	; 0x611
     7f0:	11f40000 	mvnsne	r0, r0
     7f4:	00100206 	andseq	r0, r0, r6, lsl #4
     7f8:	0611f800 	ldreq	pc, [r1], -r0, lsl #16
     7fc:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     800:	c50611fc 	strgt	r1, [r6, #-508]	; 0x1fc
     804:	80000010 	andhi	r0, r0, r0, lsl r0
     808:	12220612 	eorne	r0, r2, #18874368	; 0x1200000
     80c:	12840000 	addne	r0, r4, #0
     810:	00150406 	andseq	r0, r5, r6, lsl #8
     814:	06128800 	ldreq	r8, [r2], -r0, lsl #16
     818:	00000b96 	muleq	r0, r6, fp
     81c:	7d06128c 	sfmvc	f1, 4, [r6, #-560]	; 0xfffffdd0
     820:	90000014 	andls	r0, r0, r4, lsl r0
     824:	18c00612 	stmiane	r0, {r1, r4, r9, sl}^
     828:	12940000 	addsne	r0, r4, #0
     82c:	00126a06 	andseq	r6, r2, r6, lsl #20
     830:	06129800 	ldreq	r9, [r2], -r0, lsl #16
     834:	00001665 	andeq	r1, r0, r5, ror #12
     838:	5306129c 	movwpl	r1, #25244	; 0x629c
     83c:	a0000016 	andge	r0, r0, r6, lsl r0
     840:	16410612 			; <UNDEFINED> instruction: 0x16410612
     844:	12a40000 	adcne	r0, r4, #0
     848:	00162f06 	andseq	r2, r6, r6, lsl #30
     84c:	0612a800 	ldreq	sl, [r2], -r0, lsl #16
     850:	00000f5a 	andeq	r0, r0, sl, asr pc
     854:	fb0612ac 	blx	18530e <.LC0+0x184c26>
     858:	b0000013 	andlt	r0, r0, r3, lsl r0
     85c:	196c0612 	stmdbne	ip!, {r1, r4, r9, sl}^
     860:	12b40000 	adcsne	r0, r4, #0
     864:	0012ab06 	andseq	sl, r2, r6, lsl #22
     868:	0612b800 	ldreq	fp, [r2], -r0, lsl #16
     86c:	0000194f 	andeq	r1, r0, pc, asr #18
     870:	3d0612bc 	sfmcc	f1, 4, [r6, #-752]	; 0xfffffd10
     874:	c0000019 	andgt	r0, r0, r9, lsl r0
     878:	19f40612 	ldmibne	r4!, {r1, r4, r9, sl}^
     87c:	12c40000 	sbcne	r0, r4, #0
     880:	00137e06 	andseq	r7, r3, r6, lsl #28
     884:	0612c800 	ldreq	ip, [r2], -r0, lsl #16
     888:	00000f4e 	andeq	r0, r0, lr, asr #30
     88c:	a80612cc 	stmdage	r6, {r2, r3, r6, r7, r9, ip}
     890:	d0000016 	andle	r0, r0, r6, lsl r0
     894:	18490612 	stmdane	r9, {r1, r4, r9, sl}^
     898:	12d40000 	sbcsne	r0, r4, #0
     89c:	001aed06 	andseq	lr, sl, r6, lsl #26
     8a0:	0612d800 	ldreq	sp, [r2], -r0, lsl #16
     8a4:	000012d3 	ldrdeq	r1, [r0], -r3
     8a8:	e40612dc 	str	r1, [r6], #-732	; 0x2dc
     8ac:	e0000012 	and	r0, r0, r2, lsl r0
     8b0:	0cfa0612 	ldcleq	6, cr0, [sl], #72	; 0x48
     8b4:	12e40000 	rscne	r0, r4, #0
     8b8:	0018df06 	andseq	sp, r8, r6, lsl #30
     8bc:	0612e800 	ldreq	lr, [r2], -r0, lsl #16
     8c0:	00000ece 	andeq	r0, r0, lr, asr #29
     8c4:	6b0612ec 	blvs	18547c <.LC0+0x184d94>
     8c8:	f0000014 			; <UNDEFINED> instruction: 0xf0000014
     8cc:	15b70612 	ldrne	r0, [r7, #1554]!	; 0x612
     8d0:	12f40000 	rscsne	r0, r4, #0
     8d4:	001a9d06 	andseq	r9, sl, r6, lsl #26
     8d8:	0612f800 	ldreq	pc, [r2], -r0, lsl #16
     8dc:	000010a1 	andeq	r1, r0, r1, lsr #1
     8e0:	7b0612fc 	blvc	1854d8 <.LC0+0x184df0>
     8e4:	80000015 	andhi	r0, r0, r5, lsl r0
     8e8:	117e0613 	cmnne	lr, r3, lsl r6
     8ec:	13840000 	orrne	r0, r4, #0
     8f0:	001b0906 	andseq	r0, fp, r6, lsl #18
     8f4:	06138800 	ldreq	r8, [r3], -r0, lsl #16
     8f8:	0000191b 	andeq	r1, r0, fp, lsl r9
     8fc:	0a06138c 	beq	185734 <.LC0+0x18504c>
     900:	9000001a 	andls	r0, r0, sl, lsl r0
     904:	12030613 	andne	r0, r3, #19922944	; 0x1300000
     908:	13940000 	orrsne	r0, r4, #0
     90c:	00187106 	andseq	r7, r8, r6, lsl #2
     910:	06139800 	ldreq	r9, [r3], -r0, lsl #16
     914:	000014cf 	andeq	r1, r0, pc, asr #9
     918:	cd06139c 	stcgt	3, cr1, [r6, #-624]	; 0xfffffd90
     91c:	a0000019 	andge	r0, r0, r9, lsl r0
     920:	11b80613 			; <UNDEFINED> instruction: 0x11b80613
     924:	13a40000 			; <UNDEFINED> instruction: 0x13a40000
     928:	00188506 	andseq	r8, r8, r6, lsl #10
     92c:	0613a800 	ldreq	sl, [r3], -r0, lsl #16
     930:	00001515 	andeq	r1, r0, r5, lsl r5
     934:	e30613ac 	movw	r1, #25516	; 0x63ac
     938:	b0000017 	andlt	r0, r0, r7, lsl r0
     93c:	17fc0613 			; <UNDEFINED> instruction: 0x17fc0613
     940:	13b40000 			; <UNDEFINED> instruction: 0x13b40000
     944:	0010b406 	andseq	fp, r0, r6, lsl #8
     948:	0613b800 	ldreq	fp, [r3], -r0, lsl #16
     94c:	00000d9b 	muleq	r0, fp, sp
     950:	d60613c0 	strle	r1, [r6], -r0, asr #7
     954:	d0000010 	andle	r0, r0, r0, lsl r0
     958:	197e0613 	ldmdbne	lr!, {r0, r1, r4, r9, sl}^
     95c:	13d40000 	bicsne	r0, r4, #0
     960:	001afd06 	andseq	pc, sl, r6, lsl #26
     964:	0613d800 	ldreq	sp, [r3], -r0, lsl #16
     968:	000018d3 	ldrdeq	r1, [r0], -r3
     96c:	a30613dc 	movwge	r1, #25564	; 0x63dc
     970:	e0000013 	and	r0, r0, r3, lsl r0
     974:	0f7f0613 	svceq	0x007f0613
     978:	13e40000 	mvnne	r0, #0
     97c:	000f8c06 	andeq	r8, pc, r6, lsl #24
     980:	0613e800 	ldreq	lr, [r3], -r0, lsl #16
     984:	00001233 	andeq	r1, r0, r3, lsr r2
     988:	8b0613f8 	blhi	185970 <.LC0+0x185288>
     98c:	fc000010 	stc2	0, cr0, [r0], {16}
     990:	12570613 	subsne	r0, r7, #19922944	; 0x1300000
     994:	14800000 	strne	r0, [r0], #0
     998:	000fbf06 	andeq	fp, pc, r6, lsl #30
     99c:	06148400 	ldreq	r8, [r4], -r0, lsl #8
     9a0:	00001707 	andeq	r1, r0, r7, lsl #14
     9a4:	0506149c 	streq	r1, [r6, #-1180]	; 0x49c
     9a8:	b4000016 	strlt	r0, [r0], #-22
     9ac:	14530614 	ldrbne	r0, [r3], #-1556	; 0x614
     9b0:	1c800000 	stcne	0, cr0, [r0], {0}
     9b4:	0011ef06 	andseq	lr, r1, r6, lsl #30
     9b8:	061c8400 	ldreq	r8, [ip], -r0, lsl #8
     9bc:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
     9c0:	89061c8c 	stmdbhi	r6, {r2, r3, r7, sl, fp, ip}
     9c4:	94000016 	strls	r0, [r0], #-22
     9c8:	0ce1061c 	stcleq	6, cr0, [r1], #112	; 0x70
     9cc:	1f900000 	svcne	0x00900000
     9d0:	00181506 	andseq	r1, r8, r6, lsl #10
     9d4:	061f9400 	ldreq	r9, [pc], -r0, lsl #8
     9d8:	00001190 	muleq	r0, r0, r1
     9dc:	38061f98 	stmdacc	r6, {r3, r4, r7, r8, r9, sl, fp, ip}
     9e0:	9c000014 	stcls	0, cr0, [r0], {20}
     9e4:	0dc3061f 	stcleq	6, cr0, [r3, #124]	; 0x7c
     9e8:	1fa00000 	svcne	0x00a00000
     9ec:	000ba706 	andeq	sl, fp, r6, lsl #14
     9f0:	061fa400 	ldreq	sl, [pc], -r0, lsl #8
     9f4:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
     9f8:	d5061fa8 	strle	r1, [r6, #-4008]	; 0xfa8
     9fc:	ac00000f 	stcge	0, cr0, [r0], {15}
     a00:	141d061f 	ldrne	r0, [sp], #-1567	; 0x61f
     a04:	1fb00000 	svcne	0x00b00000
     a08:	000da806 	andeq	sl, sp, r6, lsl #16
     a0c:	061fb400 	ldreq	fp, [pc], -r0, lsl #8
     a10:	000013cc 	andeq	r1, r0, ip, asr #7
     a14:	1a061fb8 	bne	1888fc <.LC0+0x188214>
     a18:	bc00001b 	stclt	0, cr0, [r0], {27}
     a1c:	182e061f 	stmdane	lr!, {r0, r1, r2, r3, r4, r9, sl}
     a20:	1fc00000 	svcne	0x00c00000
     a24:	0013b106 	andseq	fp, r3, r6, lsl #2
     a28:	061fc400 	ldreq	ip, [pc], -r0, lsl #8
     a2c:	000015c9 	andeq	r1, r0, r9, asr #11
     a30:	8a061fc8 	bhi	188958 <.LC0+0x188270>
     a34:	cc000019 	stcgt	0, cr0, [r0], {25}
     a38:	0dea061f 	stcleq	6, cr0, [sl, #124]!	; 0x7c
     a3c:	1fd00000 	svcne	0x00d00000
     a40:	00135506 	andseq	r5, r3, r6, lsl #10
     a44:	061fd400 	ldreq	sp, [pc], -r0, lsl #8
     a48:	000010f3 	strdeq	r1, [r0], -r3
     a4c:	01061fd8 	ldrdeq	r1, [r6, -r8]
     a50:	8000000e 	andhi	r0, r0, lr
     a54:	17ca0620 	strbne	r0, [sl, r0, lsr #12]
     a58:	26980000 	ldrcs	r0, [r8], r0
     a5c:	00152b06 	andseq	r2, r5, r6, lsl #22
     a60:	06269c00 	strteq	r9, [r6], -r0, lsl #24
     a64:	0000169b 	muleq	r0, fp, r6
     a68:	180626a0 	stmdane	r6, {r5, r7, r9, sl, sp}
     a6c:	a4000013 	strge	r0, [r0], #-19
     a70:	16ba0626 	ldrtne	r0, [sl], r6, lsr #12
     a74:	26a80000 	strtcs	r0, [r8], r0
     a78:	00156606 	andseq	r6, r5, r6, lsl #12
     a7c:	0626ac00 	strteq	sl, [r6], -r0, lsl #24
     a80:	000016db 	ldrdeq	r1, [r0], -fp
     a84:	8d0626b0 	stchi	6, cr2, [r6, #-704]	; 0xfffffd40
     a88:	b4000015 	strlt	r0, [r0], #-21
     a8c:	15a20626 	strne	r0, [r2, #1574]!	; 0x626
     a90:	26b80000 	ldrtcs	r0, [r8], r0
     a94:	00171c06 	andseq	r1, r7, r6, lsl #24
     a98:	0626bc00 	strteq	fp, [r6], -r0, lsl #24
     a9c:	00001731 	andeq	r1, r0, r1, lsr r7
     aa0:	100626c0 	andne	r2, r6, r0, asr #13
     aa4:	c400000f 	strgt	r0, [r0], #-15
     aa8:	18590626 	ldmdane	r9, {r1, r2, r5, r9, sl}^
     aac:	28840000 	stmcs	r4, {}	; <UNPREDICTABLE>
     ab0:	00138b06 	andseq	r8, r3, r6, lsl #22
     ab4:	06288800 	strteq	r8, [r8], -r0, lsl #16
     ab8:	0000127d 	andeq	r1, r0, sp, ror r2
     abc:	3c06288c 	stccc	8, cr2, [r6], {140}	; 0x8c
     ac0:	c0000011 	andgt	r0, r0, r1, lsl r0
     ac4:	0ee10628 	cdpeq	6, 14, cr0, cr1, cr8, {1}
     ac8:	28c40000 	stmiacs	r4, {}^	; <UNPREDICTABLE>
     acc:	0f990200 	svceq	0x00990200
     ad0:	e3030000 	movw	r0, #12288	; 0x3000
     ad4:	0000005a 	andeq	r0, r0, sl, asr r0
     ad8:	0bd00107 	bleq	ff400efc <.LC0+0xff400814>
     adc:	03010000 	movweq	r0, #4096	; 0x1000
     ae0:	0001ac01 	andeq	sl, r1, r1, lsl #24
     ae4:	0001e000 	andeq	lr, r1, r0
     ae8:	00008400 	andeq	r8, r0, r0, lsl #8
     aec:	06910100 	ldreq	r0, [r1], r0, lsl #2
     af0:	60080000 	andvs	r0, r8, r0
     af4:	01000017 	tsteq	r0, r7, lsl r0
     af8:	00064f03 	andeq	r4, r6, r3, lsl #30
     afc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b00:	00017608 	andeq	r7, r1, r8, lsl #12
     b04:	30030100 	andcc	r0, r3, r0, lsl #2
     b08:	02000000 	andeq	r0, r0, #0
     b0c:	09007091 	stmdbeq	r0, {r0, r4, r7, ip, sp, lr}
     b10:	0010e201 	andseq	lr, r0, r1, lsl #4
     b14:	01090100 	mrseq	r0, (UNDEF: 25)
     b18:	00000030 	andeq	r0, r0, r0, lsr r0
     b1c:	000001e0 	andeq	r0, r0, r0, ror #3
     b20:	00000210 	andeq	r0, r0, r0, lsl r2
     b24:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     b28:	0006be01 	andeq	fp, r6, r1, lsl #28
     b2c:	17600800 	strbne	r0, [r0, -r0, lsl #16]!
     b30:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     b34:	0000064f 	andeq	r0, r0, pc, asr #12
     b38:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b3c:	0e13010a 	mufeqs	f0, f3, #2.0
     b40:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     b44:	00021001 	andeq	r1, r2, r1
     b48:	00026000 	andeq	r6, r2, r0
     b4c:	0000dc00 	andeq	sp, r0, r0, lsl #24
     b50:	07030100 	streq	r0, [r3, -r0, lsl #2]
     b54:	60080000 	andvs	r0, r8, r0
     b58:	01000017 	tsteq	r0, r7, lsl r0
     b5c:	00064f0e 	andeq	r4, r6, lr, lsl #30
     b60:	6c910200 	lfmvs	f0, 4, [r1], {0}
     b64:	00176708 	andseq	r6, r7, r8, lsl #14
     b68:	300e0100 	andcc	r0, lr, r0, lsl #2
     b6c:	02000000 	andeq	r0, r0, #0
     b70:	100b6891 	mulne	fp, r1, r8
     b74:	01000001 	tsteq	r0, r1
     b78:	00003010 	andeq	r3, r0, r0, lsl r0
     b7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b80:	14010c00 	strne	r0, [r1], #-3072	; 0xc00
     b84:	0100000d 	tsteq	r0, sp
     b88:	0002601d 	andeq	r6, r2, sp, lsl r0
     b8c:	00028400 	andeq	r8, r2, r0, lsl #8
     b90:	00010800 	andeq	r0, r1, r0, lsl #16
     b94:	db000100 	blle	f9c <.LC0+0x8b4>
     b98:	02000000 	andeq	r0, r0, #0
     b9c:	00019700 	andeq	r9, r1, r0, lsl #14
     ba0:	63010400 	movwvs	r0, #5120	; 0x1400
     ba4:	01000006 	tsteq	r0, r6
     ba8:	00001b3b 	andeq	r1, r0, fp, lsr fp
     bac:	00000306 	andeq	r0, r0, r6, lsl #6
     bb0:	00000284 	andeq	r0, r0, r4, lsl #5
     bb4:	00000318 	andeq	r0, r0, r8, lsl r3
     bb8:	000000cc 	andeq	r0, r0, ip, asr #1
     bbc:	00062f02 	andeq	r2, r6, r2, lsl #30
     bc0:	30040300 	andcc	r0, r4, r0, lsl #6
     bc4:	03000000 	movweq	r0, #0
     bc8:	06b40704 	ldrteq	r0, [r4], r4, lsl #14
     bcc:	02030000 	andeq	r0, r3, #0
     bd0:	0006ae07 	andeq	sl, r6, r7, lsl #28
     bd4:	08010300 	stmdaeq	r1, {r8, r9}
     bd8:	000005c5 	andeq	r0, r0, r5, asr #11
     bdc:	69050404 	stmdbvs	r5, {r2, sl}
     be0:	0300746e 	movweq	r7, #1134	; 0x46e
     be4:	01150502 	tsteq	r5, r2, lsl #10
     be8:	01030000 	mrseq	r0, (UNDEF: 3)
     bec:	0005ce08 	andeq	ip, r5, r8, lsl #28
     bf0:	02040500 	andeq	r0, r4, #0, 10
     bf4:	00006f0a 	andeq	r6, r0, sl, lsl #30
     bf8:	1b4e0600 	blne	1382400 <.LC0+0x1381d18>
     bfc:	06000000 	streq	r0, [r0], -r0
     c00:	00001b63 	andeq	r1, r0, r3, ror #22
     c04:	04050001 	streq	r0, [r5], #-1
     c08:	008a1302 	addeq	r1, sl, r2, lsl #6
     c0c:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     c10:	0000001b 	andeq	r0, r0, fp, lsl r0
     c14:	001b4206 	andseq	r4, fp, r6, lsl #4
     c18:	6b060100 	blvs	181020 <.LC0+0x180938>
     c1c:	0200001b 	andeq	r0, r0, #27
     c20:	02040500 	andeq	r0, r4, #0, 10
     c24:	0000a520 	andeq	sl, r0, r0, lsr #10
     c28:	1b570600 	blne	15c2430 <.LC0+0x15c1d48>
     c2c:	06000000 	streq	r0, [r0], -r0
     c30:	00001b76 	andeq	r1, r0, r6, ror fp
     c34:	1b5d0601 	blne	1742440 <.LC0+0x1741d58>
     c38:	00020000 	andeq	r0, r2, r0
     c3c:	1b350107 	blne	d41060 <.LC0+0xd40978>
     c40:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     c44:	00028401 	andeq	r8, r2, r1, lsl #8
     c48:	00031800 	andeq	r1, r3, r0, lsl #16
     c4c:	00013400 	andeq	r3, r1, r0, lsl #8
     c50:	00d90100 	sbcseq	r0, r9, r0, lsl #2
     c54:	72080000 	andvc	r0, r8, #0
     c58:	12010061 	andne	r0, r1, #97	; 0x61
     c5c:	000000d9 	ldrdeq	r0, [r0], -r9
     c60:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
     c64:	13010061 	movwne	r0, #4193	; 0x1061
     c68:	00000053 	andeq	r0, r0, r3, asr r0
     c6c:	00739102 	rsbseq	r9, r3, r2, lsl #2
     c70:	00003009 	andeq	r3, r0, r9
     c74:	06e80000 	strbteq	r0, [r8], r0
     c78:	00020000 	andeq	r0, r2, r0
     c7c:	00000214 	andeq	r0, r0, r4, lsl r2
     c80:	06630104 	strbteq	r0, [r3], -r4, lsl #2
     c84:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
     c88:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
     c8c:	18000003 	stmdane	r0, {r0, r1}
     c90:	e4000003 	str	r0, [r0], #-3
     c94:	2f000006 	svccs	0x00000006
     c98:	02000001 	andeq	r0, r0, #1
     c9c:	0000062f 	andeq	r0, r0, pc, lsr #12
     ca0:	00300402 	eorseq	r0, r0, r2, lsl #8
     ca4:	04030000 	streq	r0, [r3], #-0
     ca8:	0006b407 	andeq	fp, r6, r7, lsl #8
     cac:	07020300 	streq	r0, [r2, -r0, lsl #6]
     cb0:	000006ae 	andeq	r0, r0, lr, lsr #13
     cb4:	001c2c02 	andseq	r2, ip, r2, lsl #24
     cb8:	49060200 	stmdbmi	r6, {r9}
     cbc:	03000000 	movweq	r0, #0
     cc0:	05c50801 	strbeq	r0, [r5, #2049]	; 0x801
     cc4:	04040000 	streq	r0, [r4], #-0
     cc8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     ccc:	05020300 	streq	r0, [r2, #-768]	; 0x300
     cd0:	00000115 	andeq	r0, r0, r5, lsl r1
     cd4:	ce080103 	adfgte	f0, f0, f3
     cd8:	05000005 	streq	r0, [r0, #-5]
     cdc:	67120304 	ldrvs	r0, [r2, -r4, lsl #6]
     ce0:	06000001 	streq	r0, [r0], -r1
     ce4:	00524852 	subseq	r4, r2, r2, asr r8
     ce8:	48540600 	ldmdami	r4, {r9, sl}^
     cec:	06000052 			; <UNDEFINED> instruction: 0x06000052
     cf0:	00524549 	subseq	r4, r2, r9, asr #10
     cf4:	49490604 	stmdbmi	r9, {r2, r9, sl}^
     cf8:	06080052 			; <UNDEFINED> instruction: 0x06080052
     cfc:	00524346 	subseq	r4, r2, r6, asr #6
     d00:	434c0608 	movtmi	r0, #50696	; 0xc608
     d04:	060c0052 			; <UNDEFINED> instruction: 0x060c0052
     d08:	0052434d 	subseq	r4, r2, sp, asr #6
     d0c:	534c0610 	movtpl	r0, #50704	; 0xc610
     d10:	06140052 			; <UNDEFINED> instruction: 0x06140052
     d14:	0052534d 	subseq	r5, r2, sp, asr #6
     d18:	43540618 	cmpmi	r4, #24, 12	; 0x1800000
     d1c:	06180052 			; <UNDEFINED> instruction: 0x06180052
     d20:	00525053 	subseq	r5, r2, r3, asr r0
     d24:	4c54061c 	mrrcmi	6, 1, r0, r4, cr12
     d28:	071c0052 			; <UNDEFINED> instruction: 0x071c0052
     d2c:	00001c1d 	andeq	r1, r0, sp, lsl ip
     d30:	1c220720 	stcne	7, cr0, [r2], #-128	; 0xffffff80
     d34:	07240000 	streq	r0, [r4, -r0]!
     d38:	00001ba9 	andeq	r1, r0, r9, lsr #23
     d3c:	1c060728 	stcne	7, cr0, [r6], {40}	; 0x28
     d40:	07280000 	streq	r0, [r8, -r0]!
     d44:	00001ca2 	andeq	r1, r0, r2, lsr #25
     d48:	1c00072c 	stcne	7, cr0, [r0], {44}	; 0x2c
     d4c:	072c0000 	streq	r0, [ip, -r0]!
     d50:	00001c9b 	muleq	r0, fp, ip
     d54:	1cd70730 	ldclne	7, cr0, [r7], {48}	; 0x30
     d58:	07300000 	ldreq	r0, [r0, -r0]!
     d5c:	00001c94 	muleq	r0, r4, ip
     d60:	1cd10734 	ldclne	7, cr0, [r1], {52}	; 0x34
     d64:	06340000 	ldrteq	r0, [r4], -r0
     d68:	00524c42 	subseq	r4, r2, r2, asr #24
     d6c:	1ba30738 	blne	fe8c2a54 <.LC0+0xfe8c236c>
     d70:	063c0000 	ldrteq	r0, [ip], -r0
     d74:	00524353 	subseq	r4, r2, r3, asr r3
     d78:	530600c0 	movwpl	r0, #24768	; 0x60c0
     d7c:	c4005253 	strgt	r5, [r0], #-595	; 0x253
     d80:	1c480700 	mcrrne	7, 0, r0, r8, cr0
     d84:	00c80000 	sbceq	r0, r8, r0
     d88:	52564d06 	subspl	r4, r6, #384	; 0x180
     d8c:	0700d000 	streq	sp, [r0, -r0]
     d90:	00001bfb 	strdeq	r1, [r0], -fp
     d94:	0c0700d4 	stceq	0, cr0, [r7], {212}	; 0xd4
     d98:	d800001c 	stmdale	r0, {r2, r3, r4}
     d9c:	45570600 	ldrbmi	r0, [r7, #-1536]	; 0x600
     da0:	00dc0052 	sbcseq	r0, ip, r2, asr r0
     da4:	001c1807 	andseq	r1, ip, r7, lsl #16
     da8:	0700e000 	streq	lr, [r0, -r0]
     dac:	00001c4d 	andeq	r1, r0, sp, asr #24
     db0:	980700e4 	stmdals	r7, {r2, r5, r6, r7}
     db4:	e800001b 	stmda	r0, {r0, r1, r3, r4}
     db8:	1c340700 	ldcne	7, cr0, [r4], #-0
     dbc:	00ec0000 	rsceq	r0, ip, r0
     dc0:	001b8a07 	andseq	r8, fp, r7, lsl #20
     dc4:	0700f000 	streq	pc, [r0, -r0]
     dc8:	00001c3f 	andeq	r1, r0, pc, lsr ip
     dcc:	270700f4 			; <UNDEFINED> instruction: 0x270700f4
     dd0:	8000001c 	andhi	r0, r0, ip, lsl r0
     dd4:	1c390701 	ldcne	7, cr0, [r9], #-4
     dd8:	01840000 	orreq	r0, r4, r0
     ddc:	04040500 	streq	r0, [r4], #-1280	; 0x500
     de0:	00017c0a 	andeq	r7, r1, sl, lsl #24
     de4:	1b4e0700 	blne	13829ec <.LC0+0x1382304>
     de8:	07000000 	streq	r0, [r0, -r0]
     dec:	00001b63 	andeq	r1, r0, r3, ror #22
     df0:	b5020001 	strlt	r0, [r2, #-1]
     df4:	0400001c 	streq	r0, [r0], #-28
     df8:	0001670d 	andeq	r6, r1, sp, lsl #14
     dfc:	04040500 	streq	r0, [r4], #-1280	; 0x500
     e00:	0001a213 	andeq	sl, r1, r3, lsl r2
     e04:	1b7e0700 	blne	1f82a0c <.LC0+0x1f82324>
     e08:	07000000 	streq	r0, [r0, -r0]
     e0c:	00001b42 	andeq	r1, r0, r2, asr #22
     e10:	1b6b0701 	blne	1ac2a1c <.LC0+0x1ac2334>
     e14:	00020000 	andeq	r0, r2, r0
     e18:	001cc402 	andseq	ip, ip, r2, lsl #8
     e1c:	87170400 	ldrhi	r0, [r7, -r0, lsl #8]
     e20:	05000001 	streq	r0, [r0, #-1]
     e24:	c8200404 	stmdagt	r0!, {r2, sl}
     e28:	07000001 	streq	r0, [r0, -r1]
     e2c:	00001b57 	andeq	r1, r0, r7, asr fp
     e30:	1b760700 	blne	1d82a38 <.LC0+0x1d82350>
     e34:	07010000 	streq	r0, [r1, -r0]
     e38:	00001b5d 	andeq	r1, r0, sp, asr fp
     e3c:	78020002 	stmdavc	r2, {r1}
     e40:	0400001c 	streq	r0, [r0], #-28
     e44:	0001ad24 	andeq	sl, r1, r4, lsr #26
     e48:	05040500 	streq	r0, [r4, #-1280]	; 0x500
     e4c:	00022c0b 	andeq	r2, r2, fp, lsl #24
     e50:	058f0700 	streq	r0, [pc, #1792]	; 1558 <.LC0+0xe70>
     e54:	80800000 	addhi	r0, r0, r0
     e58:	0704a780 	streq	sl, [r4, -r0, lsl #15]
     e5c:	00000613 	andeq	r0, r0, r3, lsl r6
     e60:	a7808880 	strge	r8, [r0, r0, lsl #17]
     e64:	07110704 	ldreq	r0, [r1, -r4, lsl #14]
     e68:	8a800000 	bhi	fe000e70 <.LC0+0xfe000788>
     e6c:	0704a780 	streq	sl, [r4, -r0, lsl #15]
     e70:	00000823 	andeq	r0, r0, r3, lsr #16
     e74:	a7808c80 	strge	r8, [r0, r0, lsl #25]
     e78:	08190704 	ldmdaeq	r9, {r2, r8, r9, sl}
     e7c:	8e800000 	cdphi	0, 8, cr0, cr0, cr0, {0}
     e80:	0704a780 	streq	sl, [r4, -r0, lsl #15]
     e84:	000001e7 	andeq	r0, r0, r7, ror #3
     e88:	a7809080 	strge	r9, [r0, r0, lsl #1]
     e8c:	08870704 	stmeq	r7, {r2, r8, r9, sl}
     e90:	92800000 	addls	r0, r0, #0
     e94:	0704a780 	streq	sl, [r4, -r0, lsl #15]
     e98:	000005eb 	andeq	r0, r0, fp, ror #11
     e9c:	a7809480 	strge	r9, [r0, r0, lsl #9]
     ea0:	04050004 	streq	r0, [r5], #-4
     ea4:	053c1c05 	ldreq	r1, [ip, #-3077]!	; 0xc05
     ea8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     eac:	00000007 	andeq	r0, r0, r7
     eb0:	00053507 	andeq	r3, r5, r7, lsl #10
     eb4:	94070400 	strls	r0, [r7], #-1024	; 0x400
     eb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ebc:	00000007 	andeq	r0, r0, r7
     ec0:	48070c00 	stmdami	r7, {sl, fp}
     ec4:	14000004 	strne	r0, [r0], #-4
     ec8:	0007dd07 	andeq	sp, r7, r7, lsl #26
     ecc:	b1071800 	tstlt	r7, r0, lsl #16
     ed0:	1c000005 	stcne	0, cr0, [r0], {5}
     ed4:	00007f07 	andeq	r7, r0, r7, lsl #30
     ed8:	d6072400 	strle	r2, [r7], -r0, lsl #8
     edc:	28000006 	stmdacs	r0, {r1, r2}
     ee0:	0007c607 	andeq	ip, r7, r7, lsl #12
     ee4:	66072c00 	strvs	r2, [r7], -r0, lsl #24
     ee8:	30000009 	andcc	r0, r0, r9
     eec:	00001407 	andeq	r1, r0, r7, lsl #8
     ef0:	df073400 	svcle	0x00073400
     ef4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     ef8:	0001ee07 	andeq	lr, r1, r7, lsl #28
     efc:	ea073c00 	b	1cff04 <.LC0+0x1cf81c>
     f00:	c0000006 	andgt	r0, r0, r6
     f04:	029b0700 	addseq	r0, fp, #0, 14
     f08:	00c40000 	sbceq	r0, r4, r0
     f0c:	00021607 	andeq	r1, r2, r7, lsl #12
     f10:	0700c800 	streq	ip, [r0, -r0, lsl #16]
     f14:	0000002a 	andeq	r0, r0, sl, lsr #32
     f18:	ca0700cc 	bgt	1c1250 <.LC0+0x1c0b68>
     f1c:	d0000003 	andle	r0, r0, r3
     f20:	05210700 	streq	r0, [r1, #-1792]!	; 0x700
     f24:	00e00000 	rsceq	r0, r0, r0
     f28:	0001d307 	andeq	sp, r1, r7, lsl #6
     f2c:	0700e400 	streq	lr, [r0, -r0, lsl #8]
     f30:	00000069 	andeq	r0, r0, r9, rrx
     f34:	db0700e8 	blle	1c12dc <.LC0+0x1c0bf4>
     f38:	ec000009 	stc	0, cr0, [r0], {9}
     f3c:	0a840700 	beq	fe102b44 <.LC0+0xfe10245c>
     f40:	00f00000 	rscseq	r0, r0, r0
     f44:	0002af07 	andeq	sl, r2, r7, lsl #30
     f48:	0700f400 	streq	pc, [r0, -r0, lsl #8]
     f4c:	00000054 	andeq	r0, r0, r4, asr r0
     f50:	7b0700f8 	blvc	1c1338 <.LC0+0x1c0c50>
     f54:	fc000004 	stc2	0, cr0, [r0], {4}
     f58:	02560700 	subseq	r0, r6, #0, 14
     f5c:	01800000 	orreq	r0, r0, r0
     f60:	0002c407 	andeq	ip, r2, r7, lsl #8
     f64:	07018400 	streq	r8, [r1, -r0, lsl #8]
     f68:	00000371 	andeq	r0, r0, r1, ror r3
     f6c:	83070188 	movwhi	r0, #29064	; 0x7188
     f70:	ac000006 	stcge	0, cr0, [r0], {6}
     f74:	06c10701 	strbeq	r0, [r1], r1, lsl #14
     f78:	01b00000 	movseq	r0, r0
     f7c:	00071907 	andeq	r1, r7, r7, lsl #18
     f80:	0701b400 	streq	fp, [r1, -r0, lsl #8]
     f84:	000008a7 	andeq	r0, r0, r7, lsr #17
     f88:	be0701bc 	mcrlt	1, 0, r0, cr7, cr12, {5}
     f8c:	c0000001 	andgt	r0, r0, r1
     f90:	03f00701 	mvnseq	r0, #262144	; 0x40000
     f94:	01c40000 	biceq	r0, r4, r0
     f98:	000a5507 	andeq	r5, sl, r7, lsl #10
     f9c:	0701cc00 	streq	ip, [r1, -r0, lsl #24]
     fa0:	000008f8 	strdeq	r0, [r0], -r8
     fa4:	050701d0 	streq	r0, [r7, #-464]	; 0x1d0
     fa8:	d4000004 	strle	r0, [r0], #-4
     fac:	04de0701 	ldrbeq	r0, [lr], #1793	; 0x701
     fb0:	01d80000 	bicseq	r0, r8, r0
     fb4:	000a6c07 	andeq	r6, sl, r7, lsl #24
     fb8:	0701dc00 	streq	sp, [r1, -r0, lsl #24]
     fbc:	000003de 	ldrdeq	r0, [r0], -lr
     fc0:	3e0701e0 	adfccdz	f0, f7, f0
     fc4:	e4000002 	str	r0, [r0], #-2
     fc8:	064b0701 	strbeq	r0, [fp], -r1, lsl #14
     fcc:	01e80000 	mvneq	r0, r0
     fd0:	0003b407 	andeq	fp, r3, r7, lsl #8
     fd4:	0701ec00 	streq	lr, [r1, -r0, lsl #24]
     fd8:	0000041c 	andeq	r0, r0, ip, lsl r4
     fdc:	6c0701f0 	stfvss	f0, [r7], {240}	; 0xf0
     fe0:	f4000002 	vst4.8	{d0-d3}, [r0], r2
     fe4:	02da0701 	sbcseq	r0, sl, #262144	; 0x40000
     fe8:	01f80000 	mvnseq	r0, r0
     fec:	00074407 	andeq	r4, r7, r7, lsl #8
     ff0:	0701fc00 	streq	pc, [r1, -r0, lsl #24]
     ff4:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
     ff8:	ee070280 	cdp	2, 0, cr0, cr7, cr0, {4}
     ffc:	8c000002 	stchi	0, cr0, [r0], {2}
    1000:	05d30702 	ldrbeq	r0, [r3, #1794]	; 0x702
    1004:	02900000 	addseq	r0, r0, #0
    1008:	00003e07 	andeq	r3, r0, r7, lsl #28
    100c:	07029c00 	streq	r9, [r2, -r0, lsl #24]
    1010:	000008cf 	andeq	r0, r0, pc, asr #17
    1014:	7a0702a0 	bvc	1c1a9c <.LC0+0x1c13b4>
    1018:	ac000009 	stcge	0, cr0, [r0], {9}
    101c:	04ac0702 	strteq	r0, [ip], #1794	; 0x702
    1020:	02b00000 	adcseq	r0, r0, #0
    1024:	0009c107 	andeq	ip, r9, r7, lsl #2
    1028:	0702c000 	streq	ip, [r2, -r0]
    102c:	0000082a 	andeq	r0, r0, sl, lsr #16
    1030:	ab0702c4 	blge	1c1b48 <.LC0+0x1c1460>
    1034:	c8000009 	stmdagt	r0, {r0, r3}
    1038:	017c0702 	cmneq	ip, r2, lsl #14
    103c:	02cc0000 	sbceq	r0, ip, #0
    1040:	00059607 	andeq	r9, r5, r7, lsl #12
    1044:	0702d000 	streq	sp, [r2, -r0]
    1048:	0000092a 	andeq	r0, r0, sl, lsr #18
    104c:	03870700 	orreq	r0, r7, #0, 14
    1050:	07040000 	streq	r0, [r4, -r0]
    1054:	00000432 	andeq	r0, r0, r2, lsr r4
    1058:	0a990708 	beq	fe642c80 <.LC0+0xfe642598>
    105c:	070c0000 	streq	r0, [ip, -r0]
    1060:	0000094f 	andeq	r0, r0, pc, asr #18
    1064:	085b0710 	ldmdaeq	fp, {r4, r8, r9, sl}^
    1068:	07140000 	ldreq	r0, [r4, -r0]
    106c:	0000076e 	andeq	r0, r0, lr, ror #14
    1070:	08e30718 	stmiaeq	r3!, {r3, r4, r8, r9, sl}^
    1074:	071c0000 	ldreq	r0, [ip, -r0]
    1078:	000007f1 	strdeq	r0, [r0], -r1
    107c:	04910720 	ldreq	r0, [r1], #1824	; 0x720
    1080:	07240000 	streq	r0, [r4, -r0]!
    1084:	00000280 	andeq	r0, r0, r0, lsl #5
    1088:	090f0728 	stmdbeq	pc, {r3, r5, r8, r9, sl}	; <UNPREDICTABLE>
    108c:	072c0000 	streq	r0, [ip, -r0]!
    1090:	00000759 	andeq	r0, r0, r9, asr r7
    1094:	011f0730 	tsteq	pc, r0, lsr r7	; <UNPREDICTABLE>
    1098:	07340000 	ldreq	r0, [r4, -r0]!
    109c:	00000840 	andeq	r0, r0, r0, asr #16
    10a0:	00aa0738 	adceq	r0, sl, r8, lsr r7
    10a4:	073c0000 	ldreq	r0, [ip, -r0]!
    10a8:	00000782 	andeq	r0, r0, r2, lsl #15
    10ac:	f00700c0 			; <UNDEFINED> instruction: 0xf00700c0
    10b0:	c4000009 	strgt	r0, [r0], #-9
    10b4:	08730700 	ldmdaeq	r3!, {r8, r9, sl}^
    10b8:	00c80000 	sbceq	r0, r8, r0
    10bc:	0000f407 	andeq	pc, r0, r7, lsl #8
    10c0:	0700cc00 	streq	ip, [r0, -r0, lsl #24]
    10c4:	00000a39 	andeq	r0, r0, r9, lsr sl
    10c8:	7b0700d0 	blvc	1c1410 <.LC0+0x1c0d28>
    10cc:	d4000005 	strle	r0, [r0], #-5
    10d0:	01950700 	orrseq	r0, r5, r0, lsl #14
    10d4:	00d80000 	sbcseq	r0, r8, r0
    10d8:	00061b07 	andeq	r1, r6, r7, lsl #22
    10dc:	0700dc00 	streq	sp, [r0, -r0, lsl #24]
    10e0:	0000045f 	andeq	r0, r0, pc, asr r4
    10e4:	950700e0 	strls	r0, [r7, #-224]	; 0xe0
    10e8:	e4000007 	str	r0, [r0], #-7
    10ec:	02020700 	andeq	r0, r2, #0, 14
    10f0:	00e80000 	rsceq	r0, r8, r0
    10f4:	00013207 	andeq	r3, r1, r7, lsl #4
    10f8:	0700ec00 	streq	lr, [r0, -r0, lsl #24]
    10fc:	00000638 	andeq	r0, r0, r8, lsr r6
    1100:	5b0700f0 	blpl	1c14c8 <.LC0+0x1c0de0>
    1104:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    1108:	0a060700 	beq	182d10 <.LC0+0x182628>
    110c:	00f80000 	rscseq	r0, r8, r0
    1110:	00069807 	andeq	r9, r6, r7, lsl #16
    1114:	0700fc00 	streq	pc, [r0, -r0, lsl #24]
    1118:	0000022a 	andeq	r0, r0, sl, lsr #4
    111c:	47070180 	strmi	r0, [r7, -r0, lsl #3]
    1120:	84000001 	strhi	r0, [r0], #-1
    1124:	06fd0701 	ldrbteq	r0, [sp], r1, lsl #14
    1128:	01880000 	orreq	r0, r8, r0
    112c:	00066f07 	andeq	r6, r6, r7, lsl #30
    1130:	07018c00 	streq	r8, [r1, -r0, lsl #24]
    1134:	00000352 	andeq	r0, r0, r2, asr r3
    1138:	4a070190 	bmi	1c1780 <.LC0+0x1c1098>
    113c:	94000005 	strls	r0, [r0], #-5
    1140:	08040701 	stmdaeq	r4, {r0, r8, r9, sl}
    1144:	01980000 	orrseq	r0, r8, r0
    1148:	00050b07 	andeq	r0, r5, r7, lsl #22
    114c:	07019c00 	streq	r9, [r1, -r0, lsl #24]
    1150:	00000ad2 	ldrdeq	r0, [r0], -r2
    1154:	bb0701a0 	bllt	1c17dc <.LC0+0x1c10f4>
    1158:	a4000008 	strge	r0, [r0], #-8
    115c:	01ab0701 			; <UNDEFINED> instruction: 0x01ab0701
    1160:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    1164:	00093c07 	andeq	r3, r9, r7, lsl #24
    1168:	0701ac00 	streq	sl, [r1, -r0, lsl #24]
    116c:	0000033a 	andeq	r0, r0, sl, lsr r3
    1170:	f50701b0 			; <UNDEFINED> instruction: 0xf50701b0
    1174:	b4000004 	strlt	r0, [r0], #-4
    1178:	0abd0701 	beq	fef42d84 <.LC0+0xfef4269c>
    117c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1180:	000a2107 	andeq	r2, sl, r7, lsl #2
    1184:	0701bc00 	streq	fp, [r1, -r0, lsl #24]
    1188:	000004c1 	andeq	r0, r0, r1, asr #9
    118c:	940701c0 	strls	r0, [r7], #-448	; 0x1c0
    1190:	c4000009 	strgt	r0, [r0], #-9
    1194:	055e0701 	ldrbeq	r0, [lr, #-1793]	; 0x701
    1198:	01c80000 	biceq	r0, r8, r0
    119c:	00088e07 	andeq	r8, r8, r7, lsl #28
    11a0:	0701cc00 	streq	ip, [r1, -r0, lsl #24]
    11a4:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    11a8:	ff0701d4 			; <UNDEFINED> instruction: 0xff0701d4
    11ac:	d8000005 	stmdale	r0, {r0, r2}
    11b0:	01080001 	tsteq	r8, r1
    11b4:	00001baf 	andeq	r1, r0, pc, lsr #23
    11b8:	03180601 	tsteq	r8, #1048576	; 0x100000
    11bc:	03700000 	cmneq	r0, #0
    11c0:	01600000 	cmneq	r0, r0
    11c4:	64010000 	strvs	r0, [r1], #-0
    11c8:	09000005 	stmdbeq	r0, {r0, r2}
    11cc:	00001bd2 	ldrdeq	r1, [r0], -r2
    11d0:	00300801 	eorseq	r0, r0, r1, lsl #16
    11d4:	91020000 	mrsls	r0, (UNDEF: 2)
    11d8:	010a0074 	tsteq	sl, r4, ror r0
    11dc:	00001be0 	andeq	r1, r0, r0, ror #23
    11e0:	70010f01 	andvc	r0, r1, r1, lsl #30
    11e4:	40000003 	andmi	r0, r0, r3
    11e8:	8c000005 	stchi	0, cr0, [r0], {5}
    11ec:	01000001 	tsteq	r0, r1
    11f0:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    11f4:	001b8f0b 	andseq	r8, fp, fp, lsl #30
    11f8:	300f0100 	andcc	r0, pc, r0, lsl #2
    11fc:	02000000 	andeq	r0, r0, #0
    1200:	10096491 	mulne	r9, r1, r4
    1204:	01000001 	tsteq	r0, r1
    1208:	00003011 	andeq	r3, r0, r1, lsl r0
    120c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1210:	7669640c 	strbtvc	r6, [r9], -ip, lsl #8
    1214:	b71b0100 	ldrlt	r0, [fp, -r0, lsl #2]
    1218:	02000005 	andeq	r0, r0, #5
    121c:	11097091 	swpne	r7, r1, [r9]
    1220:	0100001c 	tsteq	r0, ip, lsl r0
    1224:	0000301c 	andeq	r3, r0, ip, lsl r0
    1228:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    122c:	04040300 	streq	r0, [r4], #-768	; 0x300
    1230:	00001bda 	ldrdeq	r1, [r0], -sl
    1234:	1c8a010d 	stfnes	f0, [sl], {13}
    1238:	30010000 	andcc	r0, r1, r0
    123c:	00054001 	andeq	r4, r5, r1
    1240:	00057400 	andeq	r7, r5, r0, lsl #8
    1244:	0001b800 	andeq	fp, r1, r0, lsl #16
    1248:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    124c:	8f0b0000 	svchi	0x000b0000
    1250:	0100001b 	tsteq	r0, fp, lsl r0
    1254:	00003030 	andeq	r3, r0, r0, lsr r0
    1258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    125c:	001cbc0b 	andseq	fp, ip, fp, lsl #24
    1260:	c8300100 	ldmdagt	r0!, {r8}
    1264:	02000001 	andeq	r0, r0, #1
    1268:	710b7091 	swpvc	r7, r1, [fp]
    126c:	0100001c 	tsteq	r0, ip, lsl r0
    1270:	0001a230 	andeq	sl, r1, r0, lsr r2
    1274:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1278:	001ca90b 	andseq	sl, ip, fp, lsl #18
    127c:	7c300100 	ldfvcs	f0, [r0], #-0
    1280:	02000001 	andeq	r0, r0, #1
    1284:	0d006891 	stceq	8, cr6, [r0, #-580]	; 0xfffffdbc
    1288:	001bc801 	andseq	ip, fp, r1, lsl #16
    128c:	013f0100 	teqeq	pc, r0, lsl #2
    1290:	00000574 	andeq	r0, r0, r4, ror r5
    1294:	000005d4 	ldrdeq	r0, [r0], -r4
    1298:	000001e4 	andeq	r0, r0, r4, ror #3
    129c:	00063801 	andeq	r3, r6, r1, lsl #16
    12a0:	00630e00 	rsbeq	r0, r3, r0, lsl #28
    12a4:	005e3f01 	subseq	r3, lr, r1, lsl #30
    12a8:	91020000 	mrsls	r0, (UNDEF: 2)
    12ac:	010f0077 	tsteq	pc, r7, ror r0	; <UNPREDICTABLE>
    12b0:	00001c67 	andeq	r1, r0, r7, ror #24
    12b4:	005e4b01 	subseq	r4, lr, r1, lsl #22
    12b8:	05d40000 	ldrbeq	r0, [r4]
    12bc:	061c0000 	ldreq	r0, [ip], -r0
    12c0:	02100000 	andseq	r0, r0, #0
    12c4:	10010000 	andne	r0, r1, r0
    12c8:	001c5801 	andseq	r5, ip, r1, lsl #16
    12cc:	01510100 	cmpeq	r1, r0, lsl #2
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
    12d4:	0000061c 	andeq	r0, r0, ip, lsl r6
    12d8:	00000680 	andeq	r0, r0, r0, lsl #13
    12dc:	0000023c 	andeq	r0, r0, ip, lsr r2
    12e0:	00069801 	andeq	r9, r6, r1, lsl #16
    12e4:	74730e00 	ldrbtvc	r0, [r3], #-3584	; 0xe00
    12e8:	51010072 	tstpl	r1, r2, ror r0
    12ec:	00000698 	muleq	r0, r8, r6
    12f0:	0b6c9102 	bleq	1b25700 <.LC0+0x1b25018>
    12f4:	00001c83 	andeq	r1, r0, r3, lsl #25
    12f8:	00305101 	eorseq	r5, r0, r1, lsl #2
    12fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1300:	00690c68 	rsbeq	r0, r9, r8, ror #24
    1304:	00505301 	subseq	r5, r0, r1, lsl #6
    1308:	91020000 	mrsls	r0, (UNDEF: 2)
    130c:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    1310:	0000005e 	andeq	r0, r0, lr, asr r0
    1314:	1bec0112 	blne	ffb01764 <.LC0+0xffb0107c>
    1318:	5c010000 	stcpl	0, cr0, [r1], {-0}
    131c:	00005001 	andeq	r5, r0, r1
    1320:	00068000 	andeq	r8, r6, r0
    1324:	0006e400 	andeq	lr, r6, r0, lsl #8
    1328:	00026800 	andeq	r6, r2, r0, lsl #16
    132c:	620e0100 	andvs	r0, lr, #0, 2
    1330:	01006675 	tsteq	r0, r5, ror r6
    1334:	0006985c 	andeq	r9, r6, ip, asr r8
    1338:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    133c:	001c830b 	andseq	r8, ip, fp, lsl #6
    1340:	305c0100 	subscc	r0, ip, r0, lsl #2
    1344:	02000000 	andeq	r0, r0, #0
    1348:	94136091 	ldrls	r6, [r3], #-145	; 0x91
    134c:	d4000006 	strle	r0, [r0], #-6
    1350:	0c000006 	stceq	0, cr0, [r0], {6}
    1354:	5e010069 	cdppl	0, 0, cr0, cr1, cr9, {3}
    1358:	00000050 	andeq	r0, r0, r0, asr r0
    135c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10011201 	andne	r1, r1, r1, lsl #4
  10:	02000006 	andeq	r0, r0, #6
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <.LC0+0xec2620>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <.LC0+0x894c>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0b0b0024 	bleq	2c00c4 <.LC0+0x2bf9dc>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	04050000 	streq	r0, [r5], #-0
  38:	3a0b0b01 	bcc	2c2c44 <.LC0+0x2c255c>
  3c:	010b3b0b 	tsteq	fp, fp, lsl #22
  40:	06000013 			; <UNDEFINED> instruction: 0x06000013
  44:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  48:	00000d1c 	andeq	r0, r0, ip, lsl sp
  4c:	3f012e07 	svccc	0x00012e07
  50:	3a0e030c 	bcc	380c88 <.LC0+0x3805a0>
  54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  58:	1201110c 	andne	r1, r1, #12, 2
  5c:	97064001 	strls	r4, [r6, -r1]
  60:	13010c42 	movwne	r0, #7234	; 0x1c42
  64:	05080000 	streq	r0, [r8, #-0]
  68:	3a0e0300 	bcc	380c70 <.LC0+0x380588>
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
  6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	000a0213 	andeq	r0, sl, r3, lsl r2
  74:	00050900 	andeq	r0, r5, r0, lsl #18
  78:	0b3a0803 	bleq	e8208c <.LC0+0xe819a4>
  7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  80:	00000a02 	andeq	r0, r0, r2, lsl #20

	PUT32(module+reg, value);
  84:	3f012e0a 	svccc	0x00012e0a
  88:	3a0e030c 	bcc	380cc0 <.LC0+0x3805d8>
  8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  90:	1113490c 	tstne	r3, ip, lsl #18
  94:	40011201 	andmi	r1, r1, r1, lsl #4
}
  98:	0c429706 	mcrreq	7, 0, r9, r2, cr6
  9c:	00001301 	andeq	r1, r0, r1, lsl #6
  a0:	3f012e0b 	svccc	0x00012e0b

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
  a4:	3a0e030c 	bcc	380cdc <.LC0+0x3805f4>
  a8:	110b3b0b 	tstne	fp, fp, lsl #22
  ac:	40011201 	andmi	r1, r1, r1, lsl #4
  b0:	0c429606 	mcrreq	6, 0, r9, r2, cr6
  b4:	340c0000 	strcc	r0, [ip], #-0
	return GET32(module+reg);
  b8:	3a0e0300 	bcc	380cc0 <.LC0+0x3805d8>
  bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c0:	000a0213 	andeq	r0, sl, r3, lsl r2
  c4:	11010000 	mrsne	r0, (UNDEF: 1)
}
  c8:	130e2501 	movwne	r2, #58625	; 0xe501
  cc:	1b0e030b 	blne	380d00 <.LC0+0x380618>
  d0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  d4:	00061001 	andeq	r1, r6, r1

void Init_UART0_Clk()
{
  d8:	00160200 	andseq	r0, r6, r0, lsl #4
  dc:	0b3a0e03 	bleq	e838f0 <.LC0+0xe83208>
  e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
  e4:	24030000 	strcs	r0, [r3], #-0
  e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  ec:	000e030b 	andeq	r0, lr, fp, lsl #6
  f0:	00240400 	eoreq	r0, r4, r0, lsl #8
  f4:	0b3e0b0b 	bleq	f82d28 <.LC0+0xf82640>
	temp &= ~(0x3);
  f8:	00000803 	andeq	r0, r0, r3, lsl #16
  fc:	0b010405 	bleq	41118 <.LC0+0x40a30>
 100:	3b0b3a0b 	blcc	2ce934 <.LC0+0x2ce24c>
	temp |= (0x2);
 104:	0013010b 	andseq	r0, r3, fp, lsl #2
 108:	00280600 	eoreq	r0, r8, r0, lsl #12
 10c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
 110:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 114:	030c3f01 	movweq	r3, #52993	; 0xcf01
 118:	3b0b3a0e 	blcc	2ce958 <.LC0+0x2ce270>
 11c:	110c270b 	tstne	ip, fp, lsl #14
 120:	40011201 	andmi	r1, r1, r1, lsl #4

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 124:	0c429706 	mcrreq	7, 0, r9, r2, cr6
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	03000508 	movweq	r0, #1288	; 0x508
 130:	3b0b3a0e 	blcc	2ce970 <.LC0+0x2ce288>
 134:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	temp &= ~(0x3);
 138:	0900000a 	stmdbeq	r0, {r1, r3}
 13c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 8c <CM_SetClk+0x20>
 140:	0b3a0e03 	bleq	e83954 <.LC0+0xe8326c>
	temp |= (0x2);
 144:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
 148:	01111349 	tsteq	r1, r9, asr #6
 14c:	06400112 			; <UNDEFINED> instruction: 0x06400112
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
 150:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
 154:	0a000013 	beq	1a8 <Init_UART0_Clk+0xd0>
 158:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a8 <CM_GetClk+0x4>
 15c:	0b3a0e03 	bleq	e83970 <.LC0+0xe83288>
 160:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 164:	01120111 	tsteq	r2, r1, lsl r1
 168:	42960640 	addsmi	r0, r6, #64, 12	; 0x4000000
 16c:	0013010c 	andseq	r0, r3, ip, lsl #2
 170:	00340b00 	eorseq	r0, r4, r0, lsl #22
 174:	0b3a0e03 	bleq	e83988 <.LC0+0xe832a0>
	temp &= ~(0x3);
 178:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 17c:	00000a02 	andeq	r0, r0, r2, lsl #20
 180:	3f002e0c 	svccc	0x00002e0c
	temp |= (0x2);
 184:	3a0e030c 	bcc	380dbc <.LC0+0x3806d4>
 188:	110b3b0b 	tstne	fp, fp, lsl #22
 18c:	40011201 	andmi	r1, r1, r1, lsl #4
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
 190:	0c429606 	mcrreq	6, 0, r9, r2, cr6
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 19c:	0e030b13 	vmoveq.32	d3[0], r0
 1a0:	01110e1b 	tsteq	r1, fp, lsl lr
*/
	

   

}
 1a4:	06100112 			; <UNDEFINED> instruction: 0x06100112
 1a8:	16020000 	strne	r0, [r2], -r0
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
 1ac:	3a0e0300 	bcc	380db4 <.LC0+0x3806cc>
 1b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b4:	03000013 	movweq	r0, #19
 1b8:	0b0b0024 	bleq	2c0250 <.LC0+0x2bfb68>
 1bc:	0e030b3e 	vmoveq.16	d3[0], r0

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
 1c0:	24040000 	strcs	r0, [r4], #-0
 1c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1c8:	0008030b 	andeq	r0, r8, fp, lsl #6
 1cc:	01040500 	tsteq	r4, r0, lsl #10
 1d0:	0b3a0b0b 	bleq	e82e04 <.LC0+0xe8271c>
}
 1d4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1d8:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
 1dc:	1c0e0300 	stcne	3, cr0, [lr], {-0}

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
 1e0:	0700000d 	streq	r0, [r0, -sp]
 1e4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 134 <Init_UART0_Clk+0x5c>
 1e8:	0b3a0e03 	bleq	e839fc <.LC0+0xe83314>
 1ec:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
 1f0:	01120111 	tsteq	r2, r1, lsl r1
 1f4:	42960640 	addsmi	r0, r6, #64, 12	; 0x4000000
 1f8:	0013010c 	andseq	r0, r3, ip, lsl #2
 1fc:	00340800 	eorseq	r0, r4, r0, lsl #16
}
 200:	0b3a0803 	bleq	e82214 <.LC0+0xe81b2c>
 204:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 208:	00000a02 	andeq	r0, r0, r2, lsl #20
 20c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
 210:	00000013 	andeq	r0, r0, r3, lsl r0
 214:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 218:	030b130e 	movweq	r1, #45838	; 0xb30e
 21c:	110e1b0e 	tstne	lr, lr, lsl #22
 220:	10011201 	andne	r1, r1, r1, lsl #4
	unsigned int temp = CM_getCtrlModule(0);
 224:	02000006 	andeq	r0, r0, #6
 228:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 22c:	0b3b0b3a 	bleq	ec2f1c <.LC0+0xec2834>
	temp &= ~(0b111);    // turn down MUXMODE
 230:	00001349 	andeq	r1, r0, r9, asr #6
 234:	0b002403 	bleq	9248 <.LC0+0x8b60>
 238:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	temp |= mode;        // set new MUXMODE
 23c:	0400000e 	streq	r0, [r0], #-14
 240:	0b0b0024 	bleq	2c02d8 <.LC0+0x2bfbf0>
 244:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 248:	04050000 	streq	r0, [r5], #-0
	CM_setCtrlModule(module, temp);
 24c:	3a0b0b01 	bcc	2c2e58 <.LC0+0x2c2770>
 250:	010b3b0b 	tsteq	fp, fp, lsl #22
 254:	06000013 			; <UNDEFINED> instruction: 0x06000013


}
 258:	08030028 	stmdaeq	r3, {r3, r5}
 25c:	00000d1c 	andeq	r0, r0, ip, lsl sp




void Uart0_Mux()
{
 260:	03002807 	movweq	r2, #2055	; 0x807
 264:	000d1c0e 	andeq	r1, sp, lr, lsl #24

	CM_setCtrlModule(CM_conf_uart0_rxd, (1 << 4) | (1 << 5));		//Rx muxing
 268:	012e0800 	teqeq	lr, r0, lsl #16
 26c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 270:	0b3b0b3a 	bleq	ec2f60 <.LC0+0xec2878>
	CM_setCtrlModule(CM_conf_uart0_txd,0);					//tx muxing
 274:	01120111 	tsteq	r2, r1, lsl r1
 278:	42960640 	addsmi	r0, r6, #64, 12	; 0x4000000
 27c:	0013010c 	andseq	r0, r3, ip, lsl #2
/*
	PAD_setMode(CM_conf_uart0_txd, 0);
	PAD_setMode(CM_conf_uart0_rxd, 0);
*/
}
 280:	00340900 	eorseq	r0, r4, r0, lsl #18
#define CM_PER_BASE 		 0x44e00000
#define CM_PER_GPIO1		 0xac


void _main(void)
{
 284:	0b3a0e03 	bleq	e83a98 <.LC0+0xe833b0>
 288:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 28c:	00000a02 	andeq	r0, r0, r2, lsl #20


	volatile unsigned int ra;
	char a = 'a';
 290:	3f012e0a 	svccc	0x00012e0a
 294:	3a0e030c 	bcc	380ecc <.LC0+0x3807e4>

	PUT32(CM_PER_BASE+CM_PER_GPIO1, 1<<18 | 2);
 298:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 29c:	1201110c 	andne	r1, r1, #12, 2
 2a0:	97064001 	strls	r4, [r6, -r1]
 2a4:	13010c42 	movwne	r0, #7234	; 0x1c42
 2a8:	050b0000 	streq	r0, [fp, #-0]
	ra = GET32(GPIO1_BASE+GPIO_OE);
 2ac:	3a0e0300 	bcc	380eb4 <.LC0+0x3807cc>
 2b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b4:	000a0213 	andeq	r0, sl, r3, lsl r2
 2b8:	00340c00 	eorseq	r0, r4, r0, lsl #24
	ra &= ~(1<<21);
 2bc:	0b3a0803 	bleq	e822d0 <.LC0+0xe81be8>
 2c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2c4:	00000a02 	andeq	r0, r0, r2, lsl #20
	PUT32(GPIO1_BASE+GPIO_OE, ra);
 2c8:	3f012e0d 	svccc	0x00012e0d
 2cc:	3a0e030c 	bcc	380f04 <.LC0+0x38081c>
 2d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2d4:	1201110c 	andne	r1, r1, #12, 2

	PUT32(GPIO1_BASE+GPIO_SETDATAOUT, 1<<21);
 2d8:	96064001 	strls	r4, [r6], -r1
 2dc:	13010c42 	movwne	r0, #7234	; 0x1c42
 2e0:	050e0000 	streq	r0, [lr, #-0]
 2e4:	3a080300 	bcc	200eec <.LC0+0x200804>

	UART_init(115200,STOP1,PARITY_NONE,FLOW_OFF);
 2e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ec:	000a0213 	andeq	r0, sl, r3, lsl r2
 2f0:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 2f4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
 2f8:	0b3b0b3a 	bleq	ec2fe8 <.LC0+0xec2900>
 2fc:	01111349 	tsteq	r1, r9, asr #6

	UART_putString("UART0 Initialized...\n",21);
 300:	06400112 			; <UNDEFINED> instruction: 0x06400112
 304:	000c4297 	muleq	ip, r7, r2
 308:	012e1000 	teqeq	lr, r0
 30c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}

}
 310:	0b3b0b3a 	bleq	ec3000 <.LC0+0xec2918>
 314:	13490c27 	movtne	r0, #39975	; 0x9c27
#include "uart_console_header.h"
#include "clock.h"
#include "control_module.h"

void GPIO_init()
{
 318:	01120111 	tsteq	r2, r1, lsl r1
 31c:	42960640 	addsmi	r0, r6, #64, 12	; 0x4000000
 320:	0013010c 	andseq	r0, r3, ip, lsl #2
	unsigned int setting = (1<<18) | (0x2<<0);
 324:	000f1100 	andeq	r1, pc, r0, lsl #2
 328:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 32c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
	CM_SetClk(CM_PER, CM_PER_GPIO1_CLKCTRL, setting);
 330:	030c3f01 	movweq	r3, #52993	; 0xcf01
 334:	3b0b3a0e 	blcc	2ceb74 <.LC0+0x2ce48c>
 338:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
 33c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 340:	96064001 	strls	r4, [r6], -r1
	while((CM_GetClk(CM_PER, CM_PER_GPIO1_CLKCTRL) & (0x3<<16)) != 0);
 344:	00000c42 	andeq	r0, r0, r2, asr #24
 348:	11010b13 	tstne	r1, r3, lsl fp
 34c:	00011201 	andeq	r1, r1, r1, lsl #4
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	00000004 	andeq	r0, r0, r4
   8:	007d0002 	rsbseq	r0, sp, r2
   c:	00000004 	andeq	r0, r0, r4
  10:	00000008 	andeq	r0, r0, r8
  14:	047d0002 	ldrbteq	r0, [sp], #-2
  18:	00000008 	andeq	r0, r0, r8
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	047b0002 	ldrbteq	r0, [fp], #-2
	...
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	0000003c 	andeq	r0, r0, ip, lsr r0
  34:	007d0002 	rsbseq	r0, sp, r2
  38:	0000003c 	andeq	r0, r0, ip, lsr r0
  3c:	00000040 	andeq	r0, r0, r0, asr #32
  40:	047d0002 	ldrbteq	r0, [sp], #-2
  44:	00000040 	andeq	r0, r0, r0, asr #32
  48:	0000006c 	andeq	r0, r0, ip, rrx
  4c:	047b0002 	ldrbteq	r0, [fp], #-2
	...
  58:	0000006c 	andeq	r0, r0, ip, rrx
  5c:	00000070 	andeq	r0, r0, r0, ror r0
  60:	007d0002 	rsbseq	r0, sp, r2
  64:	00000070 	andeq	r0, r0, r0, ror r0
  68:	00000074 	andeq	r0, r0, r4, ror r0
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
  6c:	087d0002 	ldmdaeq	sp!, {r1}^
  70:	00000074 	andeq	r0, r0, r4, ror r0
  74:	00000140 	andeq	r0, r0, r0, asr #2
  78:	047b0002 	ldrbteq	r0, [fp], #-2
	...

	PUT32(module+reg, value);
  88:	00000004 	andeq	r0, r0, r4
  8c:	007d0002 	rsbseq	r0, sp, r2
  90:	00000004 	andeq	r0, r0, r4
  94:	00000008 	andeq	r0, r0, r8
}
  98:	047d0002 	ldrbteq	r0, [sp], #-2
  9c:	00000008 	andeq	r0, r0, r8
  a0:	00000034 	andeq	r0, r0, r4, lsr r0

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
  a4:	047b0002 	ldrbteq	r0, [fp], #-2
	...
  b0:	00000034 	andeq	r0, r0, r4, lsr r0
  b4:	00000038 	andeq	r0, r0, r8, lsr r0
	return GET32(module+reg);
  b8:	007d0002 	rsbseq	r0, sp, r2
  bc:	00000038 	andeq	r0, r0, r8, lsr r0
  c0:	0000003c 	andeq	r0, r0, ip, lsr r0
  c4:	047d0002 	ldrbteq	r0, [sp], #-2
}
  c8:	0000003c 	andeq	r0, r0, ip, lsr r0
  cc:	00000064 	andeq	r0, r0, r4, rrx
  d0:	047b0002 	ldrbteq	r0, [fp], #-2
	...

void Init_UART0_Clk()
{
  dc:	00000064 	andeq	r0, r0, r4, rrx
  e0:	00000068 	andeq	r0, r0, r8, rrx

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
  e4:	007d0002 	rsbseq	r0, sp, r2
  e8:	00000068 	andeq	r0, r0, r8, rrx
  ec:	0000006c 	andeq	r0, r0, ip, rrx
  f0:	087d0002 	ldmdaeq	sp!, {r1}^
  f4:	0000006c 	andeq	r0, r0, ip, rrx
	temp &= ~(0x3);
  f8:	000000b4 	strheq	r0, [r0], -r4
  fc:	047b0002 	ldrbteq	r0, [fp], #-2
	...
	temp |= (0x2);
 108:	000000b4 	strheq	r0, [r0], -r4
 10c:	000000b8 	strheq	r0, [r0], -r8
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
 110:	007d0002 	rsbseq	r0, sp, r2
 114:	000000b8 	strheq	r0, [r0], -r8
 118:	000000bc 	strheq	r0, [r0], -ip
 11c:	087d0002 	ldmdaeq	sp!, {r1}^
 120:	000000bc 	strheq	r0, [r0], -ip

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 124:	000000d8 	ldrdeq	r0, [r0], -r8
 128:	047b0002 	ldrbteq	r0, [fp], #-2
	...
	temp &= ~(0x3);
 138:	00000004 	andeq	r0, r0, r4
 13c:	007d0002 	rsbseq	r0, sp, r2
 140:	00000004 	andeq	r0, r0, r4
	temp |= (0x2);
 144:	00000008 	andeq	r0, r0, r8
 148:	087d0002 	ldmdaeq	sp!, {r1}^
 14c:	00000008 	andeq	r0, r0, r8
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
 150:	00000094 	muleq	r0, r4, r0
 154:	047b0002 	ldrbteq	r0, [fp], #-2
	...

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 164:	00000004 	andeq	r0, r0, r4
 168:	007d0002 	rsbseq	r0, sp, r2
 16c:	00000004 	andeq	r0, r0, r4
 170:	00000008 	andeq	r0, r0, r8
 174:	087d0002 	ldmdaeq	sp!, {r1}^
	temp &= ~(0x3);
 178:	00000008 	andeq	r0, r0, r8
 17c:	00000058 	andeq	r0, r0, r8, asr r0
 180:	047b0002 	ldrbteq	r0, [fp], #-2
	...
	temp |= (0x2);
 18c:	00000058 	andeq	r0, r0, r8, asr r0
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
 190:	0000005c 	andeq	r0, r0, ip, asr r0
 194:	007d0002 	rsbseq	r0, sp, r2
 198:	0000005c 	andeq	r0, r0, ip, asr r0
 19c:	00000060 	andeq	r0, r0, r0, rrx
 1a0:	047d0002 	ldrbteq	r0, [sp], #-2
*/
	

   

}
 1a4:	00000060 	andeq	r0, r0, r0, rrx
 1a8:	00000228 	andeq	r0, r0, r8, lsr #4
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
 1ac:	047b0002 	ldrbteq	r0, [fp], #-2
	...
 1b8:	00000228 	andeq	r0, r0, r8, lsr #4
 1bc:	0000022c 	andeq	r0, r0, ip, lsr #4

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
 1c0:	007d0002 	rsbseq	r0, sp, r2
 1c4:	0000022c 	andeq	r0, r0, ip, lsr #4
 1c8:	00000230 	andeq	r0, r0, r0, lsr r2
 1cc:	087d0002 	ldmdaeq	sp!, {r1}^
 1d0:	00000230 	andeq	r0, r0, r0, lsr r2
}
 1d4:	0000025c 	andeq	r0, r0, ip, asr r2
 1d8:	047b0002 	ldrbteq	r0, [fp], #-2
	...

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
 1e4:	0000025c 	andeq	r0, r0, ip, asr r2
 1e8:	00000260 	andeq	r0, r0, r0, ror #4
 1ec:	007d0002 	rsbseq	r0, sp, r2
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
 1f0:	00000260 	andeq	r0, r0, r0, ror #4
 1f4:	00000264 	andeq	r0, r0, r4, ror #4
 1f8:	087d0002 	ldmdaeq	sp!, {r1}^
 1fc:	00000264 	andeq	r0, r0, r4, ror #4
}
 200:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 204:	047b0002 	ldrbteq	r0, [fp], #-2
	...

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
 210:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 214:	000002c0 	andeq	r0, r0, r0, asr #5
 218:	007d0002 	rsbseq	r0, sp, r2
 21c:	000002c0 	andeq	r0, r0, r0, asr #5
 220:	000002c4 	andeq	r0, r0, r4, asr #5
	unsigned int temp = CM_getCtrlModule(0);
 224:	047d0002 	ldrbteq	r0, [sp], #-2
 228:	000002c4 	andeq	r0, r0, r4, asr #5
 22c:	00000304 	andeq	r0, r0, r4, lsl #6
	temp &= ~(0b111);    // turn down MUXMODE
 230:	047b0002 	ldrbteq	r0, [fp], #-2
	...
	temp |= mode;        // set new MUXMODE
 23c:	00000304 	andeq	r0, r0, r4, lsl #6
 240:	00000308 	andeq	r0, r0, r8, lsl #6
 244:	007d0002 	rsbseq	r0, sp, r2
 248:	00000308 	andeq	r0, r0, r8, lsl #6
	CM_setCtrlModule(module, temp);
 24c:	0000030c 	andeq	r0, r0, ip, lsl #6
 250:	087d0002 	ldmdaeq	sp!, {r1}^
 254:	0000030c 	andeq	r0, r0, ip, lsl #6


}
 258:	00000368 	andeq	r0, r0, r8, ror #6
 25c:	047b0002 	ldrbteq	r0, [fp], #-2
	...


void Uart0_Mux()
{

	CM_setCtrlModule(CM_conf_uart0_rxd, (1 << 4) | (1 << 5));		//Rx muxing
 268:	00000368 	andeq	r0, r0, r8, ror #6
 26c:	0000036c 	andeq	r0, r0, ip, ror #6
 270:	007d0002 	rsbseq	r0, sp, r2
	CM_setCtrlModule(CM_conf_uart0_txd,0);					//tx muxing
 274:	0000036c 	andeq	r0, r0, ip, ror #6
 278:	00000370 	andeq	r0, r0, r0, ror r3
 27c:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
/*
	PAD_setMode(CM_conf_uart0_txd, 0);
	PAD_setMode(CM_conf_uart0_rxd, 0);
*/
}
 280:	00000370 	andeq	r0, r0, r0, ror r3
#define CM_PER_BASE 		 0x44e00000
#define CM_PER_GPIO1		 0xac


void _main(void)
{
 284:	000003cc 	andeq	r0, r0, ip, asr #7
 288:	047b0002 	ldrbteq	r0, [fp], #-2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	0000006c 	andeq	r0, r0, ip, rrx
  14:	00000140 	andeq	r0, r0, r0, asr #2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	047e0002 	ldrbteq	r0, [lr], #-2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000001ac 	andeq	r0, r0, ip, lsr #3
  34:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	0b970002 	bleq	fe5c0054 <.LC0+0xfe5bf96c>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	00000284 	andeq	r0, r0, r4, lsl #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	0c760002 	ldcleq	0, cr0, [r6], #-8
  68:	00040000 	andeq	r0, r4, r0
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
  6c:	00000000 	andeq	r0, r0, r0
  70:	00000318 	andeq	r0, r0, r8, lsl r3
  74:	000003cc 	andeq	r0, r0, ip, asr #7
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000005c 	andeq	r0, r0, ip, asr r0
   4:	00340002 	eorseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	636f6c63 	cmnvs	pc, #25344	; 0x6300
  20:	00632e6b 	rsbeq	r2, r3, fp, ror #28
  24:	74000000 	strvc	r0, [r0], #-0
  28:	73657079 	cmnvc	r5, #121	; 0x79
  2c:	0000682e 	andeq	r6, r0, lr, lsr #16
  30:	6c630000 	stclvs	0, cr0, [r3], #-0
  34:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
  38:	00000068 	andeq	r0, r0, r8, rrx
  3c:	05000000 	streq	r0, [r0, #-0]
  40:	00006c02 	andeq	r6, r0, r2, lsl #24
  44:	9fbc1500 	svcls	0x00bc1500
  48:	85839f69 	strhi	r9, [r3, #3945]	; 0xf69
  4c:	67679f6a 	strbvs	r9, [r7, -sl, ror #30]!
  50:	67679fa1 	strbvs	r9, [r7, -r1, lsr #31]!
  54:	67679fa1 	strbvs	r9, [r7, -r1, lsr #31]!
  58:	029e0f03 	addseq	r0, lr, #3, 30
  5c:	01010004 	tsteq	r1, r4
  60:	00000068 	andeq	r0, r0, r8, rrx
  64:	00460002 	subeq	r0, r6, r2
  68:	01020000 	mrseq	r0, (UNDEF: 2)
  6c:	000d0efb 	strdeq	r0, [sp], -fp
  70:	01010101 	tsteq	r1, r1, lsl #2
  74:	01000000 	mrseq	r0, (UNDEF: 0)
  78:	00010000 	andeq	r0, r1, r0
  7c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
  80:	5f6c6f72 	svcpl	0x006c6f72

	PUT32(module+reg, value);
  84:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xf6d
  88:	632e656c 	teqvs	lr, #108, 10	; 0x1b000000
  8c:	00000000 	andeq	r0, r0, r0
  90:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
  94:	00682e73 	rsbeq	r2, r8, r3, ror lr
}
  98:	63000000 	movwvs	r0, #0
  9c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  a0:	6d5f6c6f 	ldclvs	12, cr6, [pc, #-444]	; fffffeec <.LC0+0xfffff804>

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
  a4:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
  a8:	00682e65 	rsbeq	r2, r8, r5, ror #28
  ac:	00000000 	andeq	r0, r0, r0
  b0:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
  b4:	15000001 	strne	r0, [r0, #-1]
	return GET32(module+reg);
  b8:	83699fa0 	cmnhi	r9, #160, 30	; 0x280
  bc:	679f8583 	ldrvs	r8, [pc, r3, lsl #11]
  c0:	52698367 	rsbpl	r8, r9, #-1677721599	; 0x9c000001
  c4:	026b674c 	rsbeq	r6, fp, #76, 14	; 0x1300000
}
  c8:	01010002 	tsteq	r1, r2
  cc:	0000005f 	andeq	r0, r0, pc, asr r0
  d0:	00410002 	subeq	r0, r1, r2
  d4:	01020000 	mrseq	r0, (UNDEF: 2)

void Init_UART0_Clk()
{
  d8:	000d0efb 	strdeq	r0, [sp], -fp
  dc:	01010101 	tsteq	r1, r1, lsl #2
  e0:	01000000 	mrseq	r0, (UNDEF: 0)

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
  e4:	00010000 	andeq	r0, r1, r0
  e8:	6e69616d 	powvsez	f6, f1, #5.0
  ec:	0000632e 	andeq	r6, r0, lr, lsr #6
  f0:	61750000 	cmnvs	r5, r0
  f4:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
	temp &= ~(0x3);
  f8:	6f736e6f 	svcvs	0x00736e6f
  fc:	685f656c 	ldmdavs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 100:	65646165 	strbvs	r6, [r4, #-357]!	; 0x165
	temp |= (0x2);
 104:	00682e72 	rsbeq	r2, r8, r2, ror lr
 108:	74000000 	strvc	r0, [r0], #-0
 10c:	73657079 	cmnvc	r5, #121	; 0x79
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
 110:	0000682e 	andeq	r6, r0, lr, lsr #16
 114:	00000000 	andeq	r0, r0, r0
 118:	02840205 	addeq	r0, r4, #1342177280	; 0x50000000
 11c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
 120:	9f4c6a01 	svcls	0x004c6a01

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 124:	84846783 	strhi	r6, [r4], #1923	; 0x783
 128:	040284bc 	streq	r8, [r2], #-1212	; 0x4bc
 12c:	e2010100 	and	r0, r1, #0, 2
 130:	02000000 	andeq	r0, r0, #0
 134:	00005e00 	andeq	r5, r0, r0, lsl #28
	temp &= ~(0x3);
 138:	fb010200 	blx	40942 <.LC0+0x4025a>
 13c:	01000d0e 	tsteq	r0, lr, lsl #26
 140:	00010101 	andeq	r0, r1, r1, lsl #2
	temp |= (0x2);
 144:	00010000 	andeq	r0, r1, r0
 148:	75000100 	strvc	r0, [r0, #-256]	; 0x100
 14c:	5f747261 	svcpl	0x00747261
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
 150:	736e6f63 	cmnvc	lr, #396	; 0x18c
 154:	2e656c6f 	cdpcs	12, 6, cr6, cr5, cr15, {3}
 158:	00000063 	andeq	r0, r0, r3, rrx
 15c:	70797400 	rsbsvc	r7, r9, r0, lsl #8
 160:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 164:	00000000 	andeq	r0, r0, r0
 168:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
 16c:	0000682e 	andeq	r6, r0, lr, lsr #16
 170:	61750000 	cmnvs	r5, r0
 174:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
	temp &= ~(0x3);
 178:	6f736e6f 	svcvs	0x00736e6f
 17c:	685f656c 	ldmdavs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 180:	65646165 	strbvs	r6, [r4, #-357]!	; 0x165
	temp |= (0x2);
 184:	00682e72 	rsbeq	r2, r8, r2, ror lr
 188:	63000000 	movwvs	r0, #0
 18c:	6b636f6c 	blvs	18dbf44 <.LC0+0x18db85c>
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
 190:	0000682e 	andeq	r6, r0, lr, lsr #16
 194:	00000000 	andeq	r0, r0, r0
 198:	03180205 	tsteq	r8, #1342177280	; 0x50000000
 19c:	67180000 	ldrvs	r0, [r8, -r0]
 1a0:	02009f67 	andeq	r9, r0, #412	; 0x19c
*/
	

   

}
 1a4:	2e060104 	adfcss	f0, f6, f4
 1a8:	834ef406 	movthi	pc, #58374	; 0xe406	; <UNPREDICTABLE>
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
 1ac:	00836783 	addeq	r6, r3, r3, lsl #15
 1b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b4:	9fbc062e 	svcls	0x00bc062e
 1b8:	0200a067 	andeq	sl, r0, #103	; 0x67
 1bc:	2e060104 	adfcss	f0, f6, f4

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
 1c0:	2108bb06 	tstcs	r8, r6, lsl #22
 1c4:	83838368 	orrhi	r8, r3, #104, 6	; 0xa0000001
 1c8:	83838383 	orrhi	r8, r3, #201326594	; 0xc000002
 1cc:	f59f8383 			; <UNDEFINED> instruction: 0xf59f8383
 1d0:	dba18483 	blle	fe8613e4 <.LC0+0xfe860cfc>
}
 1d4:	4d4b3131 	stfmie	f3, [fp, #-196]	; 0xffffff3c
 1d8:	004c67a0 	subeq	r6, ip, r0, lsr #15
 1dc:	06010402 	streq	r0, [r1], -r2, lsl #8

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
 1e0:	83da062e 	bicshi	r0, sl, #48234496	; 0x2e00000
 1e4:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 1e8:	2e060104 	adfcss	f0, f6, f4
 1ec:	8583d706 	strhi	sp, [r3, #1798]	; 0x706
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
 1f0:	bb304b9f 	bllt	c13074 <.LC0+0xc1298c>
 1f4:	01040200 	mrseq	r0, R12_usr
 1f8:	692f8763 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sl, pc}	; <UNPREDICTABLE>
 1fc:	0402009f 	streq	r0, [r2], #-159	; 0x9f
}
 200:	02006802 	andeq	r6, r0, #131072	; 0x20000
 204:	00b80204 	adcseq	r0, r8, r4, lsl #4
 208:	06010402 	streq	r0, [r1], -r2, lsl #8
 20c:	2f860666 	svccs	0x00860666

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
 210:	01000602 	tsteq	r0, r2, lsl #12
 214:	Address 0x0000000000000214 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	505f4d43 	subspl	r4, pc, r3, asr #26
       4:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	; 0x45
       8:	4c435f33 	mcrrmi	15, 3, r5, r3, cr3
       c:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
      10:	004c5254 	subeq	r5, ip, r4, asr r2
      14:	505f4d43 	subspl	r4, pc, r3, asr #26
      18:	4d5f5245 	lfmmi	f5, 2, [pc, #-276]	; ffffff0c <.LC0+0xfffff824>
      1c:	50534143 	subspl	r4, r3, r3, asr #2
      20:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
      24:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
      28:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
      2c:	5245505f 	subpl	r5, r5, #95	; 0x5f
      30:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
      34:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
      38:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
      3c:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
      40:	5245505f 	subpl	r5, r5, #95	; 0x5f
      44:	48344c5f 	ldmdami	r4!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}
      48:	4c435f53 	mcrrmi	15, 5, r5, r3, cr3
      4c:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
      50:	004c5254 	subeq	r5, ip, r4, asr r2
      54:	505f4d43 	subspl	r4, pc, r3, asr #26
      58:	555f5245 	ldrbpl	r5, [pc, #-581]	; fffffe1b <.LC0+0xfffff733>
      5c:	34545241 	ldrbcc	r5, [r4], #-577	; 0x241
      60:	4b4c435f 	blmi	1310de4 <.LC0+0x13106fc>
      64:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
      68:	5f4d4300 	svcpl	0x004d4300
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
      6c:	5f524550 	svcpl	0x00524550
      70:	5341434d 	movtpl	r4, #4941	; 0x134d
      74:	435f3150 	cmpmi	pc, #80, 2
      78:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
      7c:	43004c52 	movwmi	r4, #3154	; 0xc52
      80:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d

	PUT32(module+reg, value);
      84:	50545f52 	subspl	r5, r4, r2, asr pc
      88:	5f304354 	svcpl	0x00304354
      8c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
      90:	004c5254 	subeq	r5, ip, r4, asr r2
      94:	505f4d43 	subspl	r4, pc, r3, asr #26
}
      98:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	; 0x45
      9c:	5f574634 	svcpl	0x00574634
      a0:	534b4c43 	movtpl	r4, #48195	; 0xbc43

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
      a4:	52544354 	subspl	r4, r4, #84, 6	; 0x50000001
      a8:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
      ac:	4353535f 	cmpmi	r3, #2080374785	; 0x7c000001
      b0:	444f4d5f 	strbmi	r4, [pc], #-3423	; b8 <CM_GetClk+0x14>
      b4:	51455246 	cmppl	r5, r6, asr #4
	return GET32(module+reg);
      b8:	5f564944 	svcpl	0x00564944
      bc:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
      c0:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
      c4:	5f4d4300 	svcpl	0x004d4300
}
      c8:	5f524550 	svcpl	0x00524550
      cc:	00474552 	subeq	r4, r7, r2, asr r5
      d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
      d4:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000

void Init_UART0_Clk()
{
      d8:	435f3054 	cmpmi	pc, #84	; 0x54
      dc:	43006b6c 	movwmi	r6, #2924	; 0xb6c
      e0:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
      e4:	41555f52 	cmpmi	r5, r2, asr pc
      e8:	5f355452 	svcpl	0x00355452
      ec:	434b4c43 	movtmi	r4, #48195	; 0xbc43
      f0:	004c5254 	subeq	r5, ip, r4, asr r2
      f4:	535f4d43 	cmppl	pc, #4288	; 0x10c0
	temp &= ~(0x3);
      f8:	445f4353 	ldrbmi	r4, [pc], #-851	; 100 <Init_UART0_Clk+0x28>
      fc:	41544c45 	cmpmi	r4, r5, asr #24
     100:	4554534d 	ldrbmi	r5, [r4, #-845]	; 0x34d
	temp |= (0x2);
     104:	50445f50 	subpl	r5, r4, r0, asr pc
     108:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; 110 <Init_UART0_Clk+0x38>
     10c:	00505349 	subseq	r5, r0, r9, asr #6
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
     110:	706d6574 	rsbvc	r6, sp, r4, ror r5
     114:	6f687300 	svcvs	0x00687300
     118:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     11c:	4300746e 	movwmi	r7, #1134	; 0x46e
     120:	44495f4d 	strbmi	r5, [r9], #-3917	; 0xf4d

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
     124:	5453454c 	ldrbpl	r4, [r3], #-1356	; 0x54c
     128:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     12c:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xf4c
     130:	4d430052 	stclmi	0, cr0, [r3, #-328]	; 0xfffffeb8
     134:	5455415f 	ldrbpl	r4, [r5], #-351	; 0x15f
	temp &= ~(0x3);
     138:	4c44494f 	mcrrmi	9, 4, r4, r4, cr15
     13c:	50445f45 	subpl	r5, r4, r5, asr #30
     140:	505f4c4c 	subspl	r4, pc, ip, asr #24
	temp |= (0x2);
     144:	43005245 	movwmi	r5, #581	; 0x245
     148:	49445f4d 	stmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     14c:	354d5f56 	strbcc	r5, [sp, #-3926]	; 0xf56
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
     150:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     154:	4f435f4c 	svcmi	0x00435f4c
     158:	43004552 	movwmi	r4, #1362	; 0x552
     15c:	53535f4d 	cmppl	r3, #308	; 0x134
     160:	45445f43 	strbmi	r5, [r4, #-3907]	; 0xf43

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
     164:	4d41544c 	cfstrdmi	mvd5, [r1, #-304]	; 0xfffffed0
     168:	50455453 	subpl	r5, r5, r3, asr r4
     16c:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     170:	45505f4c 	ldrbmi	r5, [r0, #-3916]	; 0xf4c
     174:	61760052 	cmnvs	r6, r2, asr r0
	temp &= ~(0x3);
     178:	0065756c 	rsbeq	r7, r5, ip, ror #10
     17c:	505f4d43 	subspl	r4, pc, r3, asr #26
     180:	435f5245 	cmpmi	pc, #1342177284	; 0x50000004
	temp |= (0x2);
     184:	49444b4c 	stmdbmi	r4, {r2, r3, r6, r8, r9, fp, lr}^
     188:	4b323356 	blmi	c8cee8 <.LC0+0xc8c800>
     18c:	4b4c435f 	blmi	1310f10 <.LC0+0x1310828>
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
     190:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     194:	5f4d4300 	svcpl	0x004d4300
     198:	4f545541 	svcmi	0x00545541
     19c:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
     1a0:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
*/
	

   

}
     1a4:	4f435f4c 	svcmi	0x00435f4c
     1a8:	43004552 	movwmi	r4, #1362	; 0x552
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
     1ac:	49445f4d 	stmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     1b0:	324d5f56 	subcc	r5, sp, #344	; 0x158
     1b4:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     1b8:	504d5f4c 	subpl	r5, sp, ip, asr #30
     1bc:	4d430055 	stclmi	0, cr0, [r3, #-340]	; 0xfffffeac

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
     1c0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     1c4:	4143445f 	cmpmi	r3, pc, asr r4
     1c8:	435f304e 	cmpmi	pc, #78	; 0x4e
     1cc:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     1d0:	43004c52 	movwmi	r4, #3154	; 0xc52
}
     1d4:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     1d8:	344c5f52 	strbcc	r5, [ip], #-3922	; 0xf52
     1dc:	435f5746 	cmpmi	pc, #18350080	; 0x1180000

unsigned int CM_getCtrlModule(CONTROL_MODULE_REG_t module)
{
     1e0:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     1e4:	43004c52 	movwmi	r4, #3154	; 0xc52
     1e8:	54525f4d 	ldrbpl	r5, [r2], #-3917	; 0xf4d
     1ec:	4d430043 	stclmi	0, cr0, [r3, #-268]	; 0xfffffef4
	return GET32(CONTROL_MODULE_REGISTER_BASE + module);
     1f0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     1f4:	434d4d5f 	movtmi	r4, #56671	; 0xdd5f
     1f8:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
     1fc:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
}
     200:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     204:	4b4c435f 	blmi	1310f88 <.LC0+0x13108a0>
     208:	5f4c4553 	svcpl	0x004c4553
     20c:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4

void PAD_setMode(CONTROL_MODULE_REG_t module, unsigned int mode)
{
     210:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
     214:	4d430045 	stclmi	0, cr0, [r3, #-276]	; 0xfffffeec
     218:	5245505f 	subpl	r5, r5, #95	; 0x5f
     21c:	4332495f 	teqmi	r2, #1556480	; 0x17c000
     220:	4c435f31 	mcrrmi	15, 3, r5, r3, cr1
	unsigned int temp = CM_getCtrlModule(0);
     224:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     228:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     22c:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
	temp &= ~(0b111);    // turn down MUXMODE
     230:	5f344d5f 	svcpl	0x00344d5f
     234:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     238:	524f435f 	subpl	r4, pc, #2080374785	; 0x7c000001
	temp |= mode;        // set new MUXMODE
     23c:	4d430045 	stclmi	0, cr0, [r3, #-276]	; 0xfffffeec
     240:	5245505f 	subpl	r5, r5, #95	; 0x5f
     244:	4545495f 	strbmi	r4, [r5, #-2399]	; 0x95f
     248:	30303545 	eorscc	r3, r0, r5, asr #10
	CM_setCtrlModule(module, temp);
     24c:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
     250:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     254:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0


}
     258:	5245505f 	subpl	r5, r5, #95	; 0x5f
     25c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84




void Uart0_Mux()
{
     260:	5f325245 	svcpl	0x00325245
     264:	434b4c43 	movtmi	r4, #48195	; 0xbc43

	CM_setCtrlModule(CM_conf_uart0_rxd, (1 << 4) | (1 << 5));		//Rx muxing
     268:	004c5254 	subeq	r5, ip, r4, asr r2
     26c:	505f4d43 	subspl	r4, pc, r3, asr #26
     270:	4d5f5245 	lfmmi	f5, 2, [pc, #-276]	; 164 <Init_UART0_Clk+0x8c>
	CM_setCtrlModule(CM_conf_uart0_txd,0);					//tx muxing
     274:	5f31434d 	svcpl	0x0031434d
     278:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     27c:	004c5254 	subeq	r5, ip, r4, asr r2
/*
	PAD_setMode(CM_conf_uart0_txd, 0);
	PAD_setMode(CM_conf_uart0_rxd, 0);
*/
}
     280:	535f4d43 	cmppl	pc, #4288	; 0x10c0
     284:	4d5f4353 	ldclmi	3, cr4, [pc, #-332]	; 140 <Init_UART0_Clk+0x68>
     288:	5246444f 	subpl	r4, r6, #1325400064	; 0x4f000000
     28c:	49445145 	stmdbmi	r4, {r0, r2, r6, r8, ip, lr}^


	volatile unsigned int ra;
	char a = 'a';
     290:	50445f56 	subpl	r5, r4, r6, asr pc
     294:	4d5f4c4c 	ldclmi	12, cr4, [pc, #-304]	; 16c <Init_UART0_Clk+0x94>

	PUT32(CM_PER_BASE+CM_PER_GPIO1, 1<<18 | 2);
     298:	43005550 	movwmi	r5, #1360	; 0x550
     29c:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     2a0:	32495f52 	subcc	r5, r9, #328	; 0x148
     2a4:	435f3243 	cmpmi	pc, #805306372	; 0x30000004
     2a8:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
	ra = GET32(GPIO1_BASE+GPIO_OE);
     2ac:	43004c52 	movwmi	r4, #3154	; 0xc52
     2b0:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     2b4:	41555f52 	cmpmi	r5, r2, asr pc
     2b8:	5f335452 	svcpl	0x00335452
	ra &= ~(1<<21);
     2bc:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     2c0:	004c5254 	subeq	r5, ip, r4, asr r2
     2c4:	505f4d43 	subspl	r4, pc, r3, asr #26
	PUT32(GPIO1_BASE+GPIO_OE, ra);
     2c8:	545f5245 	ldrbpl	r5, [pc], #-581	; 2d0 <_main+0x4c>
     2cc:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     2d0:	4c435f33 	mcrrmi	15, 3, r5, r3, cr3
     2d4:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001

	PUT32(GPIO1_BASE+GPIO_SETDATAOUT, 1<<21);
     2d8:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     2dc:	5245505f 	subpl	r5, r5, #95	; 0x5f
     2e0:	434d4d5f 	movtmi	r4, #56671	; 0xdd5f
     2e4:	4c435f32 	mcrrmi	15, 3, r5, r3, cr2

	UART_init(115200,STOP1,PARITY_NONE,FLOW_OFF);
     2e8:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     2ec:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     2f0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     2f4:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     2f8:	434f4c4e 	movtmi	r4, #64590	; 0xfc4e
     2fc:	4c435f4b 	mcrrmi	15, 4, r5, r3, cr11

	UART_putString("UART0 Initialized...\n",21);
     300:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     304:	682f004c 	stmdavs	pc!, {r2, r3, r6}	; <UNPREDICTABLE>
     308:	2f656d6f 	svccs	0x00656d6f
     30c:	73616873 	cmnvc	r1, #7536640	; 0x730000

}
     310:	642f6968 	strtvs	r6, [pc], #-2408	; 318 <GPIO_init>
     314:	61626261 	cmnvs	r2, r1, ror #4
#include "uart_console_header.h"
#include "clock.h"
#include "control_module.h"

void GPIO_init()
{
     318:	4242422f 	submi	r4, r2, #-268435454	; 0xf0000002
     31c:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
     320:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
	unsigned int setting = (1<<18) | (0x2<<0);
     324:	6165422f 	cmnvs	r5, pc, lsr #4
     328:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
     32c:	42656e6f 	rsbmi	r6, r5, #1776	; 0x6f0
	CM_SetClk(CM_PER, CM_PER_GPIO1_CLKCTRL, setting);
     330:	6b63616c 	blvs	18d88e8 <.LC0+0x18d8200>
     334:	5241552f 	subpl	r5, r1, #197132288	; 0xbc00000
     338:	4d430054 	stclmi	0, cr0, [r3, #-336]	; 0xfffffeb0
     33c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
     340:	4b575f50 	blmi	15d8088 <.LC0+0x15d79a0>
	while((CM_GetClk(CM_PER, CM_PER_GPIO1_CLKCTRL) & (0x3<<16)) != 0);
     344:	4d5f5055 	ldclmi	0, cr5, [pc, #-340]	; 1f8 <CM_getCtrlModule+0x18>
     348:	4c435f33 	mcrrmi	15, 3, r5, r3, cr3
     34c:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     350:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     354:	4b4c435f 	blmi	13110d8 <.LC0+0x13109f0>
     358:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
     35c:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     360:	4f435f4c 	svcmi	0x00435f4c
     364:	43004552 	movwmi	r4, #1362	; 0x552

}
     368:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
     36c:	6b6c4374 	blvs	1b11144 <.LC0+0x1b10a5c>


void Uart0_Reset(unsigned int baudrate) 
{
     370:	5f4d4300 	svcpl	0x004d4300
     374:	5f524550 	svcpl	0x00524550
     378:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     37c:	435f3452 	cmpmi	pc, #1375731712	; 0x52000000
	unsigned int temp = GET32(UART0+SYSC);
     380:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     384:	43004c52 	movwmi	r4, #3154	; 0xc52
     388:	4b575f4d 	blmi	15d80c4 <.LC0+0x15d79dc>
     38c:	435f5055 	cmpmi	pc, #85	; 0x55
	temp |= 0x2;
     390:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
     394:	435f4c4f 	cmpmi	pc, #20224	; 0x4f00
     398:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
	PUT32(UART0+SYSC, temp);				//Uart soft reset
     39c:	43004c52 	movwmi	r4, #3154	; 0xc52
     3a0:	4b575f4d 	blmi	15d80dc <.LC0+0x15d79f4>
     3a4:	575f5055 			; <UNDEFINED> instruction: 0x575f5055
     3a8:	5f315444 	svcpl	0x00315444
	while(((GET32(UART0+SYSS)) & 0x1) == 0);		//Wait till reset is complete
     3ac:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     3b0:	004c5254 	subeq	r5, ip, r4, asr r2
     3b4:	505f4d43 	subspl	r4, pc, r3, asr #26
     3b8:	545f5245 	ldrbpl	r5, [pc], #-581	; 3c0 <Uart0_Reset+0x50>
     3bc:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     3c0:	4c435f35 	mcrrmi	15, 3, r5, r3, cr5
     3c4:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001

	temp = GET8(UART0+SYSC);
     3c8:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     3cc:	5245505f 	subpl	r5, r5, #95	; 0x5f
     3d0:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     3d4:	4c435f31 	mcrrmi	15, 3, r5, r3, cr1
     3d8:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
	temp |= (0x1 << 0x3);
     3dc:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     3e0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     3e4:	5f334c5f 	svcpl	0x00334c5f
	PUT8(UART0+SYSC, temp);				//No idle
     3e8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     3ec:	004c5254 	subeq	r5, ip, r4, asr r2
     3f0:	505f4d43 	subspl	r4, pc, r3, asr #26
     3f4:	445f5245 	ldrbmi	r5, [pc], #-581	; 3fc <Uart0_Reset+0x8c>
     3f8:	314e4143 	cmpcc	lr, r3, asr #2

	while(((GET32(UART0+LSR) & 0x40) !=0x40));    		// wait for txfifo to be empty
     3fc:	4b4c435f 	blmi	1311180 <.LC0+0x1310a98>
     400:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     404:	5f4d4300 	svcpl	0x004d4300
     408:	5f524550 	svcpl	0x00524550
     40c:	4d575045 	ldclmi	0, cr5, [r7, #-276]	; 0xfffffeec
     410:	5f305353 	svcpl	0x00305353
     414:	434b4c43 	movtmi	r4, #48195	; 0xbc43
	float div = 48000000.0/(16.0*(float)baudrate);
     418:	004c5254 	subeq	r5, ip, r4, asr r2
     41c:	505f4d43 	subspl	r4, pc, r3, asr #26
     420:	545f5245 	ldrbpl	r5, [pc], #-581	; 428 <Uart0_Reset+0xb8>
     424:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     428:	4c435f36 	mcrrmi	15, 3, r5, r3, cr6
     42c:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     430:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     434:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
     438:	50475f50 	subpl	r5, r7, r0, asr pc
	unsigned int intdiv = (unsigned int) div; 
     43c:	5f304f49 	svcpl	0x00304f49
     440:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     444:	004c5254 	subeq	r5, ip, r4, asr r2
	/* UART Interrupt Enable Register */
	PUT8(UART0+IER, 0);					//Disable uart interrupts
     448:	505f4d43 	subspl	r4, pc, r3, asr #26
     44c:	435f5245 	cmpmi	pc, #1342177284	; 0x50000004
     450:	414d4750 	cmpmi	sp, r0, asr r7
     454:	435f3043 	cmpmi	pc, #67	; 0x43
	PUT8(UART0+MDR1,0x7);        // Disable modeselect (default) TRM table 19-50
     458:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     45c:	43004c52 	movwmi	r4, #3154	; 0xc52
     460:	53535f4d 	cmppl	r3, #308	; 0x134
     464:	45445f43 	strbmi	r5, [r4, #-3907]	; 0xf43
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
     468:	4d41544c 	cfstrdmi	mvd5, [r1, #-304]	; 0xfffffed0
     46c:	50455453 	subpl	r5, r5, r3, asr r4
     470:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     474:	4f435f4c 	svcmi	0x00435f4c
	PUT8(UART0+RHR,0);          // DLL = 0
     478:	43004552 	movwmi	r4, #1362	; 0x552
     47c:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     480:	49545f52 	ldmdbmi	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     484:	3752454d 	ldrbcc	r4, [r2, -sp, asr #10]
	PUT8(UART0+IER,0);          // DHL = 0
     488:	4b4c435f 	blmi	131120c <.LC0+0x1310b24>
     48c:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     490:	5f4d4300 	svcpl	0x004d4300
     494:	5f435353 	svcpl	0x00435353
	PUT8(UART0+LCR,0x3);        // set uart as 8bit
     498:	544c4544 	strbpl	r4, [ip], #-1348	; 0x544
     49c:	54534d41 	ldrbpl	r4, [r3], #-3393	; 0xd41
     4a0:	445f5045 	ldrbmi	r5, [pc], #-69	; 4a8 <Uart0_Reset+0x138>
     4a4:	5f4c4c50 	svcpl	0x004c4c50
	PUT8(UART0+MCR,0x3);        // force /rts & /drt to active (low) (?!)
     4a8:	0055504d 	subseq	r5, r5, sp, asr #32
     4ac:	505f4d43 	subspl	r4, pc, r3, asr #26
     4b0:	4f5f5245 	svcmi	0x005f5245
     4b4:	50575043 	subspl	r5, r7, r3, asr #32
	PUT8(UART0+FCR,0x7);        // clear rx&tx FIFOs, and enables them (each 64 bytes deep)
     4b8:	4b4c435f 	blmi	131123c <.LC0+0x1310b54>
     4bc:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     4c0:	5f4d4300 	svcpl	0x004d4300
     4c4:	50554b57 	subspl	r4, r5, r7, asr fp
	PUT8(UART0+LCR,~(0x7C));    // divisor latch enable, access DLL DHL, set uart as 8bit
     4c8:	414d535f 	cmpmi	sp, pc, asr r3
     4cc:	45525452 	ldrbmi	r5, [r2, #-1106]	; 0x452
     4d0:	58454c46 	stmdapl	r5, {r1, r2, r6, sl, fp, lr}^
     4d4:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
	PUT8(UART0+RHR,intdiv&0xFF);          // DLL = 0
     4d8:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     4dc:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     4e0:	5245505f 	subpl	r5, r5, #95	; 0x5f
     4e4:	5750455f 			; <UNDEFINED> instruction: 0x5750455f
     4e8:	3253534d 	subscc	r5, r3, #872415233	; 0x34000001
	PUT8(UART0+IER,(intdiv>>8)&0x3F);          // DHL = 0
     4ec:	4b4c435f 	blmi	1311270 <.LC0+0x1310b88>
     4f0:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     4f4:	5f4d4300 	svcpl	0x004d4300
     4f8:	50554b57 	subspl	r4, r5, r7, asr fp
     4fc:	5241555f 	subpl	r5, r1, #398458880	; 0x17c00000
     500:	435f3054 	cmpmi	pc, #84	; 0x54
     504:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     508:	43004c52 	movwmi	r4, #3154	; 0xc52


	PUT8(UART0+LCR,0x3);        // set uart as 8 bit
     50c:	4c435f4d 	mcrrmi	15, 4, r5, r3, cr13
     510:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
     514:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     518:	45505f4c 	ldrbmi	r5, [r0, #-3916]	; 0xf4c
	PUT8(UART0+MDR1,0);          // uart 16x oversampling
     51c:	48504952 	ldmdami	r0, {r1, r4, r6, r8, fp, lr}^
     520:	5f4d4300 	svcpl	0x004d4300
     524:	5f524550 	svcpl	0x00524550
     528:	534c344c 	movtpl	r3, #50252	; 0xc44c

}
     52c:	4b4c435f 	blmi	13112b0 <.LC0+0x1310bc8>
     530:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     534:	5f4d4300 	svcpl	0x004d4300
     538:	5f524550 	svcpl	0x00524550
     53c:	5f53334c 	svcpl	0x0053334c

void UART_init(unsigned int baudrate, STOP_BIT_t stopBit, PARITY_BIT_t parity, FLOW_t flowControl) 
{
     540:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     544:	52544354 	subspl	r4, r4, #84, 6	; 0x50000001
     548:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     54c:	4b4c435f 	blmi	13112d0 <.LC0+0x1310be8>
     550:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
     554:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     558:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xf4c

	//	GPIO_init();

	//UART mux config
	Uart0_Mux();
     55c:	4d430052 	stclmi	0, cr0, [r3, #-328]	; 0xfffffeb8

	//Init clock and muxing of pins
	Init_UART0_Clk();
     560:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f

	//Uart soft reset
	Uart0_Reset(baudrate);
     564:	4d535f50 	ldclmi	15, cr5, [r3, #-320]	; 0xfffffec0
     568:	52545241 	subspl	r5, r4, #268435460	; 0x10000004
}
     56c:	454c4645 	strbmi	r4, [ip, #-1605]	; 0x645
     570:	435f3158 	cmpmi	pc, #88, 2

void UART_putC( char c)
{
     574:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     578:	43004c52 	movwmi	r4, #3154	; 0xc52
     57c:	4c435f4d 	mcrrmi	15, 4, r5, r3, cr13
     580:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
     584:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f

	if (c == '\n')
     588:	49445f4c 	stmdbmi	r4, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     58c:	43005053 	movwmi	r5, #83	; 0x53
     590:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
		UART_putC('\r');
     594:	4d430052 	stclmi	0, cr0, [r3, #-328]	; 0xfffffeb8
     598:	5245505f 	subpl	r5, r5, #95	; 0x5f

	while((GET8(UART0+0x14)&0x20)!=0x20)	//wait until txfifo is empty
     59c:	4b4c435f 	blmi	1311320 <.LC0+0x1310c38>
     5a0:	4d34325f 	lfmmi	f3, 4, [r4, #-380]!	; 0xfffffe84
     5a4:	435f5a48 	cmpmi	pc, #72, 20	; 0x48000
     5a8:	54534b4c 	ldrbpl	r4, [r3], #-2892	; 0xb4c
     5ac:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     5b0:	5f4d4300 	svcpl	0x004d4300
     5b4:	5f524550 	svcpl	0x00524550
     5b8:	30425355 	subcc	r5, r2, r5, asr r3
		;


	PUT8(UART0 +0,c);
     5bc:	4b4c435f 	blmi	1311340 <.LC0+0x1310c58>
     5c0:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     5c4:	736e7500 	cmnvc	lr, #0, 10
     5c8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
}
     5cc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     5d0:	43007261 	movwmi	r7, #609	; 0x261
char UART_getC()
{
     5d4:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     5d8:	414d5f52 	cmpmi	sp, r2, asr pc
	while((GET8(UART0+0x14)&0x1)==0);     //wait for a character to be in the rx fifo
     5dc:	4f424c49 	svcmi	0x00424c49
     5e0:	435f3058 	cmpmi	pc, #88	; 0x58
     5e4:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     5e8:	43004c52 	movwmi	r4, #3154	; 0xc52
     5ec:	45435f4d 	strbmi	r5, [r3, #-3917]	; 0xf4d
     5f0:	45535546 	ldrbmi	r5, [r3, #-1350]	; 0x546
     5f4:	5f4d4300 	svcpl	0x004d4300
     5f8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
	return GET8(UART0+0x0);
     5fc:	43006b6c 	movwmi	r6, #2924	; 0xb6c
     600:	49445f4d 	stmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     604:	364d5f56 			; <UNDEFINED> instruction: 0x364d5f56
     608:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
}
     60c:	4f435f4c 	svcmi	0x00435f4c
     610:	43004552 	movwmi	r4, #1362	; 0x552
     614:	4b575f4d 	blmi	15d8350 <.LC0+0x15d7c68>
     618:	43005055 	movwmi	r5, #85	; 0x55

int UART_putString(char *str, unsigned int length)
{ 
     61c:	44495f4d 	strbmi	r5, [r9], #-3917	; 0xf4d
     620:	5453454c 	ldrbpl	r4, [r3], #-1356	; 0x54c
     624:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     628:	4f435f4c 	svcmi	0x00435f4c
     62c:	75004552 	strvc	r4, [r0, #-1362]	; 0x552
	int i = 0;
     630:	33746e69 	cmncc	r4, #1680	; 0x690
     634:	00745f32 	rsbseq	r5, r4, r2, lsr pc
	while( i < length)
     638:	495f4d43 	ldmdbmi	pc, {r0, r1, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
	{   
		UART_putC(str[i]);
     63c:	53454c44 	movtpl	r4, #23620	; 0x5c44
     640:	50445f54 	subpl	r5, r4, r4, asr pc
     644:	505f4c4c 	subspl	r4, pc, ip, asr #24
     648:	43005245 	movwmi	r5, #581	; 0x245
     64c:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     650:	52505f52 	subspl	r5, r0, #328	; 0x148
		i++;
     654:	43495f55 	movtmi	r5, #40789	; 0x9f55
     658:	435f5353 	cmpmi	pc, #1275068417	; 0x4c000001
     65c:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
}

int UART_putString(char *str, unsigned int length)
{ 
	int i = 0;
	while( i < length)
     660:	47004c52 	smlsdmi	r0, r2, ip, r4
     664:	4320554e 	teqmi	r0, #327155712	; 0x13800000
     668:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
     66c:	4300332e 	movwmi	r3, #814	; 0x32e
	{   
		UART_putC(str[i]);
		i++;
	}   
	return length;
     670:	4c435f4d 	mcrrmi	15, 4, r5, r3, cr13
}
     674:	444f4d4b 	strbmi	r4, [pc], #-3403	; 67c <UART_putString+0x60>
     678:	50445f45 	subpl	r5, r4, r5, asr #30
     67c:	505f4c4c 	subspl	r4, pc, ip, asr #24

int UART_getString(char *buf, unsigned int length)
{
     680:	43005245 	movwmi	r5, #581	; 0x245
     684:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     688:	50475f52 	subpl	r5, r7, r2, asr pc
     68c:	5f314f49 	svcpl	0x00314f49
     690:	434b4c43 	movtmi	r4, #48195	; 0xbc43
	for(int i = 0; i < length; i ++)
     694:	004c5254 	subeq	r5, ip, r4, asr r2
     698:	435f4d43 	cmpmi	pc, #4288	; 0x10c0
     69c:	43444b4c 	movtmi	r4, #19276	; 0x4b4c
	{
		buf[i] = UART_getC();
     6a0:	4f444c4f 	svcmi	0x00444c4f
     6a4:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     6a8:	45505f4c 	ldrbmi	r5, [r0, #-3916]	; 0xf4c
     6ac:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
     6b0:	2074726f 	rsbscs	r7, r4, pc, ror #4
     6b4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
	return length;
}

int UART_getString(char *buf, unsigned int length)
{
	for(int i = 0; i < length; i ++)
     6b8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     6bc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     6c0:	5f4d4300 	svcpl	0x004d4300
     6c4:	5f524550 	svcpl	0x00524550
     6c8:	4f495047 	svcmi	0x00495047
     6cc:	4c435f32 	mcrrmi	15, 3, r5, r3, cr2
     6d0:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
	{
		buf[i] = UART_getC();
	}
	return length;
     6d4:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
}
     6d8:	5245505f 	subpl	r5, r5, #95	; 0x5f
     6dc:	494d455f 	stmdbmi	sp, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
     6e0:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
     6e4:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     6e8:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     6ec:	5245505f 	subpl	r5, r5, #95	; 0x5f
     6f0:	4d4c455f 	cfstr64mi	mvdx4, [ip, #-380]	; 0xfffffe84
     6f4:	4b4c435f 	blmi	1311478 <.LC0+0x1310d90>
     6f8:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     6fc:	5f4d4300 	svcpl	0x004d4300
     700:	4d4b4c43 	stclmi	12, cr4, [fp, #-268]	; 0xfffffef4
     704:	5f45444f 	svcpl	0x0045444f
     708:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     70c:	55504d5f 	ldrbpl	r4, [r0, #-3423]	; 0xd5f
     710:	5f4d4300 	svcpl	0x004d4300
     714:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     718:	5f4d4300 	svcpl	0x004d4300
     71c:	5f524550 	svcpl	0x00524550
     720:	4f495047 	svcmi	0x00495047
     724:	4c435f33 	mcrrmi	15, 3, r5, r3, cr3
     728:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     72c:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     730:	5245505f 	subpl	r5, r5, #95	; 0x5f
     734:	4c344c5f 	ldcmi	12, cr4, [r4], #-380	; 0xfffffe84
     738:	4c435f53 	mcrrmi	15, 5, r5, r3, cr3
     73c:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
     740:	004c5254 	subeq	r5, ip, r4, asr r2
     744:	505f4d43 	subspl	r4, pc, r3, asr #26
     748:	545f5245 	ldrbpl	r5, [pc], #-581	; 750 <.LC0+0x68>
     74c:	31435450 	cmpcc	r3, r0, asr r4
     750:	4b4c435f 	blmi	13114d4 <.LC0+0x1310dec>
     754:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     758:	5f4d4300 	svcpl	0x004d4300
     75c:	4f545541 	svcmi	0x00545541
     760:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
     764:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     768:	44445f4c 	strbmi	r5, [r4], #-3916	; 0xf4c
     76c:	4d430052 	stclmi	0, cr0, [r3, #-328]	; 0xfffffeb8
     770:	5f334c5f 	svcpl	0x00334c5f
     774:	5f4e4f41 	svcpl	0x004e4f41
     778:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     77c:	52544354 	subspl	r4, r4, #84, 6	; 0x50000001
     780:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     784:	4b4c435f 	blmi	1311508 <.LC0+0x1310e20>
     788:	5f4c4553 	svcpl	0x004c4553
     78c:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     790:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
     794:	5f4d4300 	svcpl	0x004d4300
     798:	5f435353 	svcpl	0x00435353
     79c:	46444f4d 	strbmi	r4, [r4], -sp, asr #30
     7a0:	44514552 	ldrbmi	r4, [r1], #-1362	; 0x552
     7a4:	445f5649 	ldrbmi	r5, [pc], #-1609	; 7ac <.LC0+0xc4>
     7a8:	5f4c4c50 	svcpl	0x004c4c50
     7ac:	45524f43 	ldrbmi	r4, [r2, #-3907]	; 0xf43
     7b0:	5f4d4300 	svcpl	0x004d4300
     7b4:	5f524550 	svcpl	0x00524550
     7b8:	43545054 	cmpmi	r4, #84	; 0x54
     7bc:	4c435f32 	mcrrmi	15, 3, r5, r3, cr2
     7c0:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     7c4:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     7c8:	5245505f 	subpl	r5, r5, #95	; 0x5f
     7cc:	4d434f5f 	stclmi	15, cr4, [r3, #-380]	; 0xfffffe84
     7d0:	4d415243 	sfmmi	f5, 2, [r1, #-268]	; 0xfffffef4
     7d4:	4b4c435f 	blmi	1311558 <.LC0+0x1310e70>
     7d8:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     7dc:	5f4d4300 	svcpl	0x004d4300
     7e0:	5f524550 	svcpl	0x00524550
     7e4:	4344434c 	movtmi	r4, #17228	; 0x434c
     7e8:	4b4c435f 	blmi	131156c <.LC0+0x1310e84>
     7ec:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     7f0:	5f4d4300 	svcpl	0x004d4300
     7f4:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
     7f8:	445f5453 	ldrbmi	r5, [pc], #-1107	; 800 <.LC0+0x118>
     7fc:	5f4c4c50 	svcpl	0x004c4c50
     800:	0055504d 	subseq	r5, r5, sp, asr #32
     804:	435f4d43 	cmpmi	pc, #4288	; 0x10c0
     808:	4f4d4b4c 	svcmi	0x004d4b4c
     80c:	445f4544 	ldrbmi	r4, [pc], #-1348	; 814 <.LC0+0x12c>
     810:	5f4c4c50 	svcpl	0x004c4c50
     814:	50534944 	subspl	r4, r3, r4, asr #18
     818:	5f4d4300 	svcpl	0x004d4300
     81c:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     820:	43004543 	movwmi	r4, #1347	; 0x543
     824:	504d5f4d 	subpl	r5, sp, sp, asr #30
     828:	4d430055 	stclmi	0, cr0, [r3, #-340]	; 0xfffffeac
     82c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     830:	5350435f 	cmppl	r0, #2080374785	; 0x7c000001
     834:	4c435f57 	mcrrmi	15, 5, r5, r3, cr7
     838:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
     83c:	004c5254 	subeq	r5, ip, r4, asr r2
     840:	535f4d43 	cmppl	pc, #4288	; 0x10c0
     844:	445f4353 	ldrbmi	r4, [pc], #-851	; 84c <.LC0+0x164>
     848:	41544c45 	cmpmi	r4, r5, asr #24
     84c:	4554534d 	ldrbmi	r5, [r4, #-845]	; 0x34d
     850:	50445f50 	subpl	r5, r4, r0, asr pc
     854:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; 85c <.LC0+0x174>
     858:	43005244 	movwmi	r5, #580	; 0x244
     85c:	4b575f4d 	blmi	15d8598 <.LC0+0x15d7eb0>
     860:	445f5055 	ldrbmi	r5, [pc], #-85	; 868 <.LC0+0x180>
     864:	47554245 	ldrbmi	r4, [r5, -r5, asr #4]
     868:	435f5353 	cmpmi	pc, #1275068417	; 0x4c000001
     86c:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     870:	43004c52 	movwmi	r4, #3154	; 0xc52
     874:	44495f4d 	strbmi	r5, [r9], #-3917	; 0xf4d
     878:	5453454c 	ldrbpl	r4, [r3], #-1356	; 0x54c
     87c:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     880:	49445f4c 	stmdbmi	r4, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     884:	43005053 	movwmi	r5, #83	; 0x53
     888:	46475f4d 	strbmi	r5, [r7], -sp, asr #30
     88c:	4d430058 	stclmi	0, cr0, [r3, #-352]	; 0xfffffea0
     890:	5f344c5f 	svcpl	0x00344c5f
     894:	50554b57 	subspl	r4, r5, r7, asr fp
     898:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
     89c:	4b4c435f 	blmi	1311620 <.LC0+0x1310f38>
     8a0:	54435453 	strbpl	r5, [r3], #-1107	; 0x453
     8a4:	43004c52 	movwmi	r4, #3154	; 0xc52
     8a8:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     8ac:	50545f52 	subspl	r5, r4, r2, asr pc
     8b0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     8b4:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     8b8:	43004c52 	movwmi	r4, #3154	; 0xc52
     8bc:	49445f4d 	stmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	324d5f56 	subcc	r5, sp, #344	; 0x158
     8c4:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     8c8:	49445f4c 	stmdbmi	r4, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     8cc:	43005053 	movwmi	r5, #83	; 0x53
     8d0:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     8d4:	344c5f52 	strbcc	r5, [ip], #-3922	; 0xf52
     8d8:	435f5348 	cmpmi	pc, #72, 6	; 0x20000001
     8dc:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     8e0:	43004c52 	movwmi	r4, #3154	; 0xc52
     8e4:	55415f4d 	strbpl	r5, [r1, #-3917]	; 0xf4d
     8e8:	44494f54 	strbmi	r4, [r9], #-3924	; 0xf54
     8ec:	445f454c 	ldrbmi	r4, [pc], #-1356	; 8f4 <.LC0+0x20c>
     8f0:	5f4c4c50 	svcpl	0x004c4c50
     8f4:	0055504d 	subseq	r5, r5, sp, asr #32
     8f8:	505f4d43 	subspl	r4, pc, r3, asr #26
     8fc:	455f5245 	ldrbmi	r5, [pc, #-581]	; 6bf <UART_getString+0x3f>
     900:	5f46494d 	svcpl	0x0046494d
     904:	435f5746 	cmpmi	pc, #18350080	; 0x1180000
     908:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     90c:	43004c52 	movwmi	r4, #3154	; 0xc52
     910:	4c435f4d 	mcrrmi	15, 4, r5, r3, cr13
     914:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
     918:	4c50445f 	cfldrdmi	mvd4, [r0], {95}	; 0x5f
     91c:	504d5f4c 	subpl	r5, sp, ip, asr #30
     920:	6c630055 	stclvs	0, cr0, [r3], #-340	; 0xfffffeac
     924:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     928:	4d430063 	stclmi	0, cr0, [r3, #-396]	; 0xfffffe74
     92c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
     930:	4c435f50 	mcrrmi	15, 5, r5, r3, cr0
     934:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
     938:	004c5254 	subeq	r5, ip, r4, asr r2
     93c:	445f4d43 	ldrbmi	r4, [pc], #-3395	; 944 <.LC0+0x25c>
     940:	4d5f5649 	ldclmi	6, cr5, [pc, #-292]	; 824 <.LC0+0x13c>
     944:	50445f32 	subpl	r5, r4, r2, lsr pc
     948:	505f4c4c 	subspl	r4, pc, ip, asr #24
     94c:	43005245 	movwmi	r5, #581	; 0x245
     950:	4b575f4d 	blmi	15d868c <.LC0+0x15d7fa4>
     954:	545f5055 	ldrbpl	r5, [pc], #-85	; 95c <.LC0+0x274>
     958:	52454d49 	subpl	r4, r5, #4672	; 0x1240
     95c:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
     960:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     964:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     968:	5245505f 	subpl	r5, r5, #95	; 0x5f
     96c:	4d50475f 	ldclmi	7, cr4, [r0, #-380]	; 0xfffffe84
     970:	4c435f43 	mcrrmi	15, 4, r5, r3, cr3
     974:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     978:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     97c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     980:	50434f5f 	subpl	r4, r3, pc, asr pc
     984:	4c5f5057 	mrrcmi	0, 5, r5, pc, cr7	; <UNPREDICTABLE>
     988:	4c435f33 	mcrrmi	15, 3, r5, r3, cr3
     98c:	4354534b 	cmpmi	r4, #738197505	; 0x2c000001
     990:	004c5254 	subeq	r5, ip, r4, asr r2
     994:	575f4d43 	ldrbpl	r4, [pc, -r3, asr #26]
     998:	5f50554b 	svcpl	0x0050554b
     99c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     9a0:	435f3152 	cmpmi	pc, #-2147483628	; 0x80000014
     9a4:	54434b4c 	strbpl	r4, [r3], #-2892	; 0xb4c
     9a8:	43004c52 	movwmi	r4, #3154	; 0xc52
     9ac:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     9b0:	434c5f52 	movtmi	r5, #53074	; 0xcf52
     9b4:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
     9b8:	54534b4c 	ldrbpl	r4, [r3], #-2892	; 0xb4c
     9bc:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     9c0:	5f4d4300 	svcpl	0x004d4300
     9c4:	5f524550 	svcpl	0x00524550
     9c8:	5f555250 	svcpl	0x00555250
     9cc:	53534349 	cmppl	r3, #603979777	; 0x24000001
     9d0:	4b4c435f 	blmi	1311754 <.LC0+0x131106c>
     9d4:	54435453 	strbpl	r5, [r3], #-1107	; 0x453
     9d8:	43004c52 	movwmi	r4, #3154	; 0xc52
     9dc:	45505f4d 	ldrbmi	r5, [r0, #-3917]	; 0xf4d
     9e0:	41555f52 	cmpmi	r5, r2, asr pc
     9e4:	5f315452 	svcpl	0x00315452
     9e8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     9ec:	004c5254 	subeq	r5, ip, r4, asr r2
     9f0:	415f4d43 	cmpmi	pc, r3, asr #26
     9f4:	494f5455 	stmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     9f8:	5f454c44 	svcpl	0x00454c44
     9fc:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     a00:	5349445f 	movtpl	r4, #37983	; 0x945f
     a04:	4d430050 	stclmi	0, cr0, [r3, #-320]	; 0xfffffec0
     a08:	4353535f 	cmpmi	r3, #2080374785	; 0x7c000001
     a0c:	444f4d5f 	strbmi	r4, [pc], #-3423	; a14 <.LC0+0x32c>
     a10:	51455246 	cmppl	r5, r6, asr #4
     a14:	5f564944 	svcpl	0x00564944
     a18:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     a1c:	5245505f 	subpl	r5, r5, #95	; 0x5f
     a20:	5f4d4300 	svcpl	0x004d4300
     a24:	50554b57 	subspl	r4, r5, r7, asr fp
     a28:	4344415f 	movtmi	r4, #16735	; 0x415f
     a2c:	4353545f 	cmpmi	r3, #1593835520	; 0x5f000000
     a30:	4b4c435f 	blmi	13117b4 <.LC0+0x13110cc>
     a34:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     a38:	5f4d4300 	svcpl	0x004d4300
     a3c:	5f435353 	svcpl	0x00435353
     a40:	46444f4d 	strbmi	r4, [r4], -sp, asr #30
     a44:	44514552 	ldrbmi	r4, [r1], #-1362	; 0x552
     a48:	445f5649 	ldrbmi	r5, [pc], #-1609	; a50 <.LC0+0x368>
     a4c:	5f4c4c50 	svcpl	0x004c4c50
     a50:	50534944 	subspl	r4, r3, r4, asr #18
     a54:	5f4d4300 	svcpl	0x004d4300
     a58:	5f524550 	svcpl	0x00524550
     a5c:	4d575045 	ldclmi	0, cr5, [r7, #-276]	; 0xfffffeec
     a60:	5f315353 	svcpl	0x00315353
     a64:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     a68:	004c5254 	subeq	r5, ip, r4, asr r2
     a6c:	505f4d43 	subspl	r4, pc, r3, asr #26
     a70:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	; 0x45
     a74:	4e495f33 	mcrmi	15, 2, r5, cr9, cr3, {1}
     a78:	5f525453 	svcpl	0x00525453
     a7c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     a80:	004c5254 	subeq	r5, ip, r4, asr r2
     a84:	505f4d43 	subspl	r4, pc, r3, asr #26
     a88:	555f5245 	ldrbpl	r5, [pc, #-581]	; 84b <.LC0+0x163>
     a8c:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     a90:	4b4c435f 	blmi	1311814 <.LC0+0x131112c>
     a94:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     a98:	5f4d4300 	svcpl	0x004d4300
     a9c:	50554b57 	subspl	r4, r5, r7, asr fp
     aa0:	57344c5f 			; <UNDEFINED> instruction: 0x57344c5f
     aa4:	5f50554b 	svcpl	0x0050554b
     aa8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     aac:	004c5254 	subeq	r5, ip, r4, asr r2
     ab0:	5f4b4c43 	svcpl	0x004b4c43
     ab4:	55444f4d 	strbpl	r4, [r4, #-3917]	; 0xf4d
     ab8:	745f454c 	ldrbvc	r4, [pc], #-1356	; ac0 <.LC0+0x3d8>
     abc:	5f4d4300 	svcpl	0x004d4300
     ac0:	50554b57 	subspl	r4, r5, r7, asr fp
     ac4:	4332495f 	teqmi	r2, #1556480	; 0x17c000
     ac8:	4c435f30 	mcrrmi	15, 3, r5, r3, cr0
     acc:	5254434b 	subspl	r4, r4, #738197505	; 0x2c000001
     ad0:	4d43004c 	stclmi	0, cr0, [r3, #-304]	; 0xfffffed0
     ad4:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
     ad8:	5f324d5f 	svcpl	0x00324d5f
     adc:	4c4c5044 	mcrrmi	0, 4, r5, ip, cr4
     ae0:	5244445f 	subpl	r4, r4, #1593835520	; 0x5f000000
     ae4:	5f4d4300 	svcpl	0x004d4300
     ae8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     aec:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     af0:	30615f63 	rsbcc	r5, r1, r3, ror #30
     af4:	5f4d4300 	svcpl	0x004d4300
     af8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     afc:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b00:	31615f63 	cmncc	r1, r3, ror #30
     b04:	5f4d4300 	svcpl	0x004d4300
     b08:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b0c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b10:	32615f63 	rsbcc	r5, r1, #396	; 0x18c
     b14:	5f4d4300 	svcpl	0x004d4300
     b18:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b1c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b20:	33615f63 	cmncc	r1, #396	; 0x18c
     b24:	5f4d4300 	svcpl	0x004d4300
     b28:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b2c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b30:	34615f63 	strbtcc	r5, [r1], #-3939	; 0xf63
     b34:	5f4d4300 	svcpl	0x004d4300
     b38:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b3c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b40:	35615f63 	strbcc	r5, [r1, #-3939]!	; 0xf63
     b44:	5f4d4300 	svcpl	0x004d4300
     b48:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b4c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b50:	36615f63 	strbtcc	r5, [r1], -r3, ror #30
     b54:	5f4d4300 	svcpl	0x004d4300
     b58:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b5c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b60:	37615f63 	strbcc	r5, [r1, -r3, ror #30]!
     b64:	5f4d4300 	svcpl	0x004d4300
     b68:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b6c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b70:	38615f63 	stmdacc	r1!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     b74:	5f4d4300 	svcpl	0x004d4300
     b78:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     b7c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     b80:	39615f63 	stmdbcc	r1!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     b84:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     b88:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 9c0 <.LC0+0x2d8>
     b8c:	646f6d5f 	strbtvs	r6, [pc], #-3423	; b94 <.LC0+0x4ac>
     b90:	2e656c75 	mcrcs	12, 3, r6, cr5, cr5, {3}
     b94:	4d430063 	stclmi	0, cr0, [r3, #-396]	; 0xfffffe74
     b98:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     b9c:	696d5f66 	stmdbvs	sp!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     ba0:	635f3169 	cmpvs	pc, #1073741850	; 0x4000001a
     ba4:	43007372 	movwmi	r7, #882	; 0x372
     ba8:	6f635f4d 	svcvs	0x00635f4d
     bac:	745f666e 	ldrbvc	r6, [pc], #-1646	; bb4 <.LC0+0x4cc>
     bb0:	5f636370 	svcpl	0x00636370
     bb4:	5f747665 	svcpl	0x00747665
     bb8:	5f78756d 	svcpl	0x0078756d
     bbc:	325f3032 	subscc	r3, pc, #50	; 0x32
     bc0:	4d430033 	stclmi	0, cr0, [r3, #-204]	; 0xffffff34
     bc4:	6d77705f 	ldclvs	0, cr7, [r7, #-380]!	; 0xfffffe84
     bc8:	635f7373 	cmpvs	pc, #-872415231	; 0xcc000001
     bcc:	006c7274 	rsbeq	r7, ip, r4, ror r2
     bd0:	735f4d43 	cmpvc	pc, #4288	; 0x10c0
     bd4:	74437465 	strbvc	r7, [r3], #-1125	; 0x465
     bd8:	6f4d6c72 	svcvs	0x004d6c72
     bdc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
     be0:	5f4d4300 	svcpl	0x004d4300
     be4:	73756665 	cmnvc	r5, #105906176	; 0x6500000
     be8:	6d735f65 	ldclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     bec:	4d430061 	stclmi	0, cr0, [r3, #-388]	; 0xfffffe7c
     bf0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     bf4:	70675f66 	rsbvc	r5, r7, r6, ror #30
     bf8:	635f636d 	cmpvs	pc, #-1275068415	; 0xb4000001
     bfc:	00316e73 	eorseq	r6, r1, r3, ror lr
     c00:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     c04:	5f666e6f 	svcpl	0x00666e6f
     c08:	636d7067 	cmnvs	sp, #103	; 0x67
     c0c:	6e73635f 	mrcvs	3, 3, r6, cr3, cr15, {2}
     c10:	4d430032 	stclmi	0, cr0, [r3, #-200]	; 0xffffff38
     c14:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     c18:	70675f66 	rsbvc	r5, r7, r6, ror #30
     c1c:	635f636d 	cmpvs	pc, #-1275068415	; 0xb4000001
     c20:	00336e73 	eorseq	r6, r3, r3, ror lr
     c24:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     c28:	5f666e6f 	svcpl	0x00666e6f
     c2c:	636d7067 	cmnvs	sp, #103	; 0x67
     c30:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     c34:	43003074 	movwmi	r3, #116	; 0x74
     c38:	6f635f4d 	svcvs	0x00635f4d
     c3c:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
     c40:	5f636d70 	svcpl	0x00636d70
     c44:	00306461 	eorseq	r6, r0, r1, ror #8
     c48:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     c4c:	5f666e6f 	svcpl	0x00666e6f
     c50:	636d7067 	cmnvs	sp, #103	; 0x67
     c54:	3164615f 	cmncc	r4, pc, asr r1
     c58:	5f4d4300 	svcpl	0x004d4300
     c5c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     c60:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     c64:	64615f63 	strbtvs	r5, [r1], #-3939	; 0xf63
     c68:	4d430032 	stclmi	0, cr0, [r3, #-200]	; 0xffffff38
     c6c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     c70:	70675f66 	rsbvc	r5, r7, r6, ror #30
     c74:	615f636d 	cmpvs	pc, sp, ror #6
     c78:	43003364 	movwmi	r3, #868	; 0x364
     c7c:	6f635f4d 	svcvs	0x00635f4d
     c80:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
     c84:	5f636d70 	svcpl	0x00636d70
     c88:	00346461 	eorseq	r6, r4, r1, ror #8
     c8c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     c90:	5f666e6f 	svcpl	0x00666e6f
     c94:	636d7067 	cmnvs	sp, #103	; 0x67
     c98:	3564615f 	strbcc	r6, [r4, #-351]!	; 0x15f
     c9c:	5f4d4300 	svcpl	0x004d4300
     ca0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     ca4:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
     ca8:	64615f63 	strbtvs	r5, [r1], #-3939	; 0xf63
     cac:	4d430036 	stclmi	0, cr0, [r3, #-216]	; 0xffffff28
     cb0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     cb4:	70675f66 	rsbvc	r5, r7, r6, ror #30
     cb8:	615f636d 	cmpvs	pc, sp, ror #6
     cbc:	43003764 	movwmi	r3, #1892	; 0x764
     cc0:	6f635f4d 	svcvs	0x00635f4d
     cc4:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
     cc8:	5f636d70 	svcpl	0x00636d70
     ccc:	00386461 	eorseq	r6, r8, r1, ror #8
     cd0:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     cd4:	5f666e6f 	svcpl	0x00666e6f
     cd8:	636d7067 	cmnvs	sp, #103	; 0x67
     cdc:	3964615f 	stmdbcc	r4!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     ce0:	5f4d4300 	svcpl	0x004d4300
     ce4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     ce8:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
     cec:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
     cf0:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
     cf4:	5f305f78 	svcpl	0x00305f78
     cf8:	4d430033 	stclmi	0, cr0, [r3, #-204]	; 0xffffff34
     cfc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     d00:	63655f66 	cmnvs	r5, #408	; 0x198
     d04:	5f307061 	svcpl	0x00307061
     d08:	705f6e69 	subsvc	r6, pc, r9, ror #28
     d0c:	5f306d77 	svcpl	0x00306d77
     d10:	0074756f 	rsbseq	r7, r4, pc, ror #10
     d14:	74726155 	ldrbtvc	r6, [r2], #-341	; 0x155
     d18:	754d5f30 	strbvc	r5, [sp, #-3888]	; 0xf30
     d1c:	4d430078 	stclmi	0, cr0, [r3, #-480]	; 0xfffffe20
     d20:	6e61625f 	mcrvs	2, 3, r6, cr1, cr15, {2}
     d24:	70616764 	rsbvc	r6, r1, r4, ror #14
     d28:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     d2c:	4d43006c 	stclmi	0, cr0, [r3, #-432]	; 0xfffffe50
     d30:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     d34:	636c5f66 	cmnvs	ip, #408	; 0x198
     d38:	61645f64 	cmnvs	r4, r4, ror #30
     d3c:	30316174 	eorscc	r6, r1, r4, ror r1
     d40:	5f4d4300 	svcpl	0x004d4300
     d44:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     d48:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
     d4c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     d50:	00313161 	eorseq	r3, r1, r1, ror #2
     d54:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     d58:	5f666e6f 	svcpl	0x00666e6f
     d5c:	5f64636c 	svcpl	0x0064636c
     d60:	61746164 	cmnvs	r4, r4, ror #2
     d64:	43003231 	movwmi	r3, #561	; 0x231
     d68:	6f635f4d 	svcvs	0x00635f4d
     d6c:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
     d70:	645f6463 	ldrbvs	r6, [pc], #-1123	; d78 <.LC0+0x690>
     d74:	31617461 	cmncc	r1, r1, ror #8
     d78:	4d430033 	stclmi	0, cr0, [r3, #-204]	; 0xffffff34
     d7c:	65726d5f 	ldrbvs	r6, [r2, #-3423]!	; 0xd5f
     d80:	69727067 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, ip, sp, lr}^
     d84:	00305f6f 	eorseq	r5, r0, pc, ror #30
     d88:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     d8c:	5f666e6f 	svcpl	0x00666e6f
     d90:	5f64636c 	svcpl	0x0064636c
     d94:	61746164 	cmnvs	r4, r4, ror #2
     d98:	43003531 	movwmi	r3, #1329	; 0x531
     d9c:	6f635f4d 	svcvs	0x00635f4d
     da0:	6e5f666e 	cdpvs	6, 5, cr6, cr15, cr14, {3}
     da4:	00696d6e 	rsbeq	r6, r9, lr, ror #26
     da8:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     dac:	5f666e6f 	svcpl	0x00666e6f
     db0:	63637074 	cmnvs	r3, #116	; 0x74
     db4:	7476655f 	ldrbtvc	r6, [r6], #-1375	; 0x55f
     db8:	78756d5f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     dbc:	5f36335f 	svcpl	0x0036335f
     dc0:	43003933 	movwmi	r3, #2355	; 0x933
     dc4:	6f635f4d 	svcvs	0x00635f4d
     dc8:	745f666e 	ldrbvc	r6, [pc], #-1646	; dd0 <.LC0+0x6e8>
     dcc:	5f636370 	svcpl	0x00636370
     dd0:	5f747665 	svcpl	0x00747665
     dd4:	5f78756d 	svcpl	0x0078756d
     dd8:	315f3631 	cmpcc	pc, r1, lsr r6	; <UNPREDICTABLE>
     ddc:	4d430039 	stclmi	0, cr0, [r3, #-228]	; 0xffffff1c
     de0:	5f62625f 	svcpl	0x0062625f
     de4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     de8:	4d430065 	stclmi	0, cr0, [r3, #-404]	; 0xfffffe6c
     dec:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     df0:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     df4:	5f72656d 	svcpl	0x0072656d
     df8:	5f747665 	svcpl	0x00747665
     dfc:	74706163 	ldrbtvc	r6, [r0], #-355	; 0x163
     e00:	5f4d4300 	svcpl	0x004d4300
     e04:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     e08:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     e0c:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     e10:	50006f73 	andpl	r6, r0, r3, ror pc
     e14:	735f4441 	cmpvc	pc, #1090519040	; 0x41000000
     e18:	6f4d7465 	svcvs	0x004d7465
     e1c:	43006564 	movwmi	r6, #1380	; 0x564
     e20:	6f635f4d 	svcvs	0x00635f4d
     e24:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
     e28:	645f6463 	ldrbvs	r6, [pc], #-1123	; e30 <.LC0+0x748>
     e2c:	30617461 	rsbcc	r7, r1, r1, ror #8
     e30:	5f4d4300 	svcpl	0x004d4300
     e34:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     e38:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
     e3c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     e40:	43003161 	movwmi	r3, #353	; 0x161
     e44:	6f635f4d 	svcvs	0x00635f4d
     e48:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
     e4c:	645f6463 	ldrbvs	r6, [pc], #-1123	; e54 <.LC0+0x76c>
     e50:	32617461 	rsbcc	r7, r1, #1627389952	; 0x61000000
     e54:	5f4d4300 	svcpl	0x004d4300
     e58:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     e5c:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
     e60:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     e64:	43003361 	movwmi	r3, #865	; 0x361
     e68:	6f635f4d 	svcvs	0x00635f4d
     e6c:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
     e70:	645f6463 	ldrbvs	r6, [pc], #-1123	; e78 <.LC0+0x790>
     e74:	34617461 	strbtcc	r7, [r1], #-1121	; 0x461
     e78:	5f4d4300 	svcpl	0x004d4300
     e7c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     e80:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
     e84:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     e88:	43003561 	movwmi	r3, #1377	; 0x561
     e8c:	6f635f4d 	svcvs	0x00635f4d
     e90:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
     e94:	645f6463 	ldrbvs	r6, [pc], #-1123	; e9c <.LC0+0x7b4>
     e98:	36617461 	strbtcc	r7, [r1], -r1, ror #8
     e9c:	5f4d4300 	svcpl	0x004d4300
     ea0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     ea4:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
     ea8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     eac:	43003761 	movwmi	r3, #1889	; 0x761
     eb0:	6d735f4d 	ldclvs	15, cr5, [r3, #-308]!	; 0xfffffecc
     eb4:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
     eb8:	006c7274 	rsbeq	r7, ip, r4, ror r2
     ebc:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     ec0:	5f666e6f 	svcpl	0x00666e6f
     ec4:	5f64636c 	svcpl	0x0064636c
     ec8:	61746164 	cmnvs	r4, r4, ror #2
     ecc:	4d430039 	stclmi	0, cr0, [r3, #-228]	; 0xffffff1c
     ed0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     ed4:	61755f66 	cmnvs	r5, r6, ror #30
     ed8:	5f307472 	svcpl	0x00307472
     edc:	6e737472 	mrcvs	4, 3, r7, cr3, cr2, {3}
     ee0:	5f4d4300 	svcpl	0x004d4300
     ee4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     ee8:	7264645f 	rsbvc	r6, r4, #1593835520	; 0x5f000000
     eec:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
     ef0:	695f3161 	ldmdbvs	pc, {r0, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     ef4:	7274636f 	rsbsvc	r6, r4, #-1140850687	; 0xbc000001
     ef8:	4d43006c 	stclmi	0, cr0, [r3, #-432]	; 0xfffffe50
     efc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     f00:	70675f66 	rsbvc	r5, r7, r6, ror #30
     f04:	615f636d 	cmpvs	pc, sp, ror #6
     f08:	5f6e7664 	svcpl	0x006e7664
     f0c:	00656c61 	rsbeq	r6, r5, r1, ror #24
     f10:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     f14:	5f666e6f 	svcpl	0x00666e6f
     f18:	5f637069 	svcpl	0x00637069
     f1c:	5f67736d 	svcpl	0x0067736d
     f20:	37676572 			; <UNDEFINED> instruction: 0x37676572
     f24:	5f4d4300 	svcpl	0x004d4300
     f28:	6c6c7064 	stclvs	0, cr7, [ip], #-400	; 0xfffffe70
     f2c:	7277705f 	rsbsvc	r7, r7, #95	; 0x5f
     f30:	5f77735f 	svcpl	0x0077735f
     f34:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     f38:	43007375 	movwmi	r7, #885	; 0x375
     f3c:	6e695f4d 	cdpvs	15, 6, cr5, cr9, cr13, {2}
     f40:	705f7469 	subsvc	r7, pc, r9, ror #8
     f44:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     f48:	5f797469 	svcpl	0x00797469
     f4c:	4d430030 	stclmi	0, cr0, [r3, #-192]	; 0xffffff40
     f50:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     f54:	646d5f66 	strbtvs	r5, [sp], #-3942	; 0xf66
     f58:	4d430063 	stclmi	0, cr0, [r3, #-396]	; 0xfffffe74
     f5c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     f60:	696d5f66 	stmdbvs	sp!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f64:	745f3169 	ldrbvc	r3, [pc], #-361	; f6c <.LC0+0x884>
     f68:	6c635f78 	stclvs	15, cr5, [r3], #-480	; 0xfffffe20
     f6c:	4d43006b 	stclmi	0, cr0, [r3, #-428]	; 0xfffffe54
     f70:	75706d5f 	ldrbvc	r6, [r0, #-3423]!	; 0xd5f
     f74:	646c735f 	strbtvs	r7, [ip], #-863	; 0x35f
     f78:	74635f6f 	strbtvc	r5, [r3], #-3951	; 0xf6f
     f7c:	43006c72 	movwmi	r6, #3186	; 0xc72
     f80:	6f635f4d 	svcvs	0x00635f4d
     f84:	655f666e 	ldrbvs	r6, [pc, #-1646]	; 91e <.LC0+0x236>
     f88:	0030756d 	eorseq	r7, r0, sp, ror #10
     f8c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     f90:	5f666e6f 	svcpl	0x00666e6f
     f94:	31756d65 	cmncc	r5, r5, ror #26
     f98:	4e4f4300 	cdpmi	3, 4, cr4, cr15, cr0, {0}
     f9c:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
     fa0:	444f4d5f 	strbmi	r4, [pc], #-3423	; fa8 <.LC0+0x8c0>
     fa4:	5f454c55 	svcpl	0x00454c55
     fa8:	5f474552 	svcpl	0x00474552
     fac:	4d430074 	stclmi	0, cr0, [r3, #-464]	; 0xfffffe30
     fb0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     fb4:	636c5f66 	cmnvs	ip, #408	; 0x198
     fb8:	63705f64 	cmnvs	r0, #100, 30	; 0x190
     fbc:	43006b6c 	movwmi	r6, #2924	; 0xb6c
     fc0:	6f635f4d 	svcvs	0x00635f4d
     fc4:	725f666e 	subsvc	r6, pc, #115343360	; 0x6e00000
     fc8:	6b5f6374 	blvs	17d9da0 <.LC0+0x17d96b8>
     fcc:	6f646c61 	svcvs	0x00646c61
     fd0:	6e6e655f 	mcrvs	5, 3, r6, cr14, cr15, {2}
     fd4:	5f4d4300 	svcpl	0x004d4300
     fd8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     fdc:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
     fe0:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
     fe4:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
     fe8:	38325f78 	ldmdacc	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
     fec:	0031335f 	eorseq	r3, r1, pc, asr r3
     ff0:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
     ff4:	5f666e6f 	svcpl	0x00666e6f
     ff8:	30636d6d 	rsbcc	r6, r3, sp, ror #26
     ffc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
    1000:	4d430030 	stclmi	0, cr0, [r3, #-192]	; 0xffffff40
    1004:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1008:	6d6d5f66 	stclvs	15, cr5, [sp, #-408]!	; 0xfffffe68
    100c:	645f3063 	ldrbvs	r3, [pc], #-99	; 1014 <.LC0+0x92c>
    1010:	00317461 	eorseq	r7, r1, r1, ror #8
    1014:	685f4d43 	ldmdavs	pc, {r0, r1, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1018:	76655f77 	uqsub16vc	r5, r5, r7
    101c:	5f746e65 	svcpl	0x00746e65
    1020:	5f6c6573 	svcpl	0x006c6573
    1024:	31707267 	cmncc	r0, r7, ror #4
    1028:	5f4d4300 	svcpl	0x004d4300
    102c:	655f7768 	ldrbvs	r7, [pc, #-1896]	; 8cc <.LC0+0x1e4>
    1030:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1034:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    1038:	7072675f 	rsbsvc	r6, r2, pc, asr r7
    103c:	4d430032 	stclmi	0, cr0, [r3, #-200]	; 0xffffff38
    1040:	5f77685f 	svcpl	0x0077685f
    1044:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    1048:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xf74
    104c:	72675f6c 	rsbvc	r5, r7, #108, 30	; 0x1b0
    1050:	43003370 	movwmi	r3, #880	; 0x370
    1054:	77685f4d 	strbvc	r5, [r8, -sp, asr #30]!
    1058:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    105c:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
    1060:	675f6c65 	ldrbvs	r6, [pc, -r5, ror #24]
    1064:	00347072 	eorseq	r7, r4, r2, ror r0
    1068:	645f4d43 	ldrbvs	r4, [pc], #-3395	; 1070 <.LC0+0x988>
    106c:	73706565 	cmnvc	r0, #423624704	; 0x19400000
    1070:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1074:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    1078:	4d43006c 	stclmi	0, cr0, [r3, #-432]	; 0xfffffe50
    107c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1080:	70675f66 	rsbvc	r5, r7, r6, ror #30
    1084:	775f636d 	ldrbvc	r6, [pc, -sp, ror #6]
    1088:	43006e70 	movwmi	r6, #3696	; 0xe70
    108c:	6f635f4d 	svcvs	0x00635f4d
    1090:	705f666e 	subsvc	r6, pc, lr, ror #12
    1094:	5f63696d 	svcpl	0x0063696d
    1098:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xf70
    109c:	6e655f72 	mcrvs	15, 3, r5, cr5, cr2, {3}
    10a0:	5f4d4300 	svcpl	0x004d4300
    10a4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    10a8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    10ac:	725f3174 	subsvc	r3, pc, #116, 2
    10b0:	006e7374 	rsbeq	r7, lr, r4, ror r3
    10b4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    10b8:	5f666e6f 	svcpl	0x00666e6f
    10bc:	6d726177 	ldfvse	f6, [r2, #-476]!	; 0xfffffe24
    10c0:	6e747372 	mrcvs	3, 3, r7, cr4, cr2, {3}
    10c4:	5f4d4300 	svcpl	0x004d4300
    10c8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    10cc:	636d6d5f 	cmnvs	sp, #6080	; 0x17c0
    10d0:	6c635f30 	stclvs	15, cr5, [r3], #-192	; 0xffffff40
    10d4:	4d43006b 	stclmi	0, cr0, [r3, #-428]	; 0xfffffe54
    10d8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    10dc:	6d745f66 	ldclvs	15, cr5, [r4, #-408]!	; 0xfffffe68
    10e0:	4d430073 	stclmi	0, cr0, [r3, #-460]	; 0xfffffe34
    10e4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    10e8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    10ec:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xf4d
    10f0:	4300656c 	movwmi	r6, #1388	; 0x56c
    10f4:	6f635f4d 	svcvs	0x00635f4d
    10f8:	615f666e 	cmpvs	pc, lr, ror #12
    10fc:	655f6364 	ldrbvs	r6, [pc, #-868]	; da0 <.LC0+0x6b8>
    1100:	635f7476 	cmpvs	pc, #1979711488	; 0x76000000
    1104:	00747061 	rsbseq	r7, r4, r1, rrx
    1108:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    110c:	5f666e6f 	svcpl	0x00666e6f
    1110:	636d7067 	cmnvs	sp, #103	; 0x67
    1114:	6e65775f 	mcrvs	7, 3, r7, cr5, cr15, {2}
    1118:	5f4d4300 	svcpl	0x004d4300
    111c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1120:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
    1124:	73635f63 	cmnvc	r3, #396	; 0x18c
    1128:	4300306e 	movwmi	r3, #110	; 0x6e
    112c:	6f635f4d 	svcvs	0x00635f4d
    1130:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
    1134:	5f636d70 	svcpl	0x00636d70
    1138:	00303161 	eorseq	r3, r0, r1, ror #2
    113c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1140:	5f666e6f 	svcpl	0x00666e6f
    1144:	5f726464 	svcpl	0x00726464
    1148:	61746164 	cmnvs	r4, r4, ror #2
    114c:	6f695f30 	svcvs	0x00695f30
    1150:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1154:	5f4d4300 	svcpl	0x004d4300
    1158:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
    115c:	765f7865 	ldrbvc	r7, [pc], -r5, ror #16
    1160:	646c6262 	strbtvs	r6, [ip], #-610	; 0x262
    1164:	74635f6f 	strbtvc	r5, [r3], #-3951	; 0xf6f
    1168:	43006c72 	movwmi	r6, #3186	; 0xc72
    116c:	64765f4d 	ldrbtvs	r5, [r6], #-3917	; 0xf4d
    1170:	706d5f64 	rsbvc	r5, sp, r4, ror #30
    1174:	706f5f75 	rsbvc	r5, pc, r5, ror pc	; <UNPREDICTABLE>
    1178:	35305f70 	ldrcc	r5, [r0, #-3952]!	; 0xf70
    117c:	4d430030 	stclmi	0, cr0, [r3, #-192]	; 0xffffff40
    1180:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1184:	61755f66 	cmnvs	r5, r6, ror #30
    1188:	5f317472 	svcpl	0x00317472
    118c:	00647874 	rsbeq	r7, r4, r4, ror r8
    1190:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1194:	5f666e6f 	svcpl	0x00666e6f
    1198:	63637074 	cmnvs	r3, #116	; 0x74
    119c:	7476655f 	ldrbtvc	r6, [r6], #-1375	; 0x55f
    11a0:	78756d5f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    11a4:	315f385f 	cmpcc	pc, pc, asr r8	; <UNPREDICTABLE>
    11a8:	4d430031 	stclmi	0, cr0, [r3, #-196]	; 0xffffff3c
    11ac:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    11b0:	3164695f 	cmncc	r4, pc, asr r9
    11b4:	006f6c5f 	rsbeq	r6, pc, pc, asr ip	; <UNPREDICTABLE>
    11b8:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    11bc:	5f666e6f 	svcpl	0x00666e6f
    11c0:	7361636d 	cmnvc	r1, #-1275068415	; 0xb4000001
    11c4:	665f3070 			; <UNDEFINED> instruction: 0x665f3070
    11c8:	43007273 	movwmi	r7, #627	; 0x273
    11cc:	64765f4d 	ldrbtvs	r5, [r6], #-3917	; 0xf4d
    11d0:	6f635f64 	svcvs	0x00635f64
    11d4:	6f5f6572 	svcvs	0x005f6572
    11d8:	305f7070 	subscc	r7, pc, r0, ror r0	; <UNPREDICTABLE>
    11dc:	43003035 	movwmi	r3, #53	; 0x35
    11e0:	61625f4d 	cmnvs	r2, sp, asr #30
    11e4:	6167646e 	cmnvs	r7, lr, ror #8
    11e8:	72745f70 	rsbsvc	r5, r4, #112, 30	; 0x1c0
    11ec:	43006d69 	movwmi	r6, #3433	; 0xd69
    11f0:	6f635f4d 	svcvs	0x00635f4d
    11f4:	645f666e 	ldrbvs	r6, [pc], #-1646	; 11fc <.LC0+0xb14>
    11f8:	695f7264 	ldmdbvs	pc, {r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    11fc:	74635f6f 	strbtvc	r5, [r3], #-3951	; 0xf6f
    1200:	43006c72 	movwmi	r6, #3186	; 0xc72
    1204:	6f635f4d 	svcvs	0x00635f4d
    1208:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 1058 <.LC0+0x970>
    120c:	70736163 	rsbsvc	r6, r3, r3, ror #2
    1210:	73665f30 	cmnvc	r6, #48, 30	; 0xc0
    1214:	4d430078 	stclmi	0, cr0, [r3, #-480]	; 0xfffffe20
    1218:	7470745f 	ldrbtvc	r7, [r0], #-1119	; 0x45f
    121c:	66635f63 	strbtvs	r5, [r3], -r3, ror #30
    1220:	4d430067 	stclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    1224:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1228:	6d6d5f66 	stclvs	15, cr5, [sp, #-408]!	; 0xfffffe68
    122c:	635f3063 	cmpvs	pc, #99	; 0x63
    1230:	4300646d 	movwmi	r6, #1133	; 0x46d
    1234:	6f635f4d 	svcvs	0x00635f4d
    1238:	725f666e 	subsvc	r6, pc, #115343360	; 0x6e00000
    123c:	705f6374 	subsvc	r6, pc, r4, ror r3	; <UNPREDICTABLE>
    1240:	6e6f7277 	mcrvs	2, 3, r7, cr15, cr7, {3}
    1244:	6e747372 	mrcvs	3, 3, r7, cr4, cr2, {3}
    1248:	5f4d4300 	svcpl	0x004d4300
    124c:	5f63616d 	svcpl	0x0063616d
    1250:	5f316469 	svcpl	0x00316469
    1254:	43006968 	movwmi	r6, #2408	; 0x968
    1258:	6f635f4d 	svcvs	0x00635f4d
    125c:	655f666e 	ldrbvs	r6, [pc, #-1646]	; bf6 <.LC0+0x50e>
    1260:	775f7478 			; <UNDEFINED> instruction: 0x775f7478
    1264:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xb61
    1268:	4d430070 	stclmi	0, cr0, [r3, #-448]	; 0xfffffe40
    126c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1270:	696d5f66 	stmdbvs	sp!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1274:	725f3169 	subsvc	r3, pc, #1073741850	; 0x4000001a
    1278:	76645f78 	uqsub16vc	r5, r4, r8
    127c:	5f4d4300 	svcpl	0x004d4300
    1280:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1284:	7264645f 	rsbvc	r6, r4, #1593835520	; 0x5f000000
    1288:	646d635f 	strbtvs	r6, [sp], #-863	; 0x35f
    128c:	6f695f32 	svcvs	0x00695f32
    1290:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1294:	5f4d4300 	svcpl	0x004d4300
    1298:	7375706d 	cmnvc	r5, #109	; 0x6d
    129c:	77685f73 			; <UNDEFINED> instruction: 0x77685f73
    12a0:	6265645f 	rsbvs	r6, r5, #1593835520	; 0x5f000000
    12a4:	735f6775 	cmpvc	pc, #30670848	; 0x1d40000
    12a8:	43006c65 	movwmi	r6, #3173	; 0xc65
    12ac:	6f635f4d 	svcvs	0x00635f4d
    12b0:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 1100 <.LC0+0xa18>
    12b4:	5f316969 	svcpl	0x00316969
    12b8:	32647872 	rsbcc	r7, r4, #7471104	; 0x720000
    12bc:	5f4d4300 	svcpl	0x004d4300
    12c0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    12c4:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
    12c8:	65625f63 	strbvs	r5, [r2, #-3939]!	; 0xf63
    12cc:	635f306e 	cmpvs	pc, #110	; 0x6e
    12d0:	4300656c 	movwmi	r6, #1388	; 0x56c
    12d4:	6f635f4d 	svcvs	0x00635f4d
    12d8:	735f666e 	cmpvc	pc, #115343360	; 0x6e00000
    12dc:	5f306970 	svcpl	0x00306970
    12e0:	00307363 	eorseq	r7, r0, r3, ror #6
    12e4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    12e8:	5f666e6f 	svcpl	0x00666e6f
    12ec:	30697073 	rsbcc	r7, r9, r3, ror r0
    12f0:	3173635f 	cmncc	r3, pc, asr r3
    12f4:	5f4d4300 	svcpl	0x004d4300
    12f8:	7375706d 	cmnvc	r5, #109	; 0x6d
    12fc:	77685f73 			; <UNDEFINED> instruction: 0x77685f73
    1300:	6762645f 			; <UNDEFINED> instruction: 0x6762645f
    1304:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    1308:	4d43006f 	stclmi	0, cr0, [r3, #-444]	; 0xfffffe44
    130c:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    1310:	3064695f 	rsbcc	r6, r4, pc, asr r9
    1314:	006f6c5f 	rsbeq	r6, pc, pc, asr ip	; <UNPREDICTABLE>
    1318:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    131c:	5f666e6f 	svcpl	0x00666e6f
    1320:	745f336d 	ldrbvc	r3, [pc], #-877	; 1328 <.LC0+0xc40>
    1324:	5f766578 	svcpl	0x00766578
    1328:	00696f65 	rsbeq	r6, r9, r5, ror #30
    132c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1330:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1334:	685f6c6f 	ldmdavs	pc, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1338:	666e6977 			; <UNDEFINED> instruction: 0x666e6977
    133c:	4d43006f 	stclmi	0, cr0, [r3, #-444]	; 0xfffffe44
    1340:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1344:	636c5f66 	cmnvs	ip, #408	; 0x198
    1348:	63615f64 	cmnvs	r1, #100, 30	; 0x190
    134c:	6169625f 	cmnvs	r9, pc, asr r2
    1350:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
    1354:	5f4d4300 	svcpl	0x004d4300
    1358:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    135c:	6163655f 	cmnvs	r3, pc, asr r5
    1360:	76655f70 	uqsub16vc	r5, r5, r0
    1364:	61635f74 	smcvs	13812	; 0x35f4
    1368:	43007470 	movwmi	r7, #1136	; 0x470
    136c:	64765f4d 	ldrbtvs	r5, [r6], #-3917	; 0xf4d
    1370:	706d5f64 	rsbvc	r5, sp, r4, ror #30
    1374:	706f5f75 	rsbvc	r5, pc, r5, ror pc	; <UNPREDICTABLE>
    1378:	30315f70 	eorscc	r5, r1, r0, ror pc
    137c:	4d430030 	stclmi	0, cr0, [r3, #-192]	; 0xffffff40
    1380:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1384:	646d5f66 	strbtvs	r5, [sp], #-3942	; 0xf66
    1388:	43006f69 	movwmi	r6, #3945	; 0xf69
    138c:	6f635f4d 	svcvs	0x00635f4d
    1390:	645f666e 	ldrbvs	r6, [pc], #-1646	; 1398 <.LC0+0xcb0>
    1394:	635f7264 	cmpvs	pc, #100, 4	; 0x40000006
    1398:	5f31646d 	svcpl	0x0031646d
    139c:	74636f69 	strbtvc	r6, [r3], #-3945	; 0xf69
    13a0:	43006c72 	movwmi	r6, #3186	; 0xc72
    13a4:	6f635f4d 	svcvs	0x00635f4d
    13a8:	745f666e 	ldrbvc	r6, [pc], #-1646	; 13b0 <.LC0+0xcc8>
    13ac:	6e747372 	mrcvs	3, 3, r7, cr4, cr2, {3}
    13b0:	5f4d4300 	svcpl	0x004d4300
    13b4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    13b8:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
    13bc:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
    13c0:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
    13c4:	32355f78 	eorscc	r5, r5, #120, 30	; 0x1e0
    13c8:	0035355f 	eorseq	r3, r5, pc, asr r5
    13cc:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    13d0:	5f666e6f 	svcpl	0x00666e6f
    13d4:	63637074 	cmnvs	r3, #116	; 0x74
    13d8:	7476655f 	ldrbtvc	r6, [r6], #-1375	; 0x55f
    13dc:	78756d5f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    13e0:	5f30345f 	svcpl	0x0030345f
    13e4:	43003334 	movwmi	r3, #820	; 0x334
    13e8:	64765f4d 	ldrbtvs	r5, [r6], #-3917	; 0xf4d
    13ec:	6f635f64 	svcvs	0x00635f64
    13f0:	6f5f6572 	svcvs	0x005f6572
    13f4:	315f7070 	cmpcc	pc, r0, ror r0	; <UNPREDICTABLE>
    13f8:	43003030 	movwmi	r3, #48	; 0x30
    13fc:	6f635f4d 	svcvs	0x00635f4d
    1400:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 1250 <.LC0+0xb68>
    1404:	5f316969 	svcpl	0x00316969
    1408:	635f7872 	cmpvs	pc, #7471104	; 0x720000
    140c:	43006b6c 	movwmi	r6, #2924	; 0xb6c
    1410:	726d5f4d 	rsbvc	r5, sp, #308	; 0x134
    1414:	72707165 	rsbsvc	r7, r0, #1073741849	; 0x40000019
    1418:	315f6f69 	cmpcc	pc, r9, ror #30
    141c:	5f4d4300 	svcpl	0x004d4300
    1420:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1424:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
    1428:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
    142c:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
    1430:	32335f78 	eorscc	r5, r3, #120, 30	; 0x1e0
    1434:	0035335f 	eorseq	r3, r5, pc, asr r3
    1438:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    143c:	5f666e6f 	svcpl	0x00666e6f
    1440:	63637074 	cmnvs	r3, #116	; 0x74
    1444:	7476655f 	ldrbtvc	r6, [r6], #-1375	; 0x55f
    1448:	78756d5f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    144c:	5f32315f 	svcpl	0x0032315f
    1450:	43003531 	movwmi	r3, #1329	; 0x531
    1454:	6f635f4d 	svcvs	0x00635f4d
    1458:	635f666e 	cmpvs	pc, #115343360	; 0x6e00000
    145c:	74656471 	strbtvc	r6, [r5], #-1137	; 0x471
    1460:	5f746365 	svcpl	0x00746365
    1464:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1468:	43007375 	movwmi	r7, #885	; 0x375
    146c:	6f635f4d 	svcvs	0x00635f4d
    1470:	755f666e 	ldrbvc	r6, [pc, #-1646]	; e0a <.LC0+0x722>
    1474:	30747261 	rsbscc	r7, r4, r1, ror #4
    1478:	6478725f 	ldrbtvs	r7, [r8], #-607	; 0x25f
    147c:	5f4d4300 	svcpl	0x004d4300
    1480:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1484:	69696d5f 	stmdbvs	r9!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1488:	78725f31 	ldmdavc	r2!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    148c:	0072655f 	rsbseq	r6, r2, pc, asr r5
    1490:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1494:	5f666e6f 	svcpl	0x00666e6f
    1498:	30636d6d 	rsbcc	r6, r3, sp, ror #26
    149c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0x45f
    14a0:	4d430032 	stclmi	0, cr0, [r3, #-200]	; 0xffffff38
    14a4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    14a8:	6d6d5f66 	stclvs	15, cr5, [sp, #-408]!	; 0xfffffe68
    14ac:	645f3063 	ldrbvs	r3, [pc], #-99	; 14b4 <.LC0+0xdcc>
    14b0:	00337461 	eorseq	r7, r3, r1, ror #8
    14b4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    14b8:	5f666e6f 	svcpl	0x00666e6f
    14bc:	63637074 	cmnvs	r3, #116	; 0x74
    14c0:	7476655f 	ldrbtvc	r6, [r6], #-1375	; 0x55f
    14c4:	78756d5f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    14c8:	5f34325f 	svcpl	0x0034325f
    14cc:	43003732 	movwmi	r3, #1842	; 0x732
    14d0:	6f635f4d 	svcvs	0x00635f4d
    14d4:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 1324 <.LC0+0xc3c>
    14d8:	70736163 	rsbsvc	r6, r3, r3, ror #2
    14dc:	68615f30 	stmdavs	r1!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    14e0:	726b6c63 	rsbvc	r6, fp, #25344	; 0x6300
    14e4:	5f4d4300 	svcpl	0x004d4300
    14e8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    14ec:	64636c5f 	strbtvs	r6, [r3], #-3167	; 0xc5f
    14f0:	7973685f 	ldmdbvc	r3!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
    14f4:	4300636e 	movwmi	r6, #878	; 0x36e
    14f8:	6f6d5f4d 	svcvs	0x006d5f4d
    14fc:	635f6373 	cmpvs	pc, #-872415231	; 0xcc000001
    1500:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1504:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1508:	5f666e6f 	svcpl	0x00666e6f
    150c:	3169696d 	cmncc	r9, sp, ror #18
    1510:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; 139c <.LC0+0xcb4>
    1514:	5f4d4300 	svcpl	0x004d4300
    1518:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    151c:	61636d5f 	cmnvs	r3, pc, asr sp
    1520:	5f307073 	svcpl	0x00307073
    1524:	6c636861 	stclvs	8, cr6, [r3], #-388	; 0xfffffe7c
    1528:	4300786b 	movwmi	r7, #2155	; 0x86b
    152c:	6f635f4d 	svcvs	0x00635f4d
    1530:	645f666e 	ldrbvs	r6, [pc], #-1646	; 1538 <.LC0+0xe50>
    1534:	635f7264 	cmpvs	pc, #100, 4	; 0x40000006
    1538:	635f656b 	cmpvs	pc, #448790528	; 0x1ac00000
    153c:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1540:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1544:	5f666e6f 	svcpl	0x00666e6f
    1548:	636d7067 	cmnvs	sp, #103	; 0x67
    154c:	3131615f 	teqcc	r1, pc, asr r1
    1550:	5f4d4300 	svcpl	0x004d4300
    1554:	5f646476 	svcpl	0x00646476
    1558:	5f75706d 	svcpl	0x0075706d
    155c:	5f70706f 	svcpl	0x0070706f
    1560:	62727574 	rsbsvs	r7, r2, #116, 10	; 0x1d000000
    1564:	4d43006f 	stclmi	0, cr0, [r3, #-444]	; 0xfffffe44
    1568:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    156c:	70695f66 	rsbvc	r5, r9, r6, ror #30
    1570:	736d5f63 	cmnvc	sp, #396	; 0x18c
    1574:	65725f67 	ldrbvs	r5, [r2, #-3943]!	; 0xf67
    1578:	43003167 	movwmi	r3, #359	; 0x167
    157c:	6f635f4d 	svcvs	0x00635f4d
    1580:	755f666e 	ldrbvc	r6, [pc, #-1646]	; f1a <.LC0+0x832>
    1584:	31747261 	cmncc	r4, r1, ror #4
    1588:	6478725f 	ldrbtvs	r7, [r8], #-607	; 0x25f
    158c:	5f4d4300 	svcpl	0x004d4300
    1590:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1594:	6370695f 	cmnvs	r0, #1556480	; 0x17c000
    1598:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    159c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    15a0:	4d430033 	stclmi	0, cr0, [r3, #-204]	; 0xffffff34
    15a4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    15a8:	70695f66 	rsbvc	r5, r9, r6, ror #30
    15ac:	736d5f63 	cmnvc	sp, #396	; 0x18c
    15b0:	65725f67 	ldrbvs	r5, [r2, #-3943]!	; 0xf67
    15b4:	43003467 	movwmi	r3, #1127	; 0x467
    15b8:	6f635f4d 	svcvs	0x00635f4d
    15bc:	755f666e 	ldrbvc	r6, [pc, #-1646]	; f56 <.LC0+0x86e>
    15c0:	30747261 	rsbscc	r7, r4, r1, ror #4
    15c4:	6478745f 	ldrbtvs	r7, [r8], #-1119	; 0x45f
    15c8:	5f4d4300 	svcpl	0x004d4300
    15cc:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    15d0:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
    15d4:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
    15d8:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
    15dc:	36355f78 	shsub16cc	r5, r5, r8
    15e0:	0039355f 	eorseq	r3, r9, pc, asr r5
    15e4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    15e8:	5f666e6f 	svcpl	0x00666e6f
    15ec:	636d7067 	cmnvs	sp, #103	; 0x67
    15f0:	6b6c635f 	blvs	1b1a374 <.LC0+0x1b19c8c>
    15f4:	5f4d4300 	svcpl	0x004d4300
    15f8:	6e616364 	cdpvs	3, 6, cr6, cr1, cr4, {3}
    15fc:	6d61725f 	sfmvs	f7, 2, [r1, #-380]!	; 0xfffffe84
    1600:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1604:	5f4d4300 	svcpl	0x004d4300
    1608:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    160c:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
    1610:	72645f31 	rsbvc	r5, r4, #49, 30	; 0xc4
    1614:	75627676 	strbvc	r7, [r2, #-1654]!	; 0x676
    1618:	4d430073 	stclmi	0, cr0, [r3, #-460]	; 0xfffffe34
    161c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1620:	70675f66 	rsbvc	r5, r7, r6, ror #30
    1624:	6f5f636d 	svcvs	0x005f636d
    1628:	725f6e65 	subsvc	r6, pc, #1616	; 0x650
    162c:	43006e65 	movwmi	r6, #3685	; 0xe65
    1630:	6f635f4d 	svcvs	0x00635f4d
    1634:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 1484 <.LC0+0xd9c>
    1638:	5f316969 	svcpl	0x00316969
    163c:	30647874 	rsbcc	r7, r4, r4, ror r8
    1640:	5f4d4300 	svcpl	0x004d4300
    1644:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1648:	69696d5f 	stmdbvs	r9!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    164c:	78745f31 	ldmdavc	r4!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    1650:	43003164 	movwmi	r3, #356	; 0x164
    1654:	6f635f4d 	svcvs	0x00635f4d
    1658:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 14a8 <.LC0+0xdc0>
    165c:	5f316969 	svcpl	0x00316969
    1660:	32647874 	rsbcc	r7, r4, #116, 16	; 0x740000
    1664:	5f4d4300 	svcpl	0x004d4300
    1668:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    166c:	69696d5f 	stmdbvs	r9!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1670:	78745f31 	ldmdavc	r4!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    1674:	43003364 	movwmi	r3, #868	; 0x364
    1678:	6f635f4d 	svcvs	0x00635f4d
    167c:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
    1680:	5f636d70 	svcpl	0x00636d70
    1684:	316e6562 	cmncc	lr, r2, ror #10
    1688:	5f4d4300 	svcpl	0x004d4300
    168c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1690:	6572765f 	ldrbvs	r7, [r2, #-1631]!	; 0x65f
    1694:	74635f66 	strbtvc	r5, [r3], #-3942	; 0xf66
    1698:	43006c72 	movwmi	r6, #3186	; 0xc72
    169c:	6f635f4d 	svcvs	0x00635f4d
    16a0:	735f666e 	cmpvc	pc, #115343360	; 0x6e00000
    16a4:	0032616d 	eorseq	r6, r2, sp, ror #2
    16a8:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    16ac:	5f666e6f 	svcpl	0x00666e6f
    16b0:	30697073 	rsbcc	r7, r9, r3, ror r0
    16b4:	6c63735f 	stclvs	3, cr7, [r3], #-380	; 0xfffffe84
    16b8:	4d43006b 	stclmi	0, cr0, [r3, #-428]	; 0xfffffe54
    16bc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    16c0:	70695f66 	rsbvc	r5, r9, r6, ror #30
    16c4:	736d5f63 	cmnvc	sp, #396	; 0x18c
    16c8:	65725f67 	ldrbvs	r5, [r2, #-3943]!	; 0xf67
    16cc:	43003067 	movwmi	r3, #103	; 0x67
    16d0:	6d675f4d 	stclvs	15, cr5, [r7, #-308]!	; 0xfffffecc
    16d4:	735f6969 	cmpvc	pc, #1720320	; 0x1a4000
    16d8:	43006c65 	movwmi	r6, #3173	; 0xc65
    16dc:	6f635f4d 	svcvs	0x00635f4d
    16e0:	695f666e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    16e4:	6d5f6370 	ldclvs	3, cr6, [pc, #-448]	; 152c <.LC0+0xe44>
    16e8:	725f6773 	subsvc	r6, pc, #30146560	; 0x1cc0000
    16ec:	00326765 	eorseq	r6, r2, r5, ror #14
    16f0:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    16f4:	32336b6c 	eorscc	r6, r3, #108, 22	; 0x1b000
    16f8:	7669646b 	strbtvc	r6, [r9], -fp, ror #8
    16fc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1700:	74635f6f 	strbtvc	r5, [r3], #-3951	; 0xf6f
    1704:	43006c72 	movwmi	r6, #3186	; 0xc72
    1708:	6f635f4d 	svcvs	0x00635f4d
    170c:	755f666e 	ldrbvc	r6, [pc, #-1646]	; 10a6 <.LC0+0x9be>
    1710:	5f306273 	svcpl	0x00306273
    1714:	76767264 	ldrbtvc	r7, [r6], -r4, ror #4
    1718:	00737562 	rsbseq	r7, r3, r2, ror #10
    171c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1720:	5f666e6f 	svcpl	0x00666e6f
    1724:	5f637069 	svcpl	0x00637069
    1728:	5f67736d 	svcpl	0x0067736d
    172c:	35676572 	strbcc	r6, [r7, #-1394]!	; 0x572
    1730:	5f4d4300 	svcpl	0x004d4300
    1734:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1738:	6370695f 	cmnvs	r0, #1556480	; 0x17c000
    173c:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    1740:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1744:	4d430036 	stclmi	0, cr0, [r3, #-216]	; 0xffffff28
    1748:	7665645f 			; <UNDEFINED> instruction: 0x7665645f
    174c:	6165665f 	cmnvs	r5, pc, asr r6
    1750:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    1754:	5f4d4300 	svcpl	0x004d4300
    1758:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    175c:	5f6c6f72 	svcpl	0x006c6f72
    1760:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xf6d
    1764:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    1768:	0065646f 	rsbeq	r6, r5, pc, ror #8
    176c:	645f4d43 	ldrbvs	r4, [pc], #-3395	; 1774 <.LC0+0x108c>
    1770:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1774:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xf65
    1778:	5f4d4300 	svcpl	0x004d4300
    177c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1780:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    1784:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1788:	00315f79 	eorseq	r5, r1, r9, ror pc
    178c:	755f4d43 	ldrbvc	r4, [pc, #-3395]	; a51 <.LC0+0x369>
    1790:	735f6273 	cmpvc	pc, #805306375	; 0x30000007
    1794:	00307374 	eorseq	r7, r0, r4, ror r3
    1798:	755f4d43 	ldrbvc	r4, [pc, #-3395]	; a5d <.LC0+0x375>
    179c:	735f6273 	cmpvc	pc, #805306375	; 0x30000007
    17a0:	00317374 	eorseq	r7, r1, r4, ror r3
    17a4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    17a8:	5f666e6f 	svcpl	0x00666e6f
    17ac:	5f64636c 	svcpl	0x0064636c
    17b0:	61746164 	cmnvs	r4, r4, ror #2
    17b4:	43003431 	movwmi	r3, #1073	; 0x431
    17b8:	64765f4d 	ldrbtvs	r5, [r6], #-3917	; 0xf4d
    17bc:	706d5f64 	rsbvc	r5, sp, r4, ror #30
    17c0:	706f5f75 	rsbvc	r5, pc, r5, ror pc	; <UNPREDICTABLE>
    17c4:	32315f70 	eorscc	r5, r1, #112, 30	; 0x1c0
    17c8:	4d430030 	stclmi	0, cr0, [r3, #-192]	; 0xffffff40
    17cc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    17d0:	70645f66 	rsbvc	r5, r4, r6, ror #30
    17d4:	705f6c6c 	subsvc	r6, pc, ip, ror #24
    17d8:	735f7277 	cmpvc	pc, #1879048199	; 0x70000007
    17dc:	74635f77 	strbtvc	r5, [r3], #-3959	; 0xf77
    17e0:	43006c72 	movwmi	r6, #3186	; 0xc72
    17e4:	6f635f4d 	svcvs	0x00635f4d
    17e8:	785f666e 	ldmdavc	pc, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    17ec:	5f616d64 	svcpl	0x00616d64
    17f0:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    17f4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    17f8:	00307274 	eorseq	r7, r0, r4, ror r2
    17fc:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1800:	5f666e6f 	svcpl	0x00666e6f
    1804:	616d6478 	smcvs	54856	; 0xd648
    1808:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0x55f
    180c:	695f746e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1810:	3172746e 	cmncc	r2, lr, ror #8
    1814:	5f4d4300 	svcpl	0x004d4300
    1818:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    181c:	6370745f 	cmnvs	r0, #1593835520	; 0x5f000000
    1820:	76655f63 	strbtvc	r5, [r5], -r3, ror #30
    1824:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
    1828:	5f345f78 	svcpl	0x00345f78
    182c:	4d430037 	stclmi	0, cr0, [r3, #-220]	; 0xffffff24
    1830:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1834:	70745f66 	rsbsvc	r5, r4, r6, ror #30
    1838:	655f6363 	ldrbvs	r6, [pc, #-867]	; 14dd <.LC0+0xdf5>
    183c:	6d5f7476 	cfldrdvs	mvd7, [pc, #-472]	; 166c <.LC0+0xf84>
    1840:	345f7875 	ldrbcc	r7, [pc], #-2165	; 1848 <.LC0+0x1160>
    1844:	31355f38 	teqcc	r5, r8, lsr pc
    1848:	5f4d4300 	svcpl	0x004d4300
    184c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1850:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1854:	30645f30 	rsbcc	r5, r4, r0, lsr pc
    1858:	5f4d4300 	svcpl	0x004d4300
    185c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1860:	7264645f 	rsbvc	r6, r4, #1593835520	; 0x5f000000
    1864:	646d635f 	strbtvs	r6, [sp], #-863	; 0x35f
    1868:	6f695f30 	svcvs	0x00695f30
    186c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1870:	5f4d4300 	svcpl	0x004d4300
    1874:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1878:	61636d5f 	cmnvs	r3, pc, asr sp
    187c:	5f307073 	svcpl	0x00307073
    1880:	30727861 	rsbscc	r7, r2, r1, ror #16
    1884:	5f4d4300 	svcpl	0x004d4300
    1888:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    188c:	61636d5f 	cmnvs	r3, pc, asr sp
    1890:	5f307073 	svcpl	0x00307073
    1894:	31727861 	cmncc	r2, r1, ror #16
    1898:	5f4d4300 	svcpl	0x004d4300
    189c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    18a0:	5f6c6f72 	svcpl	0x006c6f72
    18a4:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
    18a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    18ac:	4d430067 	stclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    18b0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    18b4:	636c5f66 	cmnvs	ip, #408	; 0x198
    18b8:	61645f64 	cmnvs	r4, r4, ror #30
    18bc:	00386174 	eorseq	r6, r8, r4, ror r1
    18c0:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    18c4:	5f666e6f 	svcpl	0x00666e6f
    18c8:	3169696d 	cmncc	r9, sp, ror #18
    18cc:	5f78745f 	svcpl	0x0078745f
    18d0:	43006e65 	movwmi	r6, #3685	; 0xe65
    18d4:	6f635f4d 	svcvs	0x00635f4d
    18d8:	745f666e 	ldrbvc	r6, [pc], #-1646	; 18e0 <.LC0+0x11f8>
    18dc:	43006b63 	movwmi	r6, #2915	; 0xb63
    18e0:	6f635f4d 	svcvs	0x00635f4d
    18e4:	755f666e 	ldrbvc	r6, [pc, #-1646]	; 127e <.LC0+0xb96>
    18e8:	30747261 	rsbscc	r7, r4, r1, ror #4
    18ec:	7374635f 	cmnvc	r4, #2080374785	; 0x7c000001
    18f0:	4d43006e 	stclmi	0, cr0, [r3, #-440]	; 0xfffffe48
    18f4:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
    18f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    18fc:	4300306c 	movwmi	r3, #108	; 0x6c
    1900:	73755f4d 	cmnvc	r5, #308	; 0x134
    1904:	74635f62 	strbtvc	r5, [r3], #-3938	; 0xf62
    1908:	00316c72 	eorseq	r6, r1, r2, ror ip
    190c:	755f4d43 	ldrbvc	r4, [pc, #-3395]	; bd1 <.LC0+0x4e9>
    1910:	765f6273 			; <UNDEFINED> instruction: 0x765f6273
    1914:	705f6469 	subsvc	r6, pc, r9, ror #8
    1918:	43006469 	movwmi	r6, #1129	; 0x469
    191c:	6f635f4d 	svcvs	0x00635f4d
    1920:	695f666e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    1924:	5f306332 	svcpl	0x00306332
    1928:	006c6373 	rsbeq	r6, ip, r3, ror r3
    192c:	755f4d43 	ldrbvc	r4, [pc, #-3395]	; bf1 <.LC0+0x509>
    1930:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
    1934:	5f70756b 	svcpl	0x0070756b
    1938:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    193c:	5f4d4300 	svcpl	0x004d4300
    1940:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1944:	69696d5f 	stmdbvs	r9!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1948:	78725f31 	ldmdavc	r2!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    194c:	43003064 	movwmi	r3, #100	; 0x64
    1950:	6f635f4d 	svcvs	0x00635f4d
    1954:	6d5f666e 	ldclvs	6, cr6, [pc, #-440]	; 17a4 <.LC0+0x10bc>
    1958:	5f316969 	svcpl	0x00316969
    195c:	31647872 	smccc	18306	; 0x4782
    1960:	5f4d4300 	svcpl	0x004d4300
    1964:	5f756d6d 	svcpl	0x00756d6d
    1968:	00676663 	rsbeq	r6, r7, r3, ror #12
    196c:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    1970:	5f666e6f 	svcpl	0x00666e6f
    1974:	3169696d 	cmncc	r9, sp, ror #18
    1978:	6478725f 	ldrbtvs	r7, [r8], #-607	; 0x25f
    197c:	4d430033 	stclmi	0, cr0, [r3, #-204]	; 0xffffff34
    1980:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1984:	64745f66 	ldrbtvs	r5, [r4], #-3942	; 0xf66
    1988:	4d430069 	stclmi	0, cr0, [r3, #-420]	; 0xfffffe5c
    198c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1990:	70745f66 	rsbsvc	r5, r4, r6, ror #30
    1994:	655f6363 	ldrbvs	r6, [pc, #-867]	; 1639 <.LC0+0xf51>
    1998:	6d5f7476 	cfldrdvs	mvd7, [pc, #-472]	; 17c8 <.LC0+0x10e0>
    199c:	365f7875 			; <UNDEFINED> instruction: 0x365f7875
    19a0:	33365f30 	teqcc	r6, #48, 30	; 0xc0
    19a4:	5f4d4300 	svcpl	0x004d4300
    19a8:	5f6c6c70 	svcpl	0x006c6c70
    19ac:	696b6c63 	stmdbvs	fp!, {r0, r1, r5, r6, sl, fp, sp, lr}^
    19b0:	6c75706e 	ldclvs	0, cr7, [r5], #-440	; 0xfffffe48
    19b4:	635f776f 	cmpvs	pc, #29097984	; 0x1bc0000
    19b8:	006c7274 	rsbeq	r7, ip, r4, ror r2
    19bc:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    19c0:	5f666e6f 	svcpl	0x00666e6f
    19c4:	5f707476 	svcpl	0x00707476
    19c8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    19cc:	5f4d4300 	svcpl	0x004d4300
    19d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    19d4:	61636d5f 	cmnvs	r3, pc, asr sp
    19d8:	5f307073 	svcpl	0x00307073
    19dc:	6b6c6361 	blvs	1b1a768 <.LC0+0x1b1a080>
    19e0:	4d430072 	stclmi	0, cr0, [r3, #-456]	; 0xfffffe38
    19e4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    19e8:	70675f66 	rsbvc	r5, r7, r6, ror #30
    19ec:	615f636d 	cmpvs	pc, sp, ror #6
    19f0:	00323164 	eorseq	r3, r2, r4, ror #2
    19f4:	635f4d43 	cmpvs	pc, #4288	; 0x10c0
    19f8:	5f666e6f 	svcpl	0x00666e6f
    19fc:	69696d72 	stmdbvs	r9!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    1a00:	65725f31 	ldrbvs	r5, [r2, #-3889]!	; 0xf31
    1a04:	6c635f66 	stclvs	15, cr5, [r3], #-408	; 0xfffffe68
    1a08:	4d43006b 	stclmi	0, cr0, [r3, #-428]	; 0xfffffe54
    1a0c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1a10:	636d5f66 	cmnvs	sp, #408	; 0x198
    1a14:	30707361 	rsbscc	r7, r0, r1, ror #6
    1a18:	6c63615f 	stfvse	f6, [r3], #-380	; 0xfffffe84
    1a1c:	4300786b 	movwmi	r7, #2155	; 0x86b
    1a20:	6f635f4d 	svcvs	0x00635f4d
    1a24:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
    1a28:	5f636d70 	svcpl	0x00636d70
    1a2c:	30316461 	eorscc	r6, r1, r1, ror #8
    1a30:	5f4d4300 	svcpl	0x004d4300
    1a34:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1a38:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
    1a3c:	64615f63 	strbtvs	r5, [r1], #-3939	; 0xf63
    1a40:	43003131 	movwmi	r3, #305	; 0x131
    1a44:	6f635f4d 	svcvs	0x00635f4d
    1a48:	6f72746e 	svcvs	0x0072746e
    1a4c:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    1a50:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a54:	5f4d4300 	svcpl	0x004d4300
    1a58:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1a5c:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
    1a60:	64615f63 	strbtvs	r5, [r1], #-3939	; 0xf63
    1a64:	43003331 	movwmi	r3, #817	; 0x331
    1a68:	6f635f4d 	svcvs	0x00635f4d
    1a6c:	675f666e 	ldrbvs	r6, [pc, -lr, ror #12]
    1a70:	5f636d70 	svcpl	0x00636d70
    1a74:	34316461 	ldrtcc	r6, [r1], #-1121	; 0x461
    1a78:	5f4d4300 	svcpl	0x004d4300
    1a7c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1a80:	6d70675f 	ldclvs	7, cr6, [r0, #-380]!	; 0xfffffe84
    1a84:	64615f63 	strbtvs	r5, [r1], #-3939	; 0xf63
    1a88:	43003531 	movwmi	r3, #1329	; 0x531
    1a8c:	6f635f4d 	svcvs	0x00635f4d
    1a90:	735f6572 	cmpvc	pc, #478150656	; 0x1c800000
    1a94:	5f6f646c 	svcpl	0x006f646c
    1a98:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1a9c:	5f4d4300 	svcpl	0x004d4300
    1aa0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1aa4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    1aa8:	635f3174 	cmpvs	pc, #116, 2
    1aac:	006e7374 	rsbeq	r7, lr, r4, ror r3
    1ab0:	6d5f4d43 	ldclvs	13, cr4, [pc, #-268]	; 19ac <.LC0+0x12c4>
    1ab4:	695f6361 	ldmdbvs	pc, {r0, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
    1ab8:	685f3064 	ldmdavs	pc, {r2, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    1abc:	4d430069 	stclmi	0, cr0, [r3, #-420]	; 0xfffffe5c
    1ac0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1ac4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 18fc <.LC0+0x1214>
    1ac8:	696d655f 	stmdbvs	sp!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    1acc:	64735f66 	ldrbtvs	r5, [r3], #-3942	; 0xf66
    1ad0:	5f6d6172 	svcpl	0x006d6172
    1ad4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1ad8:	43006769 	movwmi	r6, #1897	; 0x769
    1adc:	6f635f4d 	svcvs	0x00635f4d
    1ae0:	6c5f666e 	mrrcvs	6, 6, r6, pc, cr14	; <UNPREDICTABLE>
    1ae4:	765f6463 	ldrbvc	r6, [pc], -r3, ror #8
    1ae8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    1aec:	5f4d4300 	svcpl	0x004d4300
    1af0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1af4:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1af8:	31645f30 	cmncc	r4, r0, lsr pc
    1afc:	5f4d4300 	svcpl	0x004d4300
    1b00:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1b04:	6f64745f 	svcvs	0x0064745f
    1b08:	5f4d4300 	svcpl	0x004d4300
    1b0c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1b10:	6332695f 	teqvs	r2, #1556480	; 0x17c000
    1b14:	64735f30 	ldrbtvs	r5, [r3], #-3888	; 0xf30
    1b18:	4d430061 	stclmi	0, cr0, [r3, #-388]	; 0xfffffe7c
    1b1c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1b20:	70745f66 	rsbsvc	r5, r4, r6, ror #30
    1b24:	655f6363 	ldrbvs	r6, [pc, #-867]	; 17c9 <.LC0+0x10e1>
    1b28:	6d5f7476 	cfldrdvs	mvd7, [pc, #-472]	; 1958 <.LC0+0x1270>
    1b2c:	345f7875 	ldrbcc	r7, [pc], #-2165	; 1b34 <.LC0+0x144c>
    1b30:	37345f34 			; <UNDEFINED> instruction: 0x37345f34
    1b34:	616d5f00 	cmnvs	sp, r0, lsl #30
    1b38:	6d006e69 	stcvs	14, cr6, [r0, #-420]	; 0xfffffe5c
    1b3c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
    1b40:	41500063 	cmpmi	r0, r3, rrx
    1b44:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1b48:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0x55f
    1b4c:	4c46004e 	mcrrmi	0, 4, r0, r6, cr14
    1b50:	4f5f574f 	svcmi	0x005f574f
    1b54:	53004646 	movwpl	r4, #1606	; 0x646
    1b58:	31504f54 	cmpcc	r0, r4, asr pc
    1b5c:	4f545300 	svcmi	0x00545300
    1b60:	46003250 			; <UNDEFINED> instruction: 0x46003250
    1b64:	5f574f4c 	svcpl	0x00574f4c
    1b68:	50004e4f 	andpl	r4, r0, pc, asr #28
    1b6c:	54495241 	strbpl	r5, [r9], #-577	; 0x241
    1b70:	444f5f59 	strbmi	r5, [pc], #-3929	; 1b78 <.LC0+0x1490>
    1b74:	54530044 	ldrbpl	r0, [r3], #-68	; 0x44
    1b78:	5f31504f 	svcpl	0x0031504f
    1b7c:	41500035 	cmpmi	r0, r5, lsr r0
    1b80:	59544952 	ldmdbpl	r4, {r1, r4, r6, r8, fp, lr}^
    1b84:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
    1b88:	53490045 	movtpl	r0, #36933	; 0x9045
    1b8c:	62003252 	andvs	r3, r0, #536870917	; 0x20000005
    1b90:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
    1b94:	00657461 	rsbeq	r7, r5, r1, ror #8
    1b98:	49465854 	stmdbmi	r6, {r2, r4, r6, fp, ip, lr}^
    1b9c:	4c5f4f46 	mrrcmi	15, 4, r4, pc, cr6	; <UNPREDICTABLE>
    1ba0:	41004c56 	tstmi	r0, r6, asr ip
    1ba4:	47455243 	strbmi	r5, [r5, -r3, asr #4]
    1ba8:	4c465300 	mcrrmi	3, 0, r5, r6, cr0
    1bac:	47005253 	smlsdmi	r0, r3, r2, r5
    1bb0:	5f4f4950 	svcpl	0x004f4950
    1bb4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1bb8:	72617500 	rsbvc	r7, r1, #0, 10
    1bbc:	6f635f74 	svcvs	0x00635f74
    1bc0:	6c6f736e 	stclvs	3, cr7, [pc], #-440	; 1a10 <.LC0+0x1328>
    1bc4:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1bc8:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1bcc:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
    1bd0:	65730043 	ldrbvs	r0, [r3, #-67]!	; 0x43
    1bd4:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    1bd8:	6c660067 	stclvs	0, cr0, [r6], #-412	; 0xfffffe64
    1bdc:	0074616f 	rsbseq	r6, r4, pc, ror #2
    1be0:	74726155 	ldrbtvc	r6, [r2], #-341	; 0x155
    1be4:	65525f30 	ldrbvs	r5, [r2, #-3888]	; 0xf30
    1be8:	00746573 	rsbseq	r6, r4, r3, ror r5
    1bec:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1bf0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    1bf4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    1bf8:	5300676e 	movwpl	r6, #1902	; 0x76e
    1bfc:	00435359 	subeq	r5, r3, r9, asr r3
    1c00:	4c465854 	mcrrmi	8, 5, r5, r6, cr4
    1c04:	58540048 	ldmdapl	r4, {r3, r6}^
    1c08:	004c4c46 	subeq	r4, ip, r6, asr #24
    1c0c:	53535953 	cmppl	r3, #1359872	; 0x14c000
    1c10:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    1c14:	00766964 	rsbseq	r6, r6, r4, ror #18
    1c18:	53504643 	cmppl	r0, #70254592	; 0x4300000
    1c1c:	52444d00 	subpl	r4, r4, #0, 26
    1c20:	444d0031 	strbmi	r0, [sp], #-49	; 0x31
    1c24:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
    1c28:	00335244 	eorseq	r5, r3, r4, asr #4
    1c2c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
    1c30:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    1c34:	32524549 	subscc	r4, r2, #306184192	; 0x12400000
    1c38:	44585400 	ldrbmi	r5, [r8], #-1024	; 0x400
    1c3c:	4600414d 	strmi	r4, [r0], -sp, asr #2
    1c40:	5f514552 	svcpl	0x00514552
    1c44:	004c4553 	subeq	r4, ip, r3, asr r5
    1c48:	524c4245 	subpl	r4, ip, #1342177284	; 0x50000004
    1c4c:	46585200 	ldrbmi	r5, [r8], -r0, lsl #4
    1c50:	5f4f4649 	svcpl	0x004f4649
    1c54:	004c564c 	subeq	r5, ip, ip, asr #12
    1c58:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1c5c:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
    1c60:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    1c64:	5500676e 	strpl	r6, [r0, #-1902]	; 0x76e
    1c68:	5f545241 	svcpl	0x00545241
    1c6c:	43746567 	cmnmi	r4, #432013312	; 0x19c00000
    1c70:	72617000 	rsbvc	r7, r1, #0
    1c74:	00797469 	rsbseq	r7, r9, r9, ror #8
    1c78:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    1c7c:	5449425f 	strbpl	r4, [r9], #-607	; 0x25f
    1c80:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
    1c84:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1c88:	41550068 	cmpmi	r5, r8, rrx
    1c8c:	695f5452 	ldmdbvs	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1c90:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c94:	45524653 	ldrbmi	r4, [r2, #-1619]	; 0x653
    1c98:	53004847 	movwpl	r4, #2119	; 0x847
    1c9c:	47455246 	strbmi	r5, [r5, -r6, asr #4]
    1ca0:	4552004c 	ldrbmi	r0, [r2, #-76]	; 0x4c
    1ca4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
    1ca8:	6f6c6600 	svcvs	0x006c6600
    1cac:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    1cb0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1ae8 <.LC0+0x1400>
    1cb4:	4f4c4600 	svcmi	0x004c4600
    1cb8:	00745f57 	rsbseq	r5, r4, r7, asr pc
    1cbc:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    1cc0:	00746942 	rsbseq	r6, r4, r2, asr #18
    1cc4:	49524150 	ldmdbmi	r2, {r4, r6, r8, lr}^
    1cc8:	425f5954 	subsmi	r5, pc, #84, 18	; 0x150000
    1ccc:	745f5449 	ldrbvc	r5, [pc], #-1097	; 1cd4 <.LC0+0x15ec>
    1cd0:	46585200 	ldrbmi	r5, [r8], -r0, lsl #4
    1cd4:	5200484c 	andpl	r4, r0, #76, 16	; 0x4c0000
    1cd8:	4c4c4658 	mcrrmi	6, 5, r4, ip, cr8
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	0000006c 	andeq	r0, r0, ip, rrx
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	8b040e42 	blhi	103930 <.LC0+0x103248>
  24:	0b0d4201 	bleq	350830 <.LC0+0x350148>
  28:	00000014 	andeq	r0, r0, r4, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	000000a4 	andeq	r0, r0, r4, lsr #1
  34:	00000034 	andeq	r0, r0, r4, lsr r0
  38:	8b040e42 	blhi	103948 <.LC0+0x103260>
  3c:	0b0d4201 	bleq	350848 <.LC0+0x350160>
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	000000d8 	ldrdeq	r0, [r0], -r8
  4c:	000000d4 	ldrdeq	r0, [r0], -r4
  50:	8b080e42 	blhi	203960 <.LC0+0x203278>
  54:	42018e02 	andmi	r8, r1, #2, 28
  58:	00040b0c 	andeq	r0, r4, ip, lsl #22
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
#include "clock.h"

void CM_SetClk(CLK_MODULE_t module, CM_PER_REG reg, unsigned int value)
{
  6c:	00000014 	andeq	r0, r0, r4, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	000001ac 	andeq	r0, r0, ip, lsr #3
  78:	00000034 	andeq	r0, r0, r4, lsr r0
  7c:	8b040e42 	blhi	10398c <.LC0+0x1032a4>
  80:	0b0d4201 	bleq	35088c <.LC0+0x3501a4>

	PUT32(module+reg, value);
  84:	00000014 	andeq	r0, r0, r4, lsl r0
  88:	0000005c 	andeq	r0, r0, ip, asr r0
  8c:	000001e0 	andeq	r0, r0, r0, ror #3
  90:	00000030 	andeq	r0, r0, r0, lsr r0
  94:	8b040e42 	blhi	1039a4 <.LC0+0x1032bc>
}
  98:	0b0d4201 	bleq	3508a4 <.LC0+0x3501bc>
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	0000005c 	andeq	r0, r0, ip, asr r0

unsigned int CM_GetClk(CLK_MODULE_t module, CM_PER_REG reg)
{
  a4:	00000210 	andeq	r0, r0, r0, lsl r2
  a8:	00000050 	andeq	r0, r0, r0, asr r0
  ac:	8b080e42 	blhi	2039bc <.LC0+0x2032d4>
  b0:	42018e02 	andmi	r8, r1, #2, 28
  b4:	00040b0c 	andeq	r0, r4, ip, lsl #22
	return GET32(module+reg);
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	0000005c 	andeq	r0, r0, ip, asr r0
  c0:	00000260 	andeq	r0, r0, r0, ror #4
  c4:	00000024 	andeq	r0, r0, r4, lsr #32
}
  c8:	8b080e42 	blhi	2039d8 <.LC0+0x2032f0>
  cc:	42018e02 	andmi	r8, r1, #2, 28
  d0:	00040b0c 	andeq	r0, r4, ip, lsl #22
  d4:	0000000c 	andeq	r0, r0, ip

void Init_UART0_Clk()
{
  d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  dc:	7c020001 	stcvc	0, cr0, [r2], {1}
  e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24

	unsigned int temp;
	 // software-forced wake-up transition on the "always on clock domain", TRM Table 8-92
	temp = CM_GetClk(CM_WKUP, CM_WKUP_CLKSTCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
  e4:	00000018 	andeq	r0, r0, r8, lsl r0
  e8:	000000d4 	ldrdeq	r0, [r0], -r4
  ec:	00000284 	andeq	r0, r0, r4, lsl #5
  f0:	00000094 	muleq	r0, r4, r0
  f4:	8b080e42 	blhi	203a04 <.LC0+0x20331c>
	temp &= ~(0x3);
  f8:	42018e02 	andmi	r8, r1, #2, 28
  fc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 100:	0000000c 	andeq	r0, r0, ip
	temp |= (0x2);
 104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 108:	7c020001 	stcvc	0, cr0, [r2], {1}
 10c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	CM_SetClk(CM_WKUP, CM_WKUP_CLKSTCTRL, temp);		//0x2=SW_WKUP
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	00000100 	andeq	r0, r0, r0, lsl #2
 118:	00000318 	andeq	r0, r0, r8, lsl r3
 11c:	00000058 	andeq	r0, r0, r8, asr r0
 120:	8b080e42 	blhi	203a30 <.LC0+0x203348>

	// software-forced wake up transition on the L4 high speed domain
	temp = CM_GetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL);	//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 124:	42018e02 	andmi	r8, r1, #2, 28
 128:	00040b0c 	andeq	r0, r4, ip, lsl #22
 12c:	00000014 	andeq	r0, r0, r4, lsl r0
 130:	00000100 	andeq	r0, r0, r0, lsl #2
 134:	00000370 	andeq	r0, r0, r0, ror r3
	temp &= ~(0x3);
 138:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 13c:	8b040e42 	blhi	103a4c <.LC0+0x103364>
 140:	0b0d4201 	bleq	35094c <.LC0+0x350264>
	temp |= (0x2);
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000100 	andeq	r0, r0, r0, lsl #2
 14c:	00000540 	andeq	r0, r0, r0, asr #10
	CM_SetClk(CM_PER, CM_PER_L4HS_CLKSTCTRL, temp);		//0x2=SW_WKUP
 150:	00000034 	andeq	r0, r0, r4, lsr r0
 154:	8b080e42 	blhi	203a64 <.LC0+0x20337c>
 158:	42018e02 	andmi	r8, r1, #2, 28
 15c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 160:	00000018 	andeq	r0, r0, r8, lsl r0

	// Module is explicitly enabled,    TRM Table 8-137
	temp = CM_GetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL);		//This register enables the domain power state transition. It controls the SW supervised clock domain state transition between ON-ACTIVE and ON-INACTIVE states. It also hold one status bit per clock input of the domain
 164:	00000100 	andeq	r0, r0, r0, lsl #2
 168:	00000574 	andeq	r0, r0, r4, ror r5
 16c:	00000060 	andeq	r0, r0, r0, rrx
 170:	8b080e42 	blhi	203a80 <.LC0+0x203398>
 174:	42018e02 	andmi	r8, r1, #2, 28
	temp &= ~(0x3);
 178:	00040b0c 	andeq	r0, r4, ip, lsl #22
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00000100 	andeq	r0, r0, r0, lsl #2
	temp |= (0x2);
 184:	000005d4 	ldrdeq	r0, [r0], -r4
 188:	00000048 	andeq	r0, r0, r8, asr #32
 18c:	8b040e42 	blhi	103a9c <.LC0+0x1033b4>
	CM_SetClk(CM_WKUP, CM_WKUP_UART0_CLKCTRL, temp);		//0x2=SW_WKUP
 190:	0b0d4201 	bleq	35099c <.LC0+0x3502b4>
 194:	00000018 	andeq	r0, r0, r8, lsl r0
 198:	00000100 	andeq	r0, r0, r0, lsl #2
 19c:	0000061c 	andeq	r0, r0, ip, lsl r6
 1a0:	00000064 	andeq	r0, r0, r4, rrx
*/
	

   

}
 1a4:	8b080e42 	blhi	203ab4 <.LC0+0x2033cc>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
#include "control_module.h"

void CM_setCtrlModule(CONTROL_MODULE_REG_t module, unsigned int value)
{
 1ac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000100 	andeq	r0, r0, r0, lsl #2
 1b8:	00000680 	andeq	r0, r0, r0, lsl #13
 1bc:	00000064 	andeq	r0, r0, r4, rrx

	PUT32(CONTROL_MODULE_REGISTER_BASE + module, value);
 1c0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 1c4:	8e028b03 	vmlahi.f64	d8, d2, d3
 1c8:	0b0c4201 	bleq	3109d4 <.LC0+0x3102ec>
 1cc:	00000004 	andeq	r0, r0, r4
